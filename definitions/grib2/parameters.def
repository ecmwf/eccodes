# (C) Copyright 2005- ECMWF.

transient dummyc=0: hidden;


concept paramIdLegacyECMF (defaultParameter,"paramId.legacy.def",conceptsMasterDir,conceptsLocalDirECMF): long_type,no_copy,hidden;
concept paramIdECMF (paramIdLegacyECMF,"paramId.def",conceptsMasterDir,conceptsLocalDirECMF): long_type,no_copy;
concept paramIdFallback (paramIdECMF,"paramId.def",conceptsDir2,conceptsDir1): long_type;

concept shortNameLegacyECMF (defaultShortName,"shortName.legacy.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy,hidden;
concept shortNameECMF (shortNameLegacyECMF,"shortName.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy;
concept shortNameFallback (shortNameECMF,"shortName.def",conceptsDir2,conceptsDir1): no_copy,dump;

concept unitsLegacyECMF (defaultName,"units.legacy.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy,hidden,read_only;
concept unitsECMF (unitsLegacyECMF,"units.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy, read_only;
concept unitsFallback (unitsECMF,"units.def",conceptsDir2,conceptsDir1): no_copy, read_only;

concept nameLegacyECMF (defaultName,"name.legacy.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy,hidden;
concept nameECMF (nameLegacyECMF,"name.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy;
concept nameFallback (nameECMF,"name.def",conceptsDir2,conceptsDir1): no_copy,dump;

concept cfNameLegacyECMF (defaultShortName,"cfName.legacy.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy,hidden;
concept cfNameECMF (cfNameLegacyECMF,"cfName.def",conceptsMasterDir,conceptsLocalDirECMF) : no_copy;
concept cfNameFallback (cfNameECMF,"cfName.def",conceptsDir2,conceptsDir1) : no_copy,dump;

concept cfVarNameLegacyECMF (defaultShortName,"cfVarName.legacy.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy,hidden;
concept cfVarNameECMF (cfVarNameLegacyECMF,"cfVarName.def",conceptsMasterDir,conceptsLocalDirECMF): no_copy;
concept cfVarNameFallback (cfVarNameECMF,"cfVarName.def",conceptsDir2,conceptsDir1): no_copy,dump;

if (tablesVersion >= 31 ) {
  concept paramId (paramIdFallback,"paramId.def",conceptsDir2,conceptsDir1): long_type;
  concept ls.shortName (shortNameFallback,"shortName.def",conceptsDir2,conceptsDir1): no_copy,dump;
  concept units (unitsFallback,"units.def",conceptsDir2,conceptsDir1): no_copy, read_only;
  concept name(nameFallback,"name.def",conceptsDir2,conceptsDir1): no_copy,dump;
  concept cfName(cfNameFallback,"cfName.def",conceptsDir2,conceptsDir1) : no_copy,dump;
  concept cfVarName (cfVarNameFallback,"cfVarName.def",conceptsDir2,conceptsDir1): no_copy,dump;
}
else {
  alias paramId=paramIdFallback;
  alias ls.shortName=shortNameFallback;
  alias units=unitsFallback;
  alias name=nameFallback;
  alias cfName=cfNameFallback;
  alias cfVarName=cfVarNameFallback;
}

if (tablesVersion >= 31 ) {
  concept chemId (unknown,"chemId.def",conceptsDir2,conceptsDir1): no_copy,long_type,dump;
  concept chemName (unknown,"chemName.def",conceptsDir2,conceptsDir1): no_copy,dump;
  concept chemShortName (unknown,"chemShortName.def",conceptsDir2,conceptsDir1): no_copy,dump;
  concept chemFormula (unknown,"chemFormula.def",conceptsDir2,conceptsDir1): no_copy,dump;

  if ( !(chemId is "unknown") ) {
    alias mars.chem = chemId;
    alias parameter.chemId = chemId;
    alias ls.chemShortName = chemShortName;
    alias parameter.chemShortName = chemShortName;
  }
}

template_nofail names "grib2/products_[productionStatusOfProcessedData].def";

meta ifsParam ifs_param(paramId,type);
