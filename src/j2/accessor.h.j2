/*
 * (C) Copyright 2005- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
 * virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
 */

#pragma once

#include "{{ c.include_super }}"

{% for i in c.header_includes %}
#include {{ i }}
{% endfor %}


{% for n in c.namespaces %}namespace {{ n }} {
{% endfor %}

class {{ c.name }} : public {{ c.super }} {

public:

    {{ c.name }}({{c.constructor.args_declaration}});
    virtual ~{{ c.name }}();

private:
    // No copy allowed
    {{ c.name }}(const {{ c.name }}&);
    {{ c.name }}& operator=(const {{ c.name }}&);

protected:

    // Inherited methods
    // Protected for now

    {% for m in c.inherited_methods %}
    virtual {{ m.result }} {{ m.name }}({{ m.args_declaration }}) {{ m.const }} override;{% endfor %}
    virtual void print(std::ostream& s) const override;

protected:
    // Private methods
    {% for m in c.private_methods %}
    {{ m.template }}
    {{ m.result }} {{ m.name }}({{ m.args_declaration }}) const;{% endfor %}


protected:
    // Members
    {% for m in c.members %}{{ m.mutable }} {{ m.type }} {{ m.name }};
    {% endfor %}

};

{% for n in c.namespaces_reversed %}} // namespace {{ n }}
{% endfor %}
