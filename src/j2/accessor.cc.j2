/*
 * (C) Copyright 2005- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
 * virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
 */

 #include "{{ c.include_header }}"

{% for i in c.body_includes %}
#include {{ i }}
{% endfor %}

{% for n in c.namespaces %}namespace {{ n }} {
{% endfor %}


{% for line in c.top_level_code['-start-'] %}{{ line }}
{% endfor %}

{% for m in c.static_functions %}
{% for line in c.top_level_code[m.name] %}{{ line }}
{% endfor %}
static {{ m.result }} {{ m.name }}({{ m.args_declaration }}) {
        {{ m.body }}
 }
 {% endfor %}

/* top level code init */

{% for line in c.top_level_code['init'] %}{{ line }}
{% endfor %}
{{ c.name }}::{{ c.name }}({{c.constructor.args_declaration}}) : {{ c.super }}({{ c.constructor.call_args }}){
       {{ c.constructor.body }}
}

/* top level code destroy */
{% for line in c.top_level_code['destroy'] %}{{ line }}
{% endfor %}
{{ c.name }}::~{{ c.name }}() {
       {{ c.destructor.body }}
}

{% for m in c.inherited_methods %}
/* top level code {{ m.name }} */
{% for line in c.top_level_code[m.name] %}{{ line }}
{% endfor %}

/* inherited methods {{ m.name }} */
{{ m.template }}
{{ m.result }} {{ c.name }}::{{ m.name }}({{ m.args_declaration }}) const {
        {{ m.body }}
 }
 {% endfor %}

{% for m in c.private_methods %}
{% for line in c.top_level_code[m.name] %}{{ line }}
{% endfor %}
{{ m.template }}
{{ m.result }} {{ c.name }}::{{ m.name }}({{ m.args_declaration }}) const {
        {{ m.body }}
 }
 {% endfor %}

void {{ c.name }}::print(std::ostream& s) const {
    s << "{{ c.name }}["
    {% for m in c.members %} << "{{ m.name }}="  << {{ m.name }} {% if not loop.last %}<< ',' {% endif %}
    {% endfor %} << "]";
}

{% for line in c.top_level_code['-end-'] %}{{ line }}
{% endfor %}

static AccessorMaker<{{ c.name }}> maker("{{ c.factory_name }}");

{% for n in c.namespaces_reversed %}} // namespace {{ n }}
{% endfor %}
