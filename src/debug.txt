
to_accessor_data                        : ===== [CONVERTING:BEGIN] grib_accessor_class_proj_string ====================
                                          
create_transforms                       : Funcsig type transform: grib_accessor* -> None
create_transforms                       : Type transform: char** -> std::string&
create_transforms                       : Type transform: char* -> std::string
create_transforms                       : Type transform: char[] -> std::string
create_transforms                       : Type transform: grib_accessor* -> None
create_transforms                       : Type transform: grib_handle* -> None
create_transforms                       : Type transform: grib_context* -> None
create_transforms                       : Type transform: grib_darray -> std::vector<double>
create_transforms                       : Type transform: grib_iarray -> std::vector<long>
create_transforms                       : Type transform: grib_sarray -> std::string
create_transforms                       : Type transform: grib_vdarray -> std::vector<std::vector<double>>
create_transforms                       : Type transform: grib_viarray -> std::vector<std::vector<long>>
create_transforms                       : Type transform: grib_vsarray -> std::vector<std::string>
Transforms                              : Adding type transform: self -> ProjStringData
Transforms                              : Adding type transform: super -> AccessorData
Transforms                              : Adding type transform: supersuper -> None

create_cpp_body                         : ============================== Global [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:init
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=init
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:init
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:get_native_type
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=get_native_type
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:get_native_type
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] // Function pointer than takes a handle and returns the proj string
skip_line                               : [C++ Comment]: // Function pointer than takes a handle and returns the proj string
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] typedef int (*proj_func)(grib_handle*, char*);
from_string                             : Ignoring invalid arg type [typedef]: typedef int (*proj_func)(grib_handle*, char*)
from_string                             : Input is not an arg declaration: typedef int (*proj_func)(grib_handle*, char*)
update_cfunction_pointers               : Adding var to local arg map: int proj_func -> GribStatus projFunc [after ]: typedef int (*proj_func)(grib_handle*, char*);
Transforms                              : Adding new local arg transform: int proj_func -> GribStatus projFunc
update_cfunction_pointers               : Transformed line: typedef GribStatus(*projFunc)(std::string&);
from_string                             : Input does not contain a struct member: typedef GribStatus(*projFunc)(std::string&);
update_cvariable_access                 : IN  [0][*projFunc][)]: typedef GribStatus(*projFunc)(std::string&);
transform_cvariable_access              : [IN] cvariable=[*projFunc] match_token=[)] post_match_string=[(std::string&);]
update_cvariable_access                 : OUT [0][No transformed_remainder]: typedef GribStatus(*projFunc)(std::string&);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] struct proj_mapping
Transforms                              : Adding type transform: proj_mapping -> ProjMapping
update_cstruct_type_declarations        : Added struct type transform: proj_mapping -> ProjMapping [after ]: struct ProjMapping
Transforms                              : Adding new local arg transform: struct proj_mapping -> struct ProjMapping
update_cstruct_type_declarations        : Adding struct to local arg map: struct proj_mapping -> struct ProjMapping [after ]: struct ProjMapping
from_string                             : Input does not contain a struct member: struct ProjMapping
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] {
from_string                             : Input does not contain a struct member: {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     const char* gridType; // key gridType
Transforms                              : Adding new local arg transform: const char* gridType -> std::string gridType
update_cvariable_declarations           : Added local arg: const char* gridType -> std::string gridType
update_cvariable_declarations           : --> updated line:     std::string gridType; // key gridType
from_string                             : Input does not contain a struct member:     std::string gridType; // key gridType
update_cvariable_access                 : IN  [0][gridType][;]:     std::string gridType; // key gridType
transform_cvariable_access              : [IN] cvariable=[gridType] match_token=[;] post_match_string=[ // key gridType]
update_cvariable_access                 : OUT [0][gridType][;]:     std::string gridType; // key gridType
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     proj_func func;       // function to compute proj string
Transforms                              : Adding new local arg transform: proj_func func -> proj_func func
update_cvariable_declarations           : Added local arg: proj_func func -> proj_func func
from_string                             : Input does not contain a struct member:     proj_func func;       // function to compute proj string
update_cvariable_access                 : IN  [0][func][;]:     proj_func func;       // function to compute proj string
transform_cvariable_access              : [IN] cvariable=[func] match_token=[;] post_match_string=[       // function to compute proj string]
update_cvariable_access                 : OUT [0][func][;]:     proj_func func;       // function to compute proj string
process_remaining_cargs                 : Substituted "proj_func " with "projFunc " [after ]:     projFunc func;       // function to compute proj string
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] };
from_string                             : Input is not an arg declaration: }
from_string                             : Input does not contain a struct member: };
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] typedef struct proj_mapping proj_mapping;
from_string                             : Ignoring invalid arg type [typedef]: typedef struct proj_mapping proj_mapping
from_string                             : Input is not an arg declaration: typedef struct proj_mapping proj_mapping
skip_line                               : [C++ Comment]: // [Removed struct typedef] typedef struct proj_mapping proj_mapping;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] // This should only be called for GRID POINT data (not spherical harmonics etc)
skip_line                               : [C++ Comment]: // This should only be called for GRID POINT data (not spherical harmonics etc)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:get_major_minor_axes
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=get_major_minor_axes
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:get_major_minor_axes
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] // Caller must have allocated enough space in the 'result' argument
skip_line                               : [C++ Comment]: // Caller must have allocated enough space in the 'result' argument
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:get_earth_shape
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=get_earth_shape
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:get_earth_shape
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_space_view
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_space_view
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_space_view
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_albers
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_albers
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_albers
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_transverse_mercator
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_transverse_mercator
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_transverse_mercator
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_equatorial_azimuthal_equidistant
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_equatorial_azimuthal_equidistant
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_equatorial_azimuthal_equidistant
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_lambert_conformal
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_lambert_conformal
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_lambert_conformal
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_lambert_azimuthal_equal_area
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_lambert_azimuthal_equal_area
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_lambert_azimuthal_equal_area
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_polar_stereographic
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_polar_stereographic
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_polar_stereographic
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] // ECC-1552: This is for regular_ll, regular_gg, reduced_ll, reduced_gg
skip_line                               : [C++ Comment]: // ECC-1552: This is for regular_ll, regular_gg, reduced_ll, reduced_gg
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //           These are not 'projected' grids!
skip_line                               : [C++ Comment]: //           These are not 'projected' grids!
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_unprojected
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_unprojected
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_unprojected
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:proj_mercator
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=proj_mercator
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:proj_mercator
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] #define NUMBER(a) (sizeof(a) / sizeof(a[0]))
from_string                             : Input does not contain a struct member: #define NUMBER(a) (sizeof(a) / sizeof(a[0]))
update_cvariable_access                 : IN  [0][a][)]: #define NUMBER(a) (sizeof(a) / sizeof(a[0]))
update_cvariable_access                 : IN  [1][a][)]:  (sizeof(a) / sizeof(a[0]))
update_cvariable_access                 : IN  [2][a[0]][)]:  / sizeof(a[0]))
transform_cvariable_access              : [IN] cvariable=[a[0]] match_token=[)] post_match_string=[)]
update_cvariable_access                 : OUT [2][No transformed_remainder]:  / sizeof(a[0]))
transform_cvariable_access              : [IN] cvariable=[a] match_token=[)] post_match_string=[ / sizeof(a[0]))]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  (sizeof(a) / sizeof(a[0]))
transform_cvariable_access              : [IN] cvariable=[a] match_token=[)] post_match_string=[ (sizeof(a) / sizeof(a[0]))]
update_cvariable_access                 : OUT [0][No transformed_remainder]: #define NUMBER(a) (sizeof(a) / sizeof(a[0]))
update_sizeof_calls                     : sizeof(x)/sizeof(*x) transform [after ]: #define NUMBER(a) (a.size())
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] static proj_mapping proj_mappings[] = {
Transforms                              : Adding new local arg transform: proj_mapping proj_mappings[] -> std::vector<ProjMapping> projMappings
update_cvariable_declarations           : Added local arg: proj_mapping proj_mappings[] -> std::vector<ProjMapping> projMappings
update_cvariable_declarations           : --> updated line: static std::vector<ProjMapping> projMappings= {
from_string                             : Input does not contain a struct member: static std::vector<ProjMapping> projMappings= {
update_cvariable_access                 : IN  [0][projMappings][=]: static std::vector<ProjMapping> projMappings= {
transform_cvariable_access              : [IN] cvariable=[projMappings] match_token=[=] post_match_string=[ {]
update_cvariable_access                 : OUT [0][No transformed_remainder]: static std::vector<ProjMapping> projMappings= {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "regular_ll", &proj_unprojected },
update_cfunction_names                  : [Global Converter] Updating static function &proj_unprojected [after ]:     { "regular_ll", &projUnprojected },
from_string                             : Input does not contain a struct member:     { "regular_ll", &projUnprojected },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "regular_gg", &proj_unprojected },
update_cfunction_names                  : [Global Converter] Updating static function &proj_unprojected [after ]:     { "regular_gg", &projUnprojected },
from_string                             : Input does not contain a struct member:     { "regular_gg", &projUnprojected },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "reduced_ll", &proj_unprojected },
update_cfunction_names                  : [Global Converter] Updating static function &proj_unprojected [after ]:     { "reduced_ll", &projUnprojected },
from_string                             : Input does not contain a struct member:     { "reduced_ll", &projUnprojected },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "reduced_gg", &proj_unprojected },
update_cfunction_names                  : [Global Converter] Updating static function &proj_unprojected [after ]:     { "reduced_gg", &projUnprojected },
from_string                             : Input does not contain a struct member:     { "reduced_gg", &projUnprojected },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "mercator", &proj_mercator },
update_cfunction_names                  : [Global Converter] Updating static function &proj_mercator [after ]:     { "mercator", &projMercator },
from_string                             : Input does not contain a struct member:     { "mercator", &projMercator },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "lambert", &proj_lambert_conformal },
update_cfunction_names                  : [Global Converter] Updating static function &proj_lambert_conformal [after ]:     { "lambert", &projLambertConformal },
from_string                             : Input does not contain a struct member:     { "lambert", &projLambertConformal },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "polar_stereographic", &proj_polar_stereographic },
update_cfunction_names                  : [Global Converter] Updating static function &proj_polar_stereographic [after ]:     { "polar_stereographic", &projPolarStereographic },
from_string                             : Input does not contain a struct member:     { "polar_stereographic", &projPolarStereographic },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "lambert_azimuthal_equal_area", &proj_lambert_azimuthal_equal_area },
update_cfunction_names                  : [Global Converter] Updating static function &proj_lambert_azimuthal_equal_area [after ]:     { "lambert_azimuthal_equal_area", &projLambertAzimuthalEqualArea },
from_string                             : Input does not contain a struct member:     { "lambert_azimuthal_equal_area", &projLambertAzimuthalEqualArea },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "space_view", &proj_space_view },
update_cfunction_names                  : [Global Converter] Updating static function &proj_space_view [after ]:     { "space_view", &projSpaceView },
from_string                             : Input does not contain a struct member:     { "space_view", &projSpaceView },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "albers", &proj_albers },
update_cfunction_names                  : [Global Converter] Updating static function &proj_albers [after ]:     { "albers", &projAlbers },
from_string                             : Input does not contain a struct member:     { "albers", &projAlbers },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "transverse_mercator", &proj_transverse_mercator },
update_cfunction_names                  : [Global Converter] Updating static function &proj_transverse_mercator [after ]:     { "transverse_mercator", &projTransverseMercator },
from_string                             : Input does not contain a struct member:     { "transverse_mercator", &projTransverseMercator },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]     { "equatorial_azimuthal_equidistant", &proj_equatorial_azimuthal_equidistant },
update_cfunction_names                  : [Global Converter] Updating static function &proj_equatorial_azimuthal_equidistant [after ]:     { "equatorial_azimuthal_equidistant", &projEquatorialAzimuthalEquidistant },
from_string                             : Input does not contain a struct member:     { "equatorial_azimuthal_equidistant", &projEquatorialAzimuthalEquidistant },
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] };
from_string                             : Input is not an arg declaration: }
from_string                             : Input does not contain a struct member: };
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] #define ENDPOINT_SOURCE 0
from_string                             : Input does not contain a struct member: #define ENDPOINT_SOURCE 0
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] #define ENDPOINT_TARGET 1
from_string                             : Input does not contain a struct member: #define ENDPOINT_TARGET 1
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] @FORWARD_DECLARATION:unpack_string
custom_cfunction_updates                : Ignoring (for now) @FORWARD_DECLARATION: name=unpack_string
from_string                             : Input does not contain a struct member: @FORWARD_DECLARATION:unpack_string

create_cpp_body                         : ============================== Global [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_accessor* a -> None
Transforms                              : Adding new local arg transform: const long len -> None
Transforms                              : Adding new local arg transform: grib_arguments* arg -> AccessorInitData const& initData

create_cpp_body                         : ============================== init [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] grib_accessor_proj_string* self = (grib_accessor_proj_string*)a;
Transforms                              : Adding new local arg transform: grib_accessor_proj_string* self -> None
update_cvariable_declarations           : Added local arg: grib_accessor_proj_string* self -> None
update_cvariable_declarations           : --> deleted line: grib_accessor_proj_string* self = (grib_accessor_proj_string*)a;
skip_line                               : [Empty]: 
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] grib_handle* h                  = grib_handle_of_accessor(a);
Transforms                              : Adding new local arg transform: grib_handle* h -> None
update_cvariable_declarations           : Added local arg: grib_handle* h -> None
update_cvariable_declarations           : --> deleted line: grib_handle* h                  = grib_handle_of_accessor(a);
skip_line                               : [Empty]: 
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] self->grid_type = grib_arguments_get_name(h, arg, 0);
from_string                             : Input is not an arg declaration: self->grid_type 
update_cstruct_access                   : IN  : self->grid_type = AccessorName(std::get<std::string>(initData.args[0].second));
from_string                             : Input does not contain a struct member:  = AccessorName(std::get<std::string>(initData.args[0].second));
update_cstruct_access                   : OUT : gridType_ =  AccessorName(std::get<std::string>(initData.args[0].second));
update_cvariable_access                 : IN  [0][gridType_][=]: gridType_ =  AccessorName(std::get<std::string>(initData.args[0].second));
update_cvariable_access                 : IN  [1][initData.args][[]:   AccessorName(std::get<std::string>(initData.args[0].second));
update_cvariable_access                 : IN  [2][second][)]: 0].second));
transform_cvariable_access              : [IN] cvariable=[second] match_token=[)] post_match_string=[);]
update_cvariable_access                 : OUT [2][No transformed_remainder]: 0].second));
transform_cvariable_access              : [IN] cvariable=[initData.args] match_token=[[] post_match_string=[0].second));]
update_cvariable_access                 : OUT [1][No transformed_remainder]:   AccessorName(std::get<std::string>(initData.args[0].second));
transform_cvariable_access              : [IN] cvariable=[gridType_] match_token=[=] post_match_string=[  AccessorName(std::get<std::string>(initData.args[0].second));]
update_cvariable_access                 : OUT [0][No transformed_remainder]: gridType_ =  AccessorName(std::get<std::string>(initData.args[0].second));
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] self->endpoint  = grib_arguments_get_long(h, arg, 1);
from_string                             : Input is not an arg declaration: self->endpoint  
update_cstruct_access                   : IN  : self->endpoint  = std::get<long>(initData.args[1].second);
from_string                             : Input does not contain a struct member:   = std::get<long>(initData.args[1].second);
update_cstruct_access                   : OUT : endpoint_ =  std::get<long>(initData.args[1].second);
update_cvariable_access                 : IN  [0][endpoint_][=]: endpoint_ =  std::get<long>(initData.args[1].second);
update_cvariable_access                 : IN  [1][initData.args][[]:   std::get<long>(initData.args[1].second);
update_cvariable_access                 : IN  [2][second][)]: 1].second);
transform_cvariable_access              : [IN] cvariable=[second] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [2][No transformed_remainder]: 1].second);
transform_cvariable_access              : [IN] cvariable=[initData.args] match_token=[[] post_match_string=[1].second);]
update_cvariable_access                 : OUT [1][No transformed_remainder]:   std::get<long>(initData.args[1].second);
transform_cvariable_access              : [IN] cvariable=[endpoint_] match_token=[=] post_match_string=[  std::get<long>(initData.args[1].second);]
update_cvariable_access                 : OUT [0][No transformed_remainder]: endpoint_ =  std::get<long>(initData.args[1].second);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] a->length       = 0;
from_string                             : Input is not an arg declaration: a->length       
update_cstruct_access                   : IN  : a->length       = 0;
from_string                             : Input does not contain a struct member:        = 0;
update_cstruct_access                   : OUT : length_ =  0;
update_cvariable_access                 : IN  [0][length_][=]: length_ =  0;
transform_cvariable_access              : [IN] cvariable=[length_] match_token=[=] post_match_string=[  0;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: length_ =  0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] a->flags |= GRIB_ACCESSOR_FLAG_READ_ONLY;
from_string                             : Input is not an arg declaration: a->flags |
update_cstruct_access                   : IN  : a->flags |= GRIB_ACCESSOR_FLAG_READ_ONLY;
from_string                             : Input does not contain a struct member:  |= GRIB_ACCESSOR_FLAG_READ_ONLY;
update_cstruct_access                   : OUT : flags_ =  GRIB_ACCESSOR_FLAG_READ_ONLY;
update_cvariable_access                 : IN  [0][flags_][=]: flags_ =  GRIB_ACCESSOR_FLAG_READ_ONLY;
update_cvariable_access                 : IN  [1][GRIB_ACCESSOR_FLAG_READ_ONLY][;]:   GRIB_ACCESSOR_FLAG_READ_ONLY;
transform_cvariable_access              : [IN] cvariable=[GRIB_ACCESSOR_FLAG_READ_ONLY] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [1][No transformed_remainder]:   GRIB_ACCESSOR_FLAG_READ_ONLY;
transform_cvariable_access              : [IN] cvariable=[flags_] match_token=[=] post_match_string=[  GRIB_ACCESSOR_FLAG_READ_ONLY;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: flags_ =  GRIB_ACCESSOR_FLAG_READ_ONLY;
convert_grib_values                     : [0] Replaced GRIB_ACCESSOR_FLAG_READ_ONLY with toInt(GribAccessorFlag::READ_ONLY): flags_ =  toInt(GribAccessorFlag::READ_ONLY);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] a->flags |= GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
from_string                             : Input is not an arg declaration: a->flags |
update_cstruct_access                   : IN  : a->flags |= GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
from_string                             : Input does not contain a struct member:  |= GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
update_cstruct_access                   : OUT : flags_ =  GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
update_cvariable_access                 : IN  [0][flags_][=]: flags_ =  GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
update_cvariable_access                 : IN  [1][GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC][;]:   GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
transform_cvariable_access              : [IN] cvariable=[GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [1][No transformed_remainder]:   GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
transform_cvariable_access              : [IN] cvariable=[flags_] match_token=[=] post_match_string=[  GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: flags_ =  GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC;
convert_grib_values                     : [0] Replaced GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC with toInt(GribAccessorFlag::EDITION_SPECIFIC): flags_ =  toInt(GribAccessorFlag::EDITION_SPECIFIC);

create_cpp_body                         : ============================== init [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_context* c -> None
Transforms                              : Adding new local arg transform: grib_accessor* a -> None

create_cpp_body                         : ============================== destroy [IN]  ==============================
                                          

create_cpp_body                         : ============================== destroy [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_accessor* a -> None

create_cpp_body                         : ============================== get_native_type [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return GRIB_TYPE_STRING;
from_string                             : Ignoring invalid arg type [return]: return GRIB_TYPE_STRING
from_string                             : Input is not an arg declaration: return GRIB_TYPE_STRING
from_string                             : Input does not contain a struct member: return GRIB_TYPE_STRING;
update_cvariable_access                 : IN  [0][GRIB_TYPE_STRING][;]: return GRIB_TYPE_STRING;
transform_cvariable_access              : [IN] cvariable=[GRIB_TYPE_STRING] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [0][No transformed_remainder]: return GRIB_TYPE_STRING;
convert_grib_values                     : [0] Replaced GRIB_TYPE_STRING with GribType::STRING: return GribType::STRING;

create_cpp_body                         : ============================== get_native_type [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_accessor* a -> None
Transforms                              : Adding new local arg transform: char* v -> std::string& value
Transforms                              : Adding new local arg transform: size_t* len -> None

create_cpp_body                         : ============================== unpack_string [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] grib_accessor_proj_string* self = (grib_accessor_proj_string*)a;
Transforms                              : Adding new local arg transform: grib_accessor_proj_string* self -> None
update_cvariable_declarations           : Added local arg: grib_accessor_proj_string* self -> None
update_cvariable_declarations           : --> deleted line: grib_accessor_proj_string* self = (grib_accessor_proj_string*)a;
skip_line                               : [Empty]: 
update_cpp_body                         : --------------------------------------------------------------------------------
update_cpp_body                         : comma-separated vars [before]: int err = 0, found = 0;
update_cpp_body                         : comma-separated vars [after ]: int err = 0;
update_cpp_body                         : comma-separated vars [after ]: int  found = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int  found = 0;
Transforms                              : Adding new local arg transform: int found -> int found
update_cvariable_declarations           : Added local arg: int found -> int found
from_string                             : Input does not contain a struct member: int  found = 0;
update_cvariable_access                 : IN  [0][found][=]: int  found = 0;
transform_cvariable_access              : [IN] cvariable=[found] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][found][=]: int  found = 0;
process_remaining_cargs                 : Substituted "found " with "found " [after ]: int  found = 0;
process_global_cargs                    : Substituted "found " with "found" " [after ]: int  found = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] size_t i           = 0;
Transforms                              : Adding new local arg transform: size_t i -> size_t i
update_cvariable_declarations           : Added local arg: size_t i -> size_t i
from_string                             : Input does not contain a struct member: size_t i           = 0;
update_cvariable_access                 : IN  [0][i][=]: size_t i           = 0;
transform_cvariable_access              : [IN] cvariable=[i] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][i][=]: size_t i = 0;
process_remaining_cargs                 : Substituted "i " with "i " [after ]: size_t i = 0;
process_global_cargs                    : Substituted "i " with "i" " [after ]: size_t i = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] char grid_type[64] = {0,};
Transforms                              : Adding new local arg transform: char grid_type[64] -> std::string gridType
update_cvariable_declarations           : Added local arg: char grid_type[64] -> std::string gridType
update_cvariable_declarations           : --> updated line: std::string gridType= {0,};
from_string                             : Input does not contain a struct member: std::string gridType= {0,};
update_cvariable_access                 : IN  [0][gridType][=]: std::string gridType= {0,};
transform_cvariable_access              : [IN] cvariable=[gridType] match_token=[=] post_match_string=[ {0,};]
update_cvariable_access                 : OUT [0][gridType][=]: std::string gridType = {0,};
process_remaining_cargs                 : Substituted "gridType " with "gridType " [after ]: std::string gridType = {0,};
process_global_cargs                    : Substituted "gridType " with "gridType" " [after ]: std::string gridType = {0,};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] grib_handle* h = grib_handle_of_accessor(a);
Transforms                              : Adding new local arg transform: grib_handle* h -> None
update_cvariable_declarations           : Added local arg: grib_handle* h -> None
update_cvariable_declarations           : --> deleted line: grib_handle* h = grib_handle_of_accessor(a);
skip_line                               : [Empty]: 
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] size_t size    = sizeof(grid_type) / sizeof(*grid_type);
Transforms                              : Adding new local arg transform: size_t size -> size_t size
update_cvariable_declarations           : Added local arg: size_t size -> size_t size
from_string                             : Input does not contain a struct member: size_t size    = sizeof(grid_type) / sizeof(*grid_type);
update_cvariable_access                 : IN  [0][size][=]: size_t size    = sizeof(grid_type) / sizeof(*grid_type);
update_cvariable_access                 : IN  [1][grid_type][)]:  sizeof(grid_type) / sizeof(*grid_type);
update_cvariable_access                 : IN  [2][*grid_type][)]:  / sizeof(*grid_type);
transform_cvariable_access              : [IN] cvariable=[*grid_type] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [2][*grid_type][)]:  / sizeof(gridType);
transform_cvariable_access              : [IN] cvariable=[grid_type] match_token=[)] post_match_string=[ / sizeof(gridType);]
update_cvariable_access                 : OUT [1][grid_type][)]:  sizeof(gridType) / sizeof(gridType);
transform_cvariable_access              : [IN] cvariable=[size] match_token=[=] post_match_string=[ sizeof(gridType) / sizeof(gridType);]
update_cvariable_access                 : OUT [0][size][=]: size_t size = sizeof(gridType) / sizeof(gridType);
update_sizeof_calls                     : sizeof(x)/sizeof(*x) transform [after ]: size_t size = gridType.size();
process_remaining_cargs                 : Substituted "size " with "size " [after ]: size_t size = gridType.size();
process_global_cargs                    : Substituted "size " with "size" " [after ]: size_t size = gridType.size();
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] Assert(self->endpoint == ENDPOINT_SOURCE || self->endpoint == ENDPOINT_TARGET);
from_string                             : Input is not an arg declaration: Assert(self->endpoint 
update_cstruct_access                   : IN  : Assert(self->endpoint == ENDPOINT_SOURCE || self->endpoint == ENDPOINT_TARGET);
from_string                             : Input does not contain a struct member:  == ENDPOINT_TARGET);
update_cstruct_access                   : OUT : Assert(endpoint_ == ENDPOINT_SOURCE || endpoint_ == ENDPOINT_TARGET);
update_cvariable_access                 : IN  [0][endpoint_][==]: Assert(endpoint_ == ENDPOINT_SOURCE || endpoint_ == ENDPOINT_TARGET);
update_cvariable_access                 : IN  [1][ENDPOINT_SOURCE][||]:  ENDPOINT_SOURCE || endpoint_ == ENDPOINT_TARGET);
update_cvariable_access                 : IN  [2][endpoint_][==]:  endpoint_ == ENDPOINT_TARGET);
update_cvariable_access                 : IN  [3][ENDPOINT_TARGET][)]:  ENDPOINT_TARGET);
transform_cvariable_access              : [IN] cvariable=[ENDPOINT_TARGET] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [3][No transformed_remainder]:  ENDPOINT_TARGET);
transform_cvariable_access              : [IN] cvariable=[endpoint_] match_token=[==] post_match_string=[ ENDPOINT_TARGET);]
update_cvariable_access                 : OUT [2][No transformed_remainder]:  endpoint_ == ENDPOINT_TARGET);
transform_cvariable_access              : [IN] cvariable=[ENDPOINT_SOURCE] match_token=[||] post_match_string=[ endpoint_ == ENDPOINT_TARGET);]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  ENDPOINT_SOURCE || endpoint_ == ENDPOINT_TARGET);
transform_cvariable_access              : [IN] cvariable=[endpoint_] match_token=[==] post_match_string=[ ENDPOINT_SOURCE || endpoint_ == ENDPOINT_TARGET);]
update_cvariable_access                 : OUT [0][No transformed_remainder]: Assert(endpoint_ == ENDPOINT_SOURCE || endpoint_ == ENDPOINT_TARGET);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] err = grib_get_string(h, self->grid_type, grid_type, &size);
from_string                             : Input is not an arg declaration: err 
update_cstruct_access                   : IN  : err = grib_get_string(h, self->grid_type, grid_type, &size);
from_string                             : Input does not contain a struct member: , grid_type, &size);
update_cstruct_access                   : OUT : err = grib_get_string(h, gridType_, grid_type, &size);
update_cvariable_access                 : IN  [0][err][=]: err = grib_get_string(h, gridType_, grid_type, &size);
update_cvariable_access                 : IN  [1][h][,]:  grib_get_string(h, gridType_, grid_type, &size);
update_cvariable_access                 : IN  [2][gridType_][,]:  gridType_, grid_type, &size);
update_cvariable_access                 : IN  [3][grid_type][,]:  grid_type, &size);
update_cvariable_access                 : IN  [4][&size][)]:  &size);
transform_cvariable_access              : [IN] cvariable=[&size] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [4][&size][)]:  size);
transform_cvariable_access              : [IN] cvariable=[grid_type] match_token=[,] post_match_string=[ size);]
update_cvariable_access                 : OUT [3][grid_type][,]:  gridType, size);
transform_cvariable_access              : [IN] cvariable=[gridType_] match_token=[,] post_match_string=[ gridType, size);]
update_cvariable_access                 : OUT [2][No transformed_remainder]:  gridType_, gridType, size);
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ gridType_, gridType, size);]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_string( gridType_, gridType, size);
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_string( gridType_, gridType, size);]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_string( gridType_, gridType, size);
update_cvariable_access                 : OUT [0][err][=]: err = grib_get_string( gridType_, gridType, size);
process_remaining_cargs                 : Substituted "gridType," with "gridType," [after ]: err = grib_get_string( gridType_, gridType, size);
process_remaining_cargs                 : Substituted "err " with "err " [after ]: err = grib_get_string( gridType_, gridType, size);
process_global_cargs                    : Substituted "gridType," with "gridType"," [after ]: err = grib_get_string( gridType_, gridType, size);
process_global_cargs                    : Substituted "err " with "err" " [after ]: err = grib_get_string( gridType_, gridType, size);
apply_get_set_substitutions             : Result of substitution: err = unpackStringHelper(gridType_, gridType);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if (err) return err;
from_string                             : Input is not an arg declaration: if (err) return err
from_string                             : Input does not contain a struct member: if (err) return err;
update_cvariable_access                 : IN  [0][err][)]: if (err) return err;
update_cvariable_access                 : IN  [1][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [1][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[)] post_match_string=[ return err;]
transform_return_cvariable_access       : transformed boolean return value test: err != GribStatus::SUCCESS) return err;
update_cvariable_access                 : OUT [0][err][)]: if (err != GribStatus::SUCCESS) return err;
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if (err != GribStatus::SUCCESS) return err;
process_global_cargs                    : Substituted "err " with "err" " [after ]: if (err != GribStatus::SUCCESS) return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] for (i = 0; !found && i < NUMBER(proj_mappings); ++i) {
from_string                             : Input is not an arg declaration: for (i 
from_string                             : Input does not contain a struct member: for (i = 0; !found && i < NUMBER(proj_mappings); ++i) {
update_cvariable_access                 : IN  [0][i][=]: for (i = 0; !found && i < NUMBER(proj_mappings); ++i) {
update_cvariable_access                 : IN  [1][found][&&]:  0; !found && i < NUMBER(proj_mappings); ++i) {
update_cvariable_access                 : IN  [2][i][<]:  i < NUMBER(proj_mappings); ++i) {
update_cvariable_access                 : IN  [3][proj_mappings][)]:  NUMBER(proj_mappings); ++i) {
update_cvariable_access                 : IN  [4][i][)]: ; ++i) {
transform_cvariable_access              : [IN] cvariable=[i] match_token=[)] post_match_string=[ {]
update_cvariable_access                 : OUT [4][i][)]: ; ++i) {
transform_cvariable_access              : [IN] cvariable=[proj_mappings] match_token=[)] post_match_string=[; ++i) {]
update_cvariable_access                 : OUT [3][proj_mappings][)]:  NUMBER(projMappings); ++i) {
transform_cvariable_access              : [IN] cvariable=[i] match_token=[<] post_match_string=[ NUMBER(projMappings); ++i) {]
update_cvariable_access                 : OUT [2][i][<]:  i < NUMBER(projMappings); ++i) {
transform_cvariable_access              : [IN] cvariable=[found] match_token=[&&] post_match_string=[ i < NUMBER(projMappings); ++i) {]
update_cvariable_access                 : OUT [1][found][&&]:  0; !found && i < NUMBER(projMappings); ++i) {
transform_cvariable_access              : [IN] cvariable=[i] match_token=[=] post_match_string=[ 0; !found && i < NUMBER(projMappings); ++i) {]
update_cvariable_access                 : OUT [0][i][=]: for (i = 0; !found && i < NUMBER(projMappings); ++i) {
process_remaining_cargs                 : Substituted "found " with "found " [after ]: for (i = 0; !found && i < NUMBER(projMappings); ++i) {
process_remaining_cargs                 : Substituted "i " with "i " [after ]: for (i = 0; !found && i < NUMBER(projMappings); ++i) {
process_global_cargs                    : Substituted "found " with "found" " [after ]: for (i = 0; !found && i < NUMBER(projMappings); ++i) {
process_global_cargs                    : Substituted "i " with "i" " [after ]: for (i = 0; !found && i < NUMBER(projMappings); ++i) {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] proj_mapping pm = proj_mappings[i];
Transforms                              : Adding new local arg transform: proj_mapping pm -> ProjMapping pm
update_cvariable_declarations           : Added local arg: proj_mapping pm -> ProjMapping pm
update_cvariable_declarations           : --> updated line: ProjMapping pm= proj_mappings[i];
from_string                             : Input does not contain a struct member: ProjMapping pm= proj_mappings[i];
update_cvariable_access                 : IN  [0][pm][=]: ProjMapping pm= proj_mappings[i];
update_cvariable_access                 : IN  [1][proj_mappings][[]:  proj_mappings[i];
update_cvariable_access                 : IN  [2][i][]]: i];
transform_cvariable_access              : [IN] cvariable=[i] match_token=[]] post_match_string=[;]
update_cvariable_access                 : OUT [2][i][]]: i];
transform_cvariable_access              : [IN] cvariable=[proj_mappings] match_token=[[] post_match_string=[i];]
update_cvariable_access                 : OUT [1][proj_mappings][[]:  projMappings[i];
transform_cvariable_access              : [IN] cvariable=[pm] match_token=[=] post_match_string=[ projMappings[i];]
update_cvariable_access                 : OUT [0][pm][=]: ProjMapping pm = projMappings[i];
process_remaining_cargs                 : Substituted "pm " with "pm " [after ]: ProjMapping pm = projMappings[i];
process_global_cargs                    : Substituted "pm " with "pm" " [after ]: ProjMapping pm = projMappings[i];
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if (strcmp(grid_type, pm.gridType) == 0) {
apply_all_substitutions                 : Updated line: if (grid_type == pm.gridType) {
from_string                             : Input is not an arg declaration: if (grid_type 
from_string                             : Input does not contain a struct member: if (grid_type == pm.gridType) {
update_cvariable_access                 : IN  [0][grid_type][==]: if (grid_type == pm.gridType) {
update_cvariable_access                 : IN  [1][pm.gridType][)]:  pm.gridType) {
transform_cvariable_access              : [IN] cvariable=[pm.gridType] match_token=[)] post_match_string=[ {]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  pm.gridType) {
transform_cvariable_access              : [IN] cvariable=[grid_type] match_token=[==] post_match_string=[ pm.gridType) {]
update_cvariable_access                 : OUT [0][grid_type][==]: if (gridType == pm.gridType) {
process_remaining_cargs                 : Substituted "gridType " with "gridType " [after ]: if (gridType == pm.gridType) {
process_global_cargs                    : Substituted "gridType " with "gridType" " [after ]: if (gridType == pm.gridType) {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] found = 1;
from_string                             : Input is not an arg declaration: found 
from_string                             : Input does not contain a struct member: found = 1;
update_cvariable_access                 : IN  [0][found][=]: found = 1;
transform_cvariable_access              : [IN] cvariable=[found] match_token=[=] post_match_string=[ 1;]
update_cvariable_access                 : OUT [0][found][=]: found = 1;
process_remaining_cargs                 : Substituted "found " with "found " [after ]: found = 1;
process_global_cargs                    : Substituted "found " with "found" " [after ]: found = 1;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if (self->endpoint == ENDPOINT_SOURCE) {
from_string                             : Input is not an arg declaration: if (self->endpoint 
update_cstruct_access                   : IN  : if (self->endpoint == ENDPOINT_SOURCE) {
from_string                             : Input does not contain a struct member:  == ENDPOINT_SOURCE) {
update_cstruct_access                   : OUT : if (endpoint_ == ENDPOINT_SOURCE) {
update_cvariable_access                 : IN  [0][endpoint_][==]: if (endpoint_ == ENDPOINT_SOURCE) {
update_cvariable_access                 : IN  [1][ENDPOINT_SOURCE][)]:  ENDPOINT_SOURCE) {
transform_cvariable_access              : [IN] cvariable=[ENDPOINT_SOURCE] match_token=[)] post_match_string=[ {]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  ENDPOINT_SOURCE) {
transform_cvariable_access              : [IN] cvariable=[endpoint_] match_token=[==] post_match_string=[ ENDPOINT_SOURCE) {]
update_cvariable_access                 : OUT [0][No transformed_remainder]: if (endpoint_ == ENDPOINT_SOURCE) {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(v, 64, "EPSG:4326");
apply_all_substitutions                 : Updated line: v = fmtString("EPSG:4326");
from_string                             : Input is not an arg declaration: v 
from_string                             : Input does not contain a struct member: v = fmtString("EPSG:4326");
update_cvariable_access                 : IN  [0][v][=]: v = fmtString("EPSG:4326");
transform_cvariable_access              : [IN] cvariable=[v] match_token=[=] post_match_string=[ fmtString("EPSG:4326");]
update_cvariable_access                 : OUT [0][v][=]: value = fmtString("EPSG:4326");
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] }
from_string                             : Input does not contain a struct member: }
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] else {
from_string                             : Input does not contain a struct member: else {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] // Invoke the appropriate function to get the target proj string
skip_line                               : [C++ Comment]: // Invoke the appropriate function to get the target proj string
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = pm.func(h, v)) != GRIB_SUCCESS) return err;
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = pm.func(h, v)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [0][err][=]: if ((err = pm.func(h, v)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [1][h][,]:  pm.func(h, v)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [2][v][)]:  v)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[ return err;]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[v] match_token=[)] post_match_string=[) != GRIB_SUCCESS) return err;]
update_cvariable_access                 : OUT [2][v][)]:  value)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ value)) != GRIB_SUCCESS) return err;]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  pm.func( value)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ pm.func( value)) != GRIB_SUCCESS) return err;]
transform_return_cvariable_access       : return value via function call transformed: err = pm.func( value)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : OUT [0][err][=]: if ((err = pm.func( value)) != GRIB_SUCCESS) return err;
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = pm.func( value)) != GribStatus::SUCCESS) return err;
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = pm.func( value)) != GribStatus::SUCCESS) return err;
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = pm.func( value)) != GribStatus::SUCCESS) return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] }
from_string                             : Input does not contain a struct member: }
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] }
from_string                             : Input does not contain a struct member: }
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] }
from_string                             : Input does not contain a struct member: }
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if (!found) {
from_string                             : Input does not contain a struct member: if (!found) {
update_cvariable_access                 : IN  [0][found][)]: if (!found) {
transform_cvariable_access              : [IN] cvariable=[found] match_token=[)] post_match_string=[ {]
update_cvariable_access                 : OUT [0][found][)]: if (!found) {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] *len = 0;
from_string                             : Input is not an arg declaration: *len 
from_string                             : Input does not contain a struct member: *len = 0;
update_cvariable_access                 : IN  [0][*len][=]: *len = 0;
transform_cvariable_access              : [IN] cvariable=[*len] match_token=[=] post_match_string=[ 0;]
transform_len_cvariable_access          : Replaced *len = 0 with .clear()
update_cvariable_access                 : OUT [0][*len][=]: value.clear();
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return GRIB_NOT_FOUND;
from_string                             : Ignoring invalid arg type [return]: return GRIB_NOT_FOUND
from_string                             : Input is not an arg declaration: return GRIB_NOT_FOUND
from_string                             : Input does not contain a struct member: return GRIB_NOT_FOUND;
update_cvariable_access                 : IN  [0][GRIB_NOT_FOUND][;]: return GRIB_NOT_FOUND;
transform_cvariable_access              : [IN] cvariable=[GRIB_NOT_FOUND] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [0][No transformed_remainder]: return GRIB_NOT_FOUND;
convert_grib_values                     : [0] Replaced GRIB_NOT_FOUND with GribStatus::NOT_FOUND: return GribStatus::NOT_FOUND;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] }
from_string                             : Input does not contain a struct member: }
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] size = strlen(v);
apply_all_substitutions                 : Updated line: size = v.size();
from_string                             : Input is not an arg declaration: size 
from_string                             : Input does not contain a struct member: size = v.size();
update_cvariable_access                 : IN  [0][size][=]: size = v.size();
transform_cvariable_access              : [IN] cvariable=[size] match_token=[=] post_match_string=[ v.size();]
update_cvariable_access                 : OUT [0][size][=]: size = v.size();
process_remaining_cargs                 : Substituted "v" with "value" [after ]: size = value.size();
process_remaining_cargs                 : Substituted "size " with "size " [after ]: size = value.size();
process_global_cargs                    : Substituted "size " with "size" " [after ]: size = value.size();
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] Assert(size > 0);
from_string                             : Input is not an arg declaration: Assert(size > 0)
from_string                             : Input does not contain a struct member: Assert(size > 0);
update_cvariable_access                 : IN  [0][size][>]: Assert(size > 0);
transform_cvariable_access              : [IN] cvariable=[size] match_token=[>] post_match_string=[ 0);]
update_cvariable_access                 : OUT [0][size][>]: Assert(size > 0);
process_remaining_cargs                 : Substituted "size " with "size " [after ]: Assert(size > 0);
process_global_cargs                    : Substituted "size " with "size" " [after ]: Assert(size > 0);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] *len = size + 1;
from_string                             : Input is not an arg declaration: *len 
from_string                             : Input does not contain a struct member: *len = size + 1;
update_cvariable_access                 : IN  [0][*len][=]: *len = size + 1;
update_cvariable_access                 : IN  [1][size][+]:  size + 1;
transform_cvariable_access              : [IN] cvariable=[size] match_token=[+] post_match_string=[ 1;]
update_cvariable_access                 : OUT [1][size][+]:  size + 1;
transform_cvariable_access              : [IN] cvariable=[*len] match_token=[=] post_match_string=[ size + 1;]
transform_len_cvariable_access          : Replaced *len = size + 1 with .resize(size + 1)
update_cvariable_access                 : OUT [0][*len][=]: value.resize(size + 1);
process_remaining_cargs                 : Substituted "size " with "size " [after ]: value.resize(size + 1);
process_global_cargs                    : Substituted "size " with "size" " [after ]: value.resize(size + 1);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== unpack_string [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: double* pMajor -> double& pMajor
Transforms                              : Adding new local arg transform: double* pMinor -> double& pMinor

create_cpp_body                         : ============================== get_major_minor_axes [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if (grib_is_earth_oblate(h)) {
convert_grib_utils                      : Replaced grib_is_earth_oblate with gribIsEarthOblate [after ]: if (gribIsEarthOblate(h)) {
from_string                             : Input does not contain a struct member: if (gribIsEarthOblate(h)) {
update_cvariable_access                 : IN  [0][h][)]: if (gribIsEarthOblate(h)) {
transform_cvariable_access              : [IN] cvariable=[h] match_token=[)] post_match_string=[) {]
default_transform_cvariable_access      : Removed [h] for match [)]
update_cvariable_access                 : OUT [0][h][)]: if (gribIsEarthOblate()) {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [2][pMinor][)]:  "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[ return err;]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[pMinor] match_token=[)] post_match_string=[) != GRIB_SUCCESS) return err;]
update_cvariable_access                 : OUT [2][pMinor][)]:  "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "earthMinorAxisInMetres", pMinor)) != GRIB_SUCCESS) return err;
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "earthMinorAxisInMetres", pMinor)) != GribStatus::SUCCESS) return err;
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "earthMinorAxisInMetres", pMinor)) != GribStatus::SUCCESS) return err;
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "earthMinorAxisInMetres", pMinor)) != GribStatus::SUCCESS) return err;
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("earthMinorAxisInMetres"), pMinor)) != GribStatus::SUCCESS) return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [2][pMajor][)]:  "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[ return err;]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[pMajor] match_token=[)] post_match_string=[) != GRIB_SUCCESS) return err;]
update_cvariable_access                 : OUT [2][pMajor][)]:  "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "earthMajorAxisInMetres", pMajor)) != GRIB_SUCCESS) return err;
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "earthMajorAxisInMetres", pMajor)) != GribStatus::SUCCESS) return err;
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "earthMajorAxisInMetres", pMajor)) != GribStatus::SUCCESS) return err;
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "earthMajorAxisInMetres", pMajor)) != GribStatus::SUCCESS) return err;
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("earthMajorAxisInMetres"), pMajor)) != GribStatus::SUCCESS) return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] }
from_string                             : Input does not contain a struct member: }
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] else {
from_string                             : Input does not contain a struct member: else {
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double radius = 0;
Transforms                              : Adding new local arg transform: double radius -> double radius
update_cvariable_declarations           : Added local arg: double radius -> double radius
from_string                             : Input does not contain a struct member: double radius = 0;
update_cvariable_access                 : IN  [0][radius][=]: double radius = 0;
transform_cvariable_access              : [IN] cvariable=[radius] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][radius][=]: double radius = 0;
process_remaining_cargs                 : Substituted "radius " with "radius " [after ]: double radius = 0;
process_global_cargs                    : Substituted "radius " with "radius" " [after ]: double radius = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "radius", &radius)) != GRIB_SUCCESS) return err;
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "radius", &radius)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "radius", &radius)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "radius", &radius)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [2][&radius][)]:  "radius", &radius)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS) return err;
update_cvariable_access                 : IN  [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [4][err][;]:  return err;
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[ return err;]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[&radius] match_token=[)] post_match_string=[) != GRIB_SUCCESS) return err;]
update_cvariable_access                 : OUT [2][&radius][)]:  "radius", radius)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "radius", radius)) != GRIB_SUCCESS) return err;]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "radius", radius)) != GRIB_SUCCESS) return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "radius", radius)) != GRIB_SUCCESS) return err;]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "radius", radius)) != GRIB_SUCCESS) return err;
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "radius", radius)) != GRIB_SUCCESS) return err;
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "radius", radius)) != GribStatus::SUCCESS) return err;
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "radius", radius)) != GribStatus::SUCCESS) return err;
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "radius", radius)) != GribStatus::SUCCESS) return err;
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("radius"), radius)) != GribStatus::SUCCESS) return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] *pMajor = *pMinor = radius;
from_string                             : Input is not an arg declaration: *pMajor 
from_string                             : Input does not contain a struct member: *pMajor = *pMinor = radius;
update_cvariable_access                 : IN  [0][*pMajor][=]: *pMajor = *pMinor = radius;
update_cvariable_access                 : IN  [1][*pMinor][=]:  *pMinor = radius;
update_cvariable_access                 : IN  [2][radius][;]:  radius;
transform_cvariable_access              : [IN] cvariable=[radius] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [2][radius][;]:  radius;
transform_cvariable_access              : [IN] cvariable=[*pMinor] match_token=[=] post_match_string=[ radius;]
update_cvariable_access                 : OUT [1][*pMinor][=]:  pMinor = radius;
transform_cvariable_access              : [IN] cvariable=[*pMajor] match_token=[=] post_match_string=[ pMinor = radius;]
update_cvariable_access                 : OUT [0][*pMajor][=]: pMajor = pMinor = radius;
process_remaining_cargs                 : Substituted "pMajor " with "pMajor " [after ]: pMajor = pMinor = radius;
process_remaining_cargs                 : Substituted "pMinor " with "pMinor " [after ]: pMajor = pMinor = radius;
process_global_cargs                    : Substituted "pMajor " with "pMajor" " [after ]: pMajor = pMinor = radius;
process_global_cargs                    : Substituted "pMinor " with "pMinor" " [after ]: pMajor = pMinor = radius;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] }
from_string                             : Input does not contain a struct member: }
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== get_major_minor_axes [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== get_earth_shape [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err      = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_body                         : --------------------------------------------------------------------------------
update_cpp_body                         : comma-separated vars [before]: double major = 0, minor = 0;
update_cpp_body                         : comma-separated vars [after ]: double major = 0;
update_cpp_body                         : comma-separated vars [after ]: double  minor = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double major = 0;
Transforms                              : Adding new local arg transform: double major -> double major
update_cvariable_declarations           : Added local arg: double major -> double major
from_string                             : Input does not contain a struct member: double major = 0;
update_cvariable_access                 : IN  [0][major][=]: double major = 0;
transform_cvariable_access              : [IN] cvariable=[major] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][major][=]: double major = 0;
process_remaining_cargs                 : Substituted "major " with "major " [after ]: double major = 0;
process_global_cargs                    : Substituted "major " with "major" " [after ]: double major = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double  minor = 0;
Transforms                              : Adding new local arg transform: double minor -> double minor
update_cvariable_declarations           : Added local arg: double minor -> double minor
from_string                             : Input does not contain a struct member: double  minor = 0;
update_cvariable_access                 : IN  [0][minor][=]: double  minor = 0;
transform_cvariable_access              : [IN] cvariable=[minor] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][minor][=]: double  minor = 0;
process_remaining_cargs                 : Substituted "minor " with "minor " [after ]: double  minor = 0;
process_global_cargs                    : Substituted "minor " with "minor" " [after ]: double  minor = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = get_major_minor_axes(h, &major, &minor)) != GRIB_SUCCESS)
update_cfunction_names                  : Updating static function get_major_minor_axes [after ]: if ((err = majorMinorAxes(h, &major, &minor)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = majorMinorAxes(h, &major, &minor)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = majorMinorAxes(h, &major, &minor)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  majorMinorAxes(h, &major, &minor)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&major][,]:  &major, &minor)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][&minor][)]:  &minor)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [4][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [4][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&minor] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [3][&minor][)]:  minor)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&major] match_token=[,] post_match_string=[ minor)) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&major][,]:  major, minor)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ major, minor)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  majorMinorAxes( major, minor)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ majorMinorAxes( major, minor)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = majorMinorAxes( major, minor)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = majorMinorAxes( major, minor)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = majorMinorAxes( major, minor)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = majorMinorAxes( major, minor)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "major," with "major," [after ]: if ((err = majorMinorAxes( major, minor)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = majorMinorAxes( major, minor)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "major," with "major"," [after ]: if ((err = majorMinorAxes( major, minor)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if (major == minor)
from_string                             : Input is not an arg declaration: if (major 
from_string                             : Input does not contain a struct member: if (major == minor)
update_cvariable_access                 : IN  [0][major][==]: if (major == minor)
update_cvariable_access                 : IN  [1][minor][)]:  minor)
transform_cvariable_access              : [IN] cvariable=[minor] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [1][minor][)]:  minor)
transform_cvariable_access              : [IN] cvariable=[major] match_token=[==] post_match_string=[ minor)]
update_cvariable_access                 : OUT [0][major][==]: if (major == minor)
process_remaining_cargs                 : Substituted "major " with "major " [after ]: if (major == minor)
process_global_cargs                    : Substituted "major " with "major" " [after ]: if (major == minor)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(result, 128, "+R=%lf", major); // spherical
apply_all_substitutions                 : Updated line: result = fmtString("+R=%lf", major); // spherical
from_string                             : Input is not an arg declaration: result 
from_string                             : Input does not contain a struct member: result = fmtString("+R=%lf", major); // spherical
update_cvariable_access                 : IN  [0][result][=]: result = fmtString("+R=%lf", major); // spherical
update_cvariable_access                 : IN  [1][R][=]:  fmtString("+R=%lf", major); // spherical
update_cvariable_access                 : IN  [2][major][)]: %lf", major); // spherical
transform_cvariable_access              : [IN] cvariable=[major] match_token=[)] post_match_string=[; // spherical]
update_cvariable_access                 : OUT [2][major][)]: %lf", major); // spherical
transform_cvariable_access              : [IN] cvariable=[R] match_token=[=] post_match_string=[%lf", major); // spherical]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  fmtString("+R=%lf", major); // spherical
transform_cvariable_access              : [IN] cvariable=[result] match_token=[=] post_match_string=[ fmtString("+R=%lf", major); // spherical]
update_cvariable_access                 : OUT [0][result][=]: result = fmtString("+R=%lf", major); // spherical
process_remaining_cargs                 : Substituted "result " with "result " [after ]: result = fmtString("+R=%lf", major); // spherical
process_global_cargs                    : Substituted "result " with "result" " [after ]: result = fmtString("+R=%lf", major); // spherical
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] else
from_string                             : Input does not contain a struct member: else
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(result, 128, "+a=%lf +b=%lf", major, minor); // oblate
apply_all_substitutions                 : Updated line: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
from_string                             : Input is not an arg declaration: result 
from_string                             : Input does not contain a struct member: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
update_cvariable_access                 : IN  [0][result][=]: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
update_cvariable_access                 : IN  [1][a][=]:  fmtString("+a=%lf +b=%lf", major, minor); // oblate
update_cvariable_access                 : IN  [2][b][=]: %lf +b=%lf", major, minor); // oblate
update_cvariable_access                 : IN  [3][major][,]: %lf", major, minor); // oblate
update_cvariable_access                 : IN  [4][minor][)]:  minor); // oblate
transform_cvariable_access              : [IN] cvariable=[minor] match_token=[)] post_match_string=[; // oblate]
update_cvariable_access                 : OUT [4][minor][)]:  minor); // oblate
transform_cvariable_access              : [IN] cvariable=[major] match_token=[,] post_match_string=[ minor); // oblate]
update_cvariable_access                 : OUT [3][major][,]: %lf", major, minor); // oblate
transform_cvariable_access              : [IN] cvariable=[b] match_token=[=] post_match_string=[%lf", major, minor); // oblate]
update_cvariable_access                 : OUT [2][No transformed_remainder]: %lf +b=%lf", major, minor); // oblate
transform_cvariable_access              : [IN] cvariable=[a] match_token=[=] post_match_string=[%lf +b=%lf", major, minor); // oblate]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  fmtString("+a=%lf +b=%lf", major, minor); // oblate
transform_cvariable_access              : [IN] cvariable=[result] match_token=[=] post_match_string=[ fmtString("+a=%lf +b=%lf", major, minor); // oblate]
update_cvariable_access                 : OUT [0][result][=]: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
process_remaining_cargs                 : Substituted "result " with "result " [after ]: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
process_remaining_cargs                 : Substituted "major," with "major," [after ]: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
process_global_cargs                    : Substituted "result " with "result" " [after ]: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
process_global_cargs                    : Substituted "major," with "major"," [after ]: result = fmtString("+a=%lf +b=%lf", major, minor); // oblate
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== get_earth_shape [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_space_view [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return GRIB_NOT_IMPLEMENTED;
from_string                             : Ignoring invalid arg type [return]: return GRIB_NOT_IMPLEMENTED
from_string                             : Input is not an arg declaration: return GRIB_NOT_IMPLEMENTED
from_string                             : Input does not contain a struct member: return GRIB_NOT_IMPLEMENTED;
update_cvariable_access                 : IN  [0][GRIB_NOT_IMPLEMENTED][;]: return GRIB_NOT_IMPLEMENTED;
transform_cvariable_access              : [IN] cvariable=[GRIB_NOT_IMPLEMENTED] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [0][No transformed_remainder]: return GRIB_NOT_IMPLEMENTED;
convert_grib_values                     : [0] Replaced GRIB_NOT_IMPLEMENTED with GribStatus::NOT_IMPLEMENTED: return GribStatus::NOT_IMPLEMENTED;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     int err        = 0;
skip_line                               : [C++ Comment]: //     int err        = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     char shape[64] = {0,};
skip_line                               : [C++ Comment]: //     char shape[64] = {0,};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     double latOfSubSatellitePointInDegrees, lonOfSubSatellitePointInDegrees;
skip_line                               : [C++ Comment]: //     double latOfSubSatellitePointInDegrees, lonOfSubSatellitePointInDegrees;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS)
skip_line                               : [C++ Comment]: //     if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //         return err;
skip_line                               : [C++ Comment]: //         return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     if ((err = grib_get_double_internal(h, "longitudeOfSubSatellitePointInDegrees", &lonOfSubSatellitePointInDegrees)) != GRIB_SUCCESS)
skip_line                               : [C++ Comment]: //     if ((err = grib_get_double_internal(h, "longitudeOfSubSatellitePointInDegrees", &lonOfSubSatellitePointInDegrees)) != GRIB_SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //         return err;
skip_line                               : [C++ Comment]: //         return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     snprintf(result, 526, "+proj=geos +lon_0=%lf +h=35785831 +x_0=0 +y_0=0 %s", lonOfSubSatellitePointInDegrees, shape);
skip_line                               : [C++ Comment]: //     snprintf(result, 526, "+proj=geos +lon_0=%lf +h=35785831 +x_0=0 +y_0=0 %s", lonOfSubSatellitePointInDegrees, shape);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     return err;
skip_line                               : [C++ Comment]: //     return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     /* Experimental: For now do the same as gdalsrsinfo - hard coded values! */
skip_line                               : [C++ Comment]: //     /* Experimental: For now do the same as gdalsrsinfo - hard coded values! */
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     snprintf(result, 526, "+proj=geos +lon_0=0 +h=35785831 +x_0=0 +y_0=0 %s",  shape);
skip_line                               : [C++ Comment]: //     snprintf(result, 526, "+proj=geos +lon_0=0 +h=35785831 +x_0=0 +y_0=0 %s",  shape);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //     return err;
skip_line                               : [C++ Comment]: //     return err;

create_cpp_body                         : ============================== proj_space_view [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_albers [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return GRIB_NOT_IMPLEMENTED;
from_string                             : Ignoring invalid arg type [return]: return GRIB_NOT_IMPLEMENTED
from_string                             : Input is not an arg declaration: return GRIB_NOT_IMPLEMENTED
from_string                             : Input does not contain a struct member: return GRIB_NOT_IMPLEMENTED;
update_cvariable_access                 : IN  [0][GRIB_NOT_IMPLEMENTED][;]: return GRIB_NOT_IMPLEMENTED;
transform_cvariable_access              : [IN] cvariable=[GRIB_NOT_IMPLEMENTED] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [0][No transformed_remainder]: return GRIB_NOT_IMPLEMENTED;
convert_grib_values                     : [0] Replaced GRIB_NOT_IMPLEMENTED with GribStatus::NOT_IMPLEMENTED: return GribStatus::NOT_IMPLEMENTED;

create_cpp_body                         : ============================== proj_albers [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_transverse_mercator [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return GRIB_NOT_IMPLEMENTED;
from_string                             : Ignoring invalid arg type [return]: return GRIB_NOT_IMPLEMENTED
from_string                             : Input is not an arg declaration: return GRIB_NOT_IMPLEMENTED
from_string                             : Input does not contain a struct member: return GRIB_NOT_IMPLEMENTED;
update_cvariable_access                 : IN  [0][GRIB_NOT_IMPLEMENTED][;]: return GRIB_NOT_IMPLEMENTED;
transform_cvariable_access              : [IN] cvariable=[GRIB_NOT_IMPLEMENTED] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [0][No transformed_remainder]: return GRIB_NOT_IMPLEMENTED;
convert_grib_values                     : [0] Replaced GRIB_NOT_IMPLEMENTED with GribStatus::NOT_IMPLEMENTED: return GribStatus::NOT_IMPLEMENTED;

create_cpp_body                         : ============================== proj_transverse_mercator [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_equatorial_azimuthal_equidistant [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return GRIB_NOT_IMPLEMENTED;
from_string                             : Ignoring invalid arg type [return]: return GRIB_NOT_IMPLEMENTED
from_string                             : Input is not an arg declaration: return GRIB_NOT_IMPLEMENTED
from_string                             : Input does not contain a struct member: return GRIB_NOT_IMPLEMENTED;
update_cvariable_access                 : IN  [0][GRIB_NOT_IMPLEMENTED][;]: return GRIB_NOT_IMPLEMENTED;
transform_cvariable_access              : [IN] cvariable=[GRIB_NOT_IMPLEMENTED] match_token=[;] post_match_string=[]
update_cvariable_access                 : OUT [0][No transformed_remainder]: return GRIB_NOT_IMPLEMENTED;
convert_grib_values                     : [0] Replaced GRIB_NOT_IMPLEMENTED with GribStatus::NOT_IMPLEMENTED: return GribStatus::NOT_IMPLEMENTED;

create_cpp_body                         : ============================== proj_equatorial_azimuthal_equidistant [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_lambert_conformal [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err        = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] char shape[64] = {0,};
Transforms                              : Adding new local arg transform: char shape[64] -> std::string shape
update_cvariable_declarations           : Added local arg: char shape[64] -> std::string shape
update_cvariable_declarations           : --> updated line: std::string shape= {0,};
from_string                             : Input does not contain a struct member: std::string shape= {0,};
update_cvariable_access                 : IN  [0][shape][=]: std::string shape= {0,};
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[=] post_match_string=[ {0,};]
update_cvariable_access                 : OUT [0][shape][=]: std::string shape = {0,};
process_remaining_cargs                 : Substituted "shape " with "shape " [after ]: std::string shape = {0,};
process_global_cargs                    : Substituted "shape " with "shape" " [after ]: std::string shape = {0,};
update_cpp_body                         : --------------------------------------------------------------------------------
update_cpp_body                         : comma-separated vars [before]: double LoVInDegrees = 0, LaDInDegrees = 0, Latin1InDegrees = 0, Latin2InDegrees = 0;
update_cpp_body                         : comma-separated vars [after ]: double LoVInDegrees = 0;
update_cpp_body                         : comma-separated vars [after ]: double  LaDInDegrees = 0;
update_cpp_body                         : comma-separated vars [after ]: double  Latin1InDegrees = 0;
update_cpp_body                         : comma-separated vars [after ]: double  Latin2InDegrees = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double LoVInDegrees = 0;
Transforms                              : Adding new local arg transform: double LoVInDegrees -> double loVInDegrees
update_cvariable_declarations           : Added local arg: double LoVInDegrees -> double loVInDegrees
update_cvariable_declarations           : --> updated line: double loVInDegrees= 0;
from_string                             : Input does not contain a struct member: double loVInDegrees= 0;
update_cvariable_access                 : IN  [0][loVInDegrees][=]: double loVInDegrees= 0;
transform_cvariable_access              : [IN] cvariable=[loVInDegrees] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: double loVInDegrees= 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double  LaDInDegrees = 0;
Transforms                              : Adding new local arg transform: double LaDInDegrees -> double laDInDegrees
update_cvariable_declarations           : Added local arg: double LaDInDegrees -> double laDInDegrees
update_cvariable_declarations           : --> updated line: double laDInDegrees= 0;
from_string                             : Input does not contain a struct member: double laDInDegrees= 0;
update_cvariable_access                 : IN  [0][laDInDegrees][=]: double laDInDegrees= 0;
transform_cvariable_access              : [IN] cvariable=[laDInDegrees] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: double laDInDegrees= 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double  Latin1InDegrees = 0;
Transforms                              : Adding new local arg transform: double Latin1InDegrees -> double latin1InDegrees
update_cvariable_declarations           : Added local arg: double Latin1InDegrees -> double latin1InDegrees
update_cvariable_declarations           : --> updated line: double latin1InDegrees= 0;
from_string                             : Input does not contain a struct member: double latin1InDegrees= 0;
update_cvariable_access                 : IN  [0][latin1InDegrees][=]: double latin1InDegrees= 0;
transform_cvariable_access              : [IN] cvariable=[latin1InDegrees] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: double latin1InDegrees= 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double  Latin2InDegrees = 0;
Transforms                              : Adding new local arg transform: double Latin2InDegrees -> double latin2InDegrees
update_cvariable_declarations           : Added local arg: double Latin2InDegrees -> double latin2InDegrees
update_cvariable_declarations           : --> updated line: double latin2InDegrees= 0;
from_string                             : Input does not contain a struct member: double latin2InDegrees= 0;
update_cvariable_access                 : IN  [0][latin2InDegrees][=]: double latin2InDegrees= 0;
transform_cvariable_access              : [IN] cvariable=[latin2InDegrees] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: double latin2InDegrees= 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS)
update_cfunction_names                  : Updating static function get_earth_shape [after ]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][shape][)]:  shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][shape][)]:  shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ shape)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  earthShape( shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ earthShape( shape)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = earthShape( shape)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = earthShape( shape)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "Latin1InDegrees", &Latin1InDegrees)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "Latin1InDegrees", &Latin1InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "Latin1InDegrees", &Latin1InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "Latin1InDegrees", &Latin1InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&Latin1InDegrees][)]:  "Latin1InDegrees", &Latin1InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&Latin1InDegrees] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&Latin1InDegrees][)]:  "Latin1InDegrees", latin1InDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "Latin1InDegrees", latin1InDegrees)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "Latin1InDegrees", latin1InDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "Latin1InDegrees", latin1InDegrees)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "Latin1InDegrees", latin1InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "Latin1InDegrees", latin1InDegrees)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "Latin1InDegrees", latin1InDegrees)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "Latin1InDegrees", latin1InDegrees)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "Latin1InDegrees", latin1InDegrees)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("Latin1InDegrees"), latin1InDegrees)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "Latin2InDegrees", &Latin2InDegrees)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "Latin2InDegrees", &Latin2InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "Latin2InDegrees", &Latin2InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "Latin2InDegrees", &Latin2InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&Latin2InDegrees][)]:  "Latin2InDegrees", &Latin2InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&Latin2InDegrees] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&Latin2InDegrees][)]:  "Latin2InDegrees", latin2InDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "Latin2InDegrees", latin2InDegrees)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "Latin2InDegrees", latin2InDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "Latin2InDegrees", latin2InDegrees)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "Latin2InDegrees", latin2InDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "Latin2InDegrees", latin2InDegrees)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "Latin2InDegrees", latin2InDegrees)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "Latin2InDegrees", latin2InDegrees)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "Latin2InDegrees", latin2InDegrees)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("Latin2InDegrees"), latin2InDegrees)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "LoVInDegrees", &LoVInDegrees)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "LoVInDegrees", &LoVInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "LoVInDegrees", &LoVInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "LoVInDegrees", &LoVInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&LoVInDegrees][)]:  "LoVInDegrees", &LoVInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&LoVInDegrees] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&LoVInDegrees][)]:  "LoVInDegrees", loVInDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "LoVInDegrees", loVInDegrees)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "LoVInDegrees", loVInDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "LoVInDegrees", loVInDegrees)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "LoVInDegrees", loVInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "LoVInDegrees", loVInDegrees)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "LoVInDegrees", loVInDegrees)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "LoVInDegrees", loVInDegrees)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "LoVInDegrees", loVInDegrees)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("LoVInDegrees"), loVInDegrees)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&LaDInDegrees][)]:  "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&LaDInDegrees] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&LaDInDegrees][)]:  "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("LaDInDegrees"), laDInDegrees)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(result, 1024, "+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
apply_all_substitutions                 : Updated line: result = fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
from_string                             : Input is not an arg declaration: result 
from_string                             : Input does not contain a struct member: result = fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
update_cvariable_access                 : IN  [0][result][=]: result = fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
update_cvariable_access                 : IN  [1][proj][=]:  fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
update_cvariable_access                 : IN  [2][lcc][+]: lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
update_cvariable_access                 : IN  [3][lon_0][=]: lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
update_cvariable_access                 : IN  [4][lat_0][=]: %lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
update_cvariable_access                 : IN  [5][lat_1][=]: %lf +lat_1=%lf +lat_2=%lf %s",
update_cvariable_access                 : IN  [6][lat_2][=]: %lf +lat_2=%lf %s",
transform_cvariable_access              : [IN] cvariable=[lat_2] match_token=[=] post_match_string=[%lf %s",]
update_cvariable_access                 : OUT [6][No transformed_remainder]: %lf +lat_2=%lf %s",
transform_cvariable_access              : [IN] cvariable=[lat_1] match_token=[=] post_match_string=[%lf +lat_2=%lf %s",]
update_cvariable_access                 : OUT [5][No transformed_remainder]: %lf +lat_1=%lf +lat_2=%lf %s",
transform_cvariable_access              : [IN] cvariable=[lat_0] match_token=[=] post_match_string=[%lf +lat_1=%lf +lat_2=%lf %s",]
update_cvariable_access                 : OUT [4][No transformed_remainder]: %lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
transform_cvariable_access              : [IN] cvariable=[lon_0] match_token=[=] post_match_string=[%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",]
update_cvariable_access                 : OUT [3][No transformed_remainder]: lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
transform_cvariable_access              : [IN] cvariable=[lcc] match_token=[+] post_match_string=[lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",]
update_cvariable_access                 : OUT [2][No transformed_remainder]: lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
transform_cvariable_access              : [IN] cvariable=[proj] match_token=[=] post_match_string=[lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
transform_cvariable_access              : [IN] cvariable=[result] match_token=[=] post_match_string=[ fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",]
update_cvariable_access                 : OUT [0][result][=]: result = fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
process_remaining_cargs                 : Substituted "result " with "result " [after ]: result = fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
process_global_cargs                    : Substituted "result " with "result" " [after ]: result = fmtString("+proj=lcc +lon_0=%lf +lat_0=%lf +lat_1=%lf +lat_2=%lf %s",
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]             LoVInDegrees, LaDInDegrees, Latin1InDegrees, Latin2InDegrees, shape);
from_string                             : Input is not an arg declaration: LoVInDegrees, LaDInDegrees, Latin1InDegrees, Latin2InDegrees, shape)
from_string                             : Input does not contain a struct member:             LoVInDegrees, LaDInDegrees, Latin1InDegrees, Latin2InDegrees, shape);
update_cvariable_access                 : IN  [0][LoVInDegrees][,]:             LoVInDegrees, LaDInDegrees, Latin1InDegrees, Latin2InDegrees, shape);
update_cvariable_access                 : IN  [1][LaDInDegrees][,]:  LaDInDegrees, Latin1InDegrees, Latin2InDegrees, shape);
update_cvariable_access                 : IN  [2][Latin1InDegrees][,]:  Latin1InDegrees, Latin2InDegrees, shape);
update_cvariable_access                 : IN  [3][Latin2InDegrees][,]:  Latin2InDegrees, shape);
update_cvariable_access                 : IN  [4][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [4][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[Latin2InDegrees] match_token=[,] post_match_string=[ shape);]
update_cvariable_access                 : OUT [3][Latin2InDegrees][,]:  latin2InDegrees, shape);
transform_cvariable_access              : [IN] cvariable=[Latin1InDegrees] match_token=[,] post_match_string=[ latin2InDegrees, shape);]
update_cvariable_access                 : OUT [2][Latin1InDegrees][,]:  latin1InDegrees, latin2InDegrees, shape);
transform_cvariable_access              : [IN] cvariable=[LaDInDegrees] match_token=[,] post_match_string=[ latin1InDegrees, latin2InDegrees, shape);]
update_cvariable_access                 : OUT [1][LaDInDegrees][,]:  laDInDegrees, latin1InDegrees, latin2InDegrees, shape);
transform_cvariable_access              : [IN] cvariable=[LoVInDegrees] match_token=[,] post_match_string=[ laDInDegrees, latin1InDegrees, latin2InDegrees, shape);]
update_cvariable_access                 : OUT [0][LoVInDegrees][,]:             loVInDegrees, laDInDegrees, latin1InDegrees, latin2InDegrees, shape);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== proj_lambert_conformal [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_lambert_azimuthal_equal_area [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err        = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] char shape[64] = {0,};
Transforms                              : Adding new local arg transform: char shape[64] -> std::string shape
update_cvariable_declarations           : Added local arg: char shape[64] -> std::string shape
update_cvariable_declarations           : --> updated line: std::string shape= {0,};
from_string                             : Input does not contain a struct member: std::string shape= {0,};
update_cvariable_access                 : IN  [0][shape][=]: std::string shape= {0,};
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[=] post_match_string=[ {0,};]
update_cvariable_access                 : OUT [0][shape][=]: std::string shape = {0,};
process_remaining_cargs                 : Substituted "shape " with "shape " [after ]: std::string shape = {0,};
process_global_cargs                    : Substituted "shape " with "shape" " [after ]: std::string shape = {0,};
update_cpp_body                         : --------------------------------------------------------------------------------
update_cpp_body                         : comma-separated vars [before]: double standardParallel = 0, centralLongitude = 0;
update_cpp_body                         : comma-separated vars [after ]: double standardParallel = 0;
update_cpp_body                         : comma-separated vars [after ]: double  centralLongitude = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double standardParallel = 0;
Transforms                              : Adding new local arg transform: double standardParallel -> double standardParallel
update_cvariable_declarations           : Added local arg: double standardParallel -> double standardParallel
from_string                             : Input does not contain a struct member: double standardParallel = 0;
update_cvariable_access                 : IN  [0][standardParallel][=]: double standardParallel = 0;
transform_cvariable_access              : [IN] cvariable=[standardParallel] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][standardParallel][=]: double standardParallel = 0;
process_remaining_cargs                 : Substituted "standardParallel " with "standardParallel " [after ]: double standardParallel = 0;
process_global_cargs                    : Substituted "standardParallel " with "standardParallel" " [after ]: double standardParallel = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double  centralLongitude = 0;
Transforms                              : Adding new local arg transform: double centralLongitude -> double centralLongitude
update_cvariable_declarations           : Added local arg: double centralLongitude -> double centralLongitude
from_string                             : Input does not contain a struct member: double  centralLongitude = 0;
update_cvariable_access                 : IN  [0][centralLongitude][=]: double  centralLongitude = 0;
transform_cvariable_access              : [IN] cvariable=[centralLongitude] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][centralLongitude][=]: double  centralLongitude = 0;
process_remaining_cargs                 : Substituted "centralLongitude " with "centralLongitude " [after ]: double  centralLongitude = 0;
process_global_cargs                    : Substituted "centralLongitude " with "centralLongitude" " [after ]: double  centralLongitude = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS)
update_cfunction_names                  : Updating static function get_earth_shape [after ]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][shape][)]:  shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][shape][)]:  shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ shape)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  earthShape( shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ earthShape( shape)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = earthShape( shape)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = earthShape( shape)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "standardParallelInDegrees", &standardParallel)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "standardParallelInDegrees", &standardParallel)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "standardParallelInDegrees", &standardParallel)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "standardParallelInDegrees", &standardParallel)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&standardParallel][)]:  "standardParallelInDegrees", &standardParallel)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&standardParallel] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&standardParallel][)]:  "standardParallelInDegrees", standardParallel)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "standardParallelInDegrees", standardParallel)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "standardParallelInDegrees", standardParallel)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "standardParallelInDegrees", standardParallel)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "standardParallelInDegrees", standardParallel)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "standardParallelInDegrees", standardParallel)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "standardParallelInDegrees", standardParallel)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "standardParallelInDegrees", standardParallel)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "standardParallelInDegrees", standardParallel)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("standardParallelInDegrees"), standardParallel)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "centralLongitudeInDegrees", &centralLongitude)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "centralLongitudeInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "centralLongitudeInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "centralLongitudeInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&centralLongitude][)]:  "centralLongitudeInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&centralLongitude] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&centralLongitude][)]:  "centralLongitudeInDegrees", centralLongitude)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "centralLongitudeInDegrees", centralLongitude)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "centralLongitudeInDegrees", centralLongitude)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "centralLongitudeInDegrees", centralLongitude)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "centralLongitudeInDegrees", centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "centralLongitudeInDegrees", centralLongitude)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "centralLongitudeInDegrees", centralLongitude)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "centralLongitudeInDegrees", centralLongitude)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "centralLongitudeInDegrees", centralLongitude)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("centralLongitudeInDegrees"), centralLongitude)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(result, 1024, "+proj=laea +lon_0=%lf +lat_0=%lf %s",
apply_all_substitutions                 : Updated line: result = fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
from_string                             : Input is not an arg declaration: result 
from_string                             : Input does not contain a struct member: result = fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
update_cvariable_access                 : IN  [0][result][=]: result = fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
update_cvariable_access                 : IN  [1][proj][=]:  fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
update_cvariable_access                 : IN  [2][laea][+]: laea +lon_0=%lf +lat_0=%lf %s",
update_cvariable_access                 : IN  [3][lon_0][=]: lon_0=%lf +lat_0=%lf %s",
update_cvariable_access                 : IN  [4][lat_0][=]: %lf +lat_0=%lf %s",
transform_cvariable_access              : [IN] cvariable=[lat_0] match_token=[=] post_match_string=[%lf %s",]
update_cvariable_access                 : OUT [4][No transformed_remainder]: %lf +lat_0=%lf %s",
transform_cvariable_access              : [IN] cvariable=[lon_0] match_token=[=] post_match_string=[%lf +lat_0=%lf %s",]
update_cvariable_access                 : OUT [3][No transformed_remainder]: lon_0=%lf +lat_0=%lf %s",
transform_cvariable_access              : [IN] cvariable=[laea] match_token=[+] post_match_string=[lon_0=%lf +lat_0=%lf %s",]
update_cvariable_access                 : OUT [2][No transformed_remainder]: laea +lon_0=%lf +lat_0=%lf %s",
transform_cvariable_access              : [IN] cvariable=[proj] match_token=[=] post_match_string=[laea +lon_0=%lf +lat_0=%lf %s",]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
transform_cvariable_access              : [IN] cvariable=[result] match_token=[=] post_match_string=[ fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",]
update_cvariable_access                 : OUT [0][result][=]: result = fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
process_remaining_cargs                 : Substituted "result " with "result " [after ]: result = fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
process_global_cargs                    : Substituted "result " with "result" " [after ]: result = fmtString("+proj=laea +lon_0=%lf +lat_0=%lf %s",
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]             centralLongitude, standardParallel, shape);
from_string                             : Input is not an arg declaration: centralLongitude, standardParallel, shape)
from_string                             : Input does not contain a struct member:             centralLongitude, standardParallel, shape);
update_cvariable_access                 : IN  [0][centralLongitude][,]:             centralLongitude, standardParallel, shape);
update_cvariable_access                 : IN  [1][standardParallel][,]:  standardParallel, shape);
update_cvariable_access                 : IN  [2][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [2][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[standardParallel] match_token=[,] post_match_string=[ shape);]
update_cvariable_access                 : OUT [1][standardParallel][,]:  standardParallel, shape);
transform_cvariable_access              : [IN] cvariable=[centralLongitude] match_token=[,] post_match_string=[ standardParallel, shape);]
update_cvariable_access                 : OUT [0][centralLongitude][,]:             centralLongitude, standardParallel, shape);
process_remaining_cargs                 : Substituted "standardParallel," with "standardParallel," [after ]:             centralLongitude, standardParallel, shape);
process_remaining_cargs                 : Substituted "centralLongitude," with "centralLongitude," [after ]:             centralLongitude, standardParallel, shape);
process_global_cargs                    : Substituted "standardParallel," with "standardParallel"," [after ]:             centralLongitude, standardParallel, shape);
process_global_cargs                    : Substituted "centralLongitude," with "centralLongitude"," [after ]:             centralLongitude, standardParallel, shape);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== proj_lambert_azimuthal_equal_area [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_polar_stereographic [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err                 = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_body                         : --------------------------------------------------------------------------------
update_cpp_body                         : comma-separated vars [before]: double centralLongitude = 0, centralLatitude = 0;
update_cpp_body                         : comma-separated vars [after ]: double centralLongitude = 0;
update_cpp_body                         : comma-separated vars [after ]: double  centralLatitude = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double centralLongitude = 0;
Transforms                              : Adding new local arg transform: double centralLongitude -> double centralLongitude
update_cvariable_declarations           : Added local arg: double centralLongitude -> double centralLongitude
from_string                             : Input does not contain a struct member: double centralLongitude = 0;
update_cvariable_access                 : IN  [0][centralLongitude][=]: double centralLongitude = 0;
transform_cvariable_access              : [IN] cvariable=[centralLongitude] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][centralLongitude][=]: double centralLongitude = 0;
process_remaining_cargs                 : Substituted "centralLongitude " with "centralLongitude " [after ]: double centralLongitude = 0;
process_global_cargs                    : Substituted "centralLongitude " with "centralLongitude" " [after ]: double centralLongitude = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double  centralLatitude = 0;
Transforms                              : Adding new local arg transform: double centralLatitude -> double centralLatitude
update_cvariable_declarations           : Added local arg: double centralLatitude -> double centralLatitude
from_string                             : Input does not contain a struct member: double  centralLatitude = 0;
update_cvariable_access                 : IN  [0][centralLatitude][=]: double  centralLatitude = 0;
transform_cvariable_access              : [IN] cvariable=[centralLatitude] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][centralLatitude][=]: double  centralLatitude = 0;
process_remaining_cargs                 : Substituted "centralLatitude " with "centralLatitude " [after ]: double  centralLatitude = 0;
process_global_cargs                    : Substituted "centralLatitude " with "centralLatitude" " [after ]: double  centralLatitude = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int has_northPole         = 0;
Transforms                              : Adding new local arg transform: int has_northPole -> int hasNorthpole
update_cvariable_declarations           : Added local arg: int has_northPole -> int hasNorthpole
update_cvariable_declarations           : --> updated line: int hasNorthpole= 0;
from_string                             : Input does not contain a struct member: int hasNorthpole= 0;
update_cvariable_access                 : IN  [0][hasNorthpole][=]: int hasNorthpole= 0;
transform_cvariable_access              : [IN] cvariable=[hasNorthpole] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: int hasNorthpole= 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] long projectionCentreFlag = 0;
Transforms                              : Adding new local arg transform: long projectionCentreFlag -> long projectionCentreFlag
update_cvariable_declarations           : Added local arg: long projectionCentreFlag -> long projectionCentreFlag
from_string                             : Input does not contain a struct member: long projectionCentreFlag = 0;
update_cvariable_access                 : IN  [0][projectionCentreFlag][=]: long projectionCentreFlag = 0;
transform_cvariable_access              : [IN] cvariable=[projectionCentreFlag] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][projectionCentreFlag][=]: long projectionCentreFlag = 0;
process_remaining_cargs                 : Substituted "projectionCentreFlag " with "projectionCentreFlag " [after ]: long projectionCentreFlag = 0;
process_global_cargs                    : Substituted "projectionCentreFlag " with "projectionCentreFlag" " [after ]: long projectionCentreFlag = 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] char shape[64]            = {0,};
Transforms                              : Adding new local arg transform: char shape[64] -> std::string shape
update_cvariable_declarations           : Added local arg: char shape[64] -> std::string shape
update_cvariable_declarations           : --> updated line: std::string shape= {0,};
from_string                             : Input does not contain a struct member: std::string shape= {0,};
update_cvariable_access                 : IN  [0][shape][=]: std::string shape= {0,};
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[=] post_match_string=[ {0,};]
update_cvariable_access                 : OUT [0][shape][=]: std::string shape = {0,};
process_remaining_cargs                 : Substituted "shape " with "shape " [after ]: std::string shape = {0,};
process_global_cargs                    : Substituted "shape " with "shape" " [after ]: std::string shape = {0,};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS)
update_cfunction_names                  : Updating static function get_earth_shape [after ]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][shape][)]:  shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][shape][)]:  shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ shape)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  earthShape( shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ earthShape( shape)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = earthShape( shape)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = earthShape( shape)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "orientationOfTheGridInDegrees", &centralLongitude)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "orientationOfTheGridInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "orientationOfTheGridInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "orientationOfTheGridInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&centralLongitude][)]:  "orientationOfTheGridInDegrees", &centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&centralLongitude] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&centralLongitude][)]:  "orientationOfTheGridInDegrees", centralLongitude)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "orientationOfTheGridInDegrees", centralLongitude)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "orientationOfTheGridInDegrees", centralLongitude)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "orientationOfTheGridInDegrees", centralLongitude)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "orientationOfTheGridInDegrees", centralLongitude)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "orientationOfTheGridInDegrees", centralLongitude)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "orientationOfTheGridInDegrees", centralLongitude)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "orientationOfTheGridInDegrees", centralLongitude)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "orientationOfTheGridInDegrees", centralLongitude)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("orientationOfTheGridInDegrees"), centralLongitude)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "LaDInDegrees", &centralLatitude)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "LaDInDegrees", &centralLatitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "LaDInDegrees", &centralLatitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "LaDInDegrees", &centralLatitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&centralLatitude][)]:  "LaDInDegrees", &centralLatitude)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&centralLatitude] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&centralLatitude][)]:  "LaDInDegrees", centralLatitude)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "LaDInDegrees", centralLatitude)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "LaDInDegrees", centralLatitude)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "LaDInDegrees", centralLatitude)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "LaDInDegrees", centralLatitude)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "LaDInDegrees", centralLatitude)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "LaDInDegrees", centralLatitude)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "LaDInDegrees", centralLatitude)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "LaDInDegrees", centralLatitude)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("LaDInDegrees"), centralLatitude)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_long_internal(h, "projectionCentreFlag", &projectionCentreFlag)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_long_internal(h, "projectionCentreFlag", &projectionCentreFlag)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_long_internal(h, "projectionCentreFlag", &projectionCentreFlag)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_long_internal(h, "projectionCentreFlag", &projectionCentreFlag)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&projectionCentreFlag][)]:  "projectionCentreFlag", &projectionCentreFlag)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&projectionCentreFlag] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&projectionCentreFlag][)]:  "projectionCentreFlag", projectionCentreFlag)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "projectionCentreFlag", projectionCentreFlag)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_long_internal( "projectionCentreFlag", projectionCentreFlag)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_long_internal( "projectionCentreFlag", projectionCentreFlag)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_long_internal( "projectionCentreFlag", projectionCentreFlag)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_long_internal( "projectionCentreFlag", projectionCentreFlag)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_long_internal( "projectionCentreFlag", projectionCentreFlag)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_long_internal( "projectionCentreFlag", projectionCentreFlag)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_long_internal( "projectionCentreFlag", projectionCentreFlag)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackLongHelper(AccessorName("projectionCentreFlag"), projectionCentreFlag)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] has_northPole = ((projectionCentreFlag & 128) == 0);
from_string                             : Input is not an arg declaration: has_northPole 
from_string                             : Input does not contain a struct member: has_northPole = ((projectionCentreFlag & 128) == 0);
update_cvariable_access                 : IN  [0][has_northPole][=]: has_northPole = ((projectionCentreFlag & 128) == 0);
update_cvariable_access                 : IN  [1][projectionCentreFlag][&]:  ((projectionCentreFlag & 128) == 0);
transform_cvariable_access              : [IN] cvariable=[projectionCentreFlag] match_token=[&] post_match_string=[ 128) == 0);]
update_cvariable_access                 : OUT [1][projectionCentreFlag][&]:  ((projectionCentreFlag & 128) == 0);
transform_cvariable_access              : [IN] cvariable=[has_northPole] match_token=[=] post_match_string=[ ((projectionCentreFlag & 128) == 0);]
update_cvariable_access                 : OUT [0][has_northPole][=]: hasNorthpole = ((projectionCentreFlag & 128) == 0);
process_remaining_cargs                 : Substituted "projectionCentreFlag " with "projectionCentreFlag " [after ]: hasNorthpole = ((projectionCentreFlag & 128) == 0);
process_global_cargs                    : Substituted "projectionCentreFlag " with "projectionCentreFlag" " [after ]: hasNorthpole = ((projectionCentreFlag & 128) == 0);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(result, 1024, "+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
apply_all_substitutions                 : Updated line: result = fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
from_string                             : Input is not an arg declaration: result 
from_string                             : Input does not contain a struct member: result = fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [0][result][=]: result = fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [1][proj][=]:  fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [2][stere][+]: stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [3][lat_ts][=]: lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [4][lat_0][=]: %lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [5][lon_0][=]: %s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [6][k_0][=]: %lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [7][x_0][=]: 1 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [8][y_0][=]: 0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[y_0] match_token=[=] post_match_string=[0 %s",]
update_cvariable_access                 : OUT [8][No transformed_remainder]: 0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[x_0] match_token=[=] post_match_string=[0 +y_0=0 %s",]
update_cvariable_access                 : OUT [7][No transformed_remainder]: 1 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[k_0] match_token=[=] post_match_string=[1 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [6][No transformed_remainder]: %lf +k_0=1 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[lon_0] match_token=[=] post_match_string=[%lf +k_0=1 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [5][No transformed_remainder]: %s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[lat_0] match_token=[=] post_match_string=[%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [4][No transformed_remainder]: %lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[lat_ts] match_token=[=] post_match_string=[%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [3][No transformed_remainder]: lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[stere] match_token=[+] post_match_string=[lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [2][No transformed_remainder]: stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[proj] match_token=[=] post_match_string=[stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[result] match_token=[=] post_match_string=[ fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [0][result][=]: result = fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
process_remaining_cargs                 : Substituted "result " with "result " [after ]: result = fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
process_global_cargs                    : Substituted "result " with "result" " [after ]: result = fmtString("+proj=stere +lat_ts=%lf +lat_0=%s +lon_0=%lf +k_0=1 +x_0=0 +y_0=0 %s",
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]             centralLatitude, has_northPole ? "90" : "-90", centralLongitude, shape);
from_string                             : Input is not an arg declaration: centralLatitude, has_northPole ? "90" : "-90", centralLongitude, shape)
from_string                             : Input does not contain a struct member:             centralLatitude, has_northPole ? "90" : "-90", centralLongitude, shape);
update_cvariable_access                 : IN  [0][centralLatitude][,]:             centralLatitude, has_northPole ? "90" : "-90", centralLongitude, shape);
update_cvariable_access                 : IN  [1][centralLongitude][,]:  has_northPole ? "90" : "-90", centralLongitude, shape);
update_cvariable_access                 : IN  [2][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [2][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[centralLongitude] match_token=[,] post_match_string=[ shape);]
update_cvariable_access                 : OUT [1][centralLongitude][,]:  has_northPole ? "90" : "-90", centralLongitude, shape);
transform_cvariable_access              : [IN] cvariable=[centralLatitude] match_token=[,] post_match_string=[ has_northPole ? "90" : "-90", centralLongitude, shape);]
update_cvariable_access                 : OUT [0][centralLatitude][,]:             centralLatitude, has_northPole ? "90" : "-90", centralLongitude, shape);
process_remaining_cargs                 : Substituted "centralLongitude," with "centralLongitude," [after ]:             centralLatitude, has_northPole ? "90" : "-90", centralLongitude, shape);
process_remaining_cargs                 : Substituted "centralLatitude," with "centralLatitude," [after ]:             centralLatitude, has_northPole ? "90" : "-90", centralLongitude, shape);
process_remaining_cargs                 : Substituted "has_northPole " with "hasNorthpole " [after ]:             centralLatitude, hasNorthpole ? "90" : "-90", centralLongitude, shape);
process_global_cargs                    : Substituted "centralLongitude," with "centralLongitude"," [after ]:             centralLatitude, hasNorthpole ? "90" : "-90", centralLongitude, shape);
process_global_cargs                    : Substituted "centralLatitude," with "centralLatitude"," [after ]:             centralLatitude, hasNorthpole ? "90" : "-90", centralLongitude, shape);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== proj_polar_stereographic [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_unprojected [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //char shape[64] = {0,};
skip_line                               : [C++ Comment]: //char shape[64] = {0,};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS) return err;
skip_line                               : [C++ Comment]: //if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS) return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] //snprintf(result, 1024, "+proj=longlat %s", shape);
skip_line                               : [C++ Comment]: //snprintf(result, 1024, "+proj=longlat %s", shape);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(result, 1024, "+proj=longlat +datum=WGS84 +no_defs +type=crs");
apply_all_substitutions                 : Updated line: result = fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
from_string                             : Input is not an arg declaration: result 
from_string                             : Input does not contain a struct member: result = fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
update_cvariable_access                 : IN  [0][result][=]: result = fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
update_cvariable_access                 : IN  [1][proj][=]:  fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
update_cvariable_access                 : IN  [2][longlat][+]: longlat +datum=WGS84 +no_defs +type=crs");
update_cvariable_access                 : IN  [3][datum][=]: datum=WGS84 +no_defs +type=crs");
update_cvariable_access                 : IN  [4][WGS84][+]: WGS84 +no_defs +type=crs");
update_cvariable_access                 : IN  [5][no_defs][+]: no_defs +type=crs");
update_cvariable_access                 : IN  [6][type][=]: type=crs");
transform_cvariable_access              : [IN] cvariable=[type] match_token=[=] post_match_string=[crs");]
update_cvariable_access                 : OUT [6][No transformed_remainder]: type=crs");
transform_cvariable_access              : [IN] cvariable=[no_defs] match_token=[+] post_match_string=[type=crs");]
update_cvariable_access                 : OUT [5][No transformed_remainder]: no_defs +type=crs");
transform_cvariable_access              : [IN] cvariable=[WGS84] match_token=[+] post_match_string=[no_defs +type=crs");]
update_cvariable_access                 : OUT [4][No transformed_remainder]: WGS84 +no_defs +type=crs");
transform_cvariable_access              : [IN] cvariable=[datum] match_token=[=] post_match_string=[WGS84 +no_defs +type=crs");]
update_cvariable_access                 : OUT [3][No transformed_remainder]: datum=WGS84 +no_defs +type=crs");
transform_cvariable_access              : [IN] cvariable=[longlat] match_token=[+] post_match_string=[datum=WGS84 +no_defs +type=crs");]
update_cvariable_access                 : OUT [2][No transformed_remainder]: longlat +datum=WGS84 +no_defs +type=crs");
transform_cvariable_access              : [IN] cvariable=[proj] match_token=[=] post_match_string=[longlat +datum=WGS84 +no_defs +type=crs");]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
transform_cvariable_access              : [IN] cvariable=[result] match_token=[=] post_match_string=[ fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");]
update_cvariable_access                 : OUT [0][result][=]: result = fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
process_remaining_cargs                 : Substituted "result " with "result " [after ]: result = fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
process_global_cargs                    : Substituted "result " with "result" " [after ]: result = fmtString("+proj=longlat +datum=WGS84 +no_defs +type=crs");
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== proj_unprojected [OUT] ==============================
                                          
Transforms                              : Adding new local arg transform: grib_handle* h -> None
Transforms                              : Adding new local arg transform: char* result -> std::string& result

create_cpp_body                         : ============================== proj_mercator [IN]  ==============================
                                          
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] int err             = 0;
Transforms                              : Adding new local arg transform: int err -> GribStatus err
update_cvariable_declarations           : Added local arg: int err -> GribStatus err
update_cvariable_declarations           : --> updated line: GribStatus err= 0;
from_string                             : Input does not contain a struct member: GribStatus err= 0;
update_cvariable_access                 : IN  [0][err][=]: GribStatus err= 0;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ 0;]
transform_return_cvariable_access       : Casting to return type, transformed: err = GribStatus{0};
update_cvariable_access                 : OUT [0][err][=]: GribStatus err = GribStatus{0};
process_remaining_cargs                 : Substituted "err " with "err " [after ]: GribStatus err = GribStatus{0};
process_global_cargs                    : Substituted "err " with "err" " [after ]: GribStatus err = GribStatus{0};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] double LaDInDegrees = 0;
Transforms                              : Adding new local arg transform: double LaDInDegrees -> double laDInDegrees
update_cvariable_declarations           : Added local arg: double LaDInDegrees -> double laDInDegrees
update_cvariable_declarations           : --> updated line: double laDInDegrees= 0;
from_string                             : Input does not contain a struct member: double laDInDegrees= 0;
update_cvariable_access                 : IN  [0][laDInDegrees][=]: double laDInDegrees= 0;
transform_cvariable_access              : [IN] cvariable=[laDInDegrees] match_token=[=] post_match_string=[ 0;]
update_cvariable_access                 : OUT [0][No transformed_remainder]: double laDInDegrees= 0;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] char shape[64]      = {0,};
Transforms                              : Adding new local arg transform: char shape[64] -> std::string shape
update_cvariable_declarations           : Added local arg: char shape[64] -> std::string shape
update_cvariable_declarations           : --> updated line: std::string shape= {0,};
from_string                             : Input does not contain a struct member: std::string shape= {0,};
update_cvariable_access                 : IN  [0][shape][=]: std::string shape= {0,};
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[=] post_match_string=[ {0,};]
update_cvariable_access                 : OUT [0][shape][=]: std::string shape = {0,};
process_remaining_cargs                 : Substituted "shape " with "shape " [after ]: std::string shape = {0,};
process_global_cargs                    : Substituted "shape " with "shape" " [after ]: std::string shape = {0,};
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  grib_get_double_internal(h, "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][&LaDInDegrees][)]:  "LaDInDegrees", &LaDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[&LaDInDegrees] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][&LaDInDegrees][)]:  "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = grib_get_double_internal( "LaDInDegrees", laDInDegrees)) != GribStatus::SUCCESS)
apply_get_set_substitutions             : Result of substitution: if ((err = unpackDoubleHelper(AccessorName("LaDInDegrees"), laDInDegrees)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] if ((err = get_earth_shape(h, shape)) != GRIB_SUCCESS)
update_cfunction_names                  : Updating static function get_earth_shape [after ]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
from_string                             : Input is not an arg declaration: if ((err 
from_string                             : Input does not contain a struct member: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [0][err][=]: if ((err = earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [1][h][,]:  earthShape(h, shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [2][shape][)]:  shape)) != GRIB_SUCCESS)
update_cvariable_access                 : IN  [3][GRIB_SUCCESS][)]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[GRIB_SUCCESS] match_token=[)] post_match_string=[]
update_cvariable_access                 : OUT [3][No transformed_remainder]: ) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[) != GRIB_SUCCESS)]
update_cvariable_access                 : OUT [2][shape][)]:  shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[h] match_token=[,] post_match_string=[ shape)) != GRIB_SUCCESS)]
default_transform_cvariable_access      : Removed [h] for match [,]
update_cvariable_access                 : OUT [1][h][,]:  earthShape( shape)) != GRIB_SUCCESS)
transform_cvariable_access              : [IN] cvariable=[err] match_token=[=] post_match_string=[ earthShape( shape)) != GRIB_SUCCESS)]
transform_return_cvariable_access       : return value via function call transformed: err = earthShape( shape)) != GRIB_SUCCESS)
update_cvariable_access                 : OUT [0][err][=]: if ((err = earthShape( shape)) != GRIB_SUCCESS)
convert_grib_values                     : [0] Replaced GRIB_SUCCESS with GribStatus::SUCCESS: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_remaining_cargs                 : Substituted "err " with "err " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
process_global_cargs                    : Substituted "err " with "err" " [after ]: if ((err = earthShape( shape)) != GribStatus::SUCCESS)
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] snprintf(result, 1024, "+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
apply_all_substitutions                 : Updated line: result = fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
from_string                             : Input is not an arg declaration: result 
from_string                             : Input does not contain a struct member: result = fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [0][result][=]: result = fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [1][proj][=]:  fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [2][merc][+]: merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [3][lat_ts][=]: lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [4][lat_0][=]: %lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [5][lon_0][=]: 0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [6][x_0][=]: 0 +x_0=0 +y_0=0 %s",
update_cvariable_access                 : IN  [7][y_0][=]: 0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[y_0] match_token=[=] post_match_string=[0 %s",]
update_cvariable_access                 : OUT [7][No transformed_remainder]: 0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[x_0] match_token=[=] post_match_string=[0 +y_0=0 %s",]
update_cvariable_access                 : OUT [6][No transformed_remainder]: 0 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[lon_0] match_token=[=] post_match_string=[0 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [5][No transformed_remainder]: 0 +lon_0=0 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[lat_0] match_token=[=] post_match_string=[0 +lon_0=0 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [4][No transformed_remainder]: %lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[lat_ts] match_token=[=] post_match_string=[%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [3][No transformed_remainder]: lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[merc] match_token=[+] post_match_string=[lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [2][No transformed_remainder]: merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[proj] match_token=[=] post_match_string=[merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [1][No transformed_remainder]:  fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
transform_cvariable_access              : [IN] cvariable=[result] match_token=[=] post_match_string=[ fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",]
update_cvariable_access                 : OUT [0][result][=]: result = fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
process_remaining_cargs                 : Substituted "result " with "result " [after ]: result = fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
process_global_cargs                    : Substituted "result " with "result" " [after ]: result = fmtString("+proj=merc +lat_ts=%lf +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 %s",
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING]             LaDInDegrees, shape);
from_string                             : Input is not an arg declaration: LaDInDegrees, shape)
from_string                             : Input does not contain a struct member:             LaDInDegrees, shape);
update_cvariable_access                 : IN  [0][LaDInDegrees][,]:             LaDInDegrees, shape);
update_cvariable_access                 : IN  [1][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[shape] match_token=[)] post_match_string=[;]
update_cvariable_access                 : OUT [1][shape][)]:  shape);
transform_cvariable_access              : [IN] cvariable=[LaDInDegrees] match_token=[,] post_match_string=[ shape);]
update_cvariable_access                 : OUT [0][LaDInDegrees][,]:             laDInDegrees, shape);
update_cpp_line                         : --------------------------------------------------------------------------------
update_cpp_line                         : [PROCESSING] return err;
from_string                             : Ignoring invalid arg type [return]: return err
from_string                             : Input is not an arg declaration: return err
from_string                             : Input does not contain a struct member: return err;
update_cvariable_access                 : IN  [0][err][;]: return err;
transform_cvariable_access              : [IN] cvariable=[err] match_token=[;] post_match_string=[]
transform_return_cvariable_access       : return value transformed: err;
update_cvariable_access                 : OUT [0][err][;]: return err;

create_cpp_body                         : ============================== proj_mercator [OUT] ==============================
                                          
process_forward_declarations            : @FORWARD_DECLARATION: Removed (not a static function) : @FORWARD_DECLARATION:init
process_forward_declarations            : @FORWARD_DECLARATION: Removed (not a static function) : @FORWARD_DECLARATION:get_native_type
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus majorMinorAxes(double& pMajor, double& pMinor);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus earthShape(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projSpaceView(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projAlbers(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projTransverseMercator(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projEquatorialAzimuthalEquidistant(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projLambertConformal(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projLambertAzimuthalEqualArea(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projPolarStereographic(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projUnprojected(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Updated: static GribStatus projMercator(std::string& result);
process_forward_declarations            : @FORWARD_DECLARATION: Removed (not a static function) : @FORWARD_DECLARATION:unpack_string

to_accessor_data                        : ===== [CONVERTING:END] grib_accessor_class_proj_string ====================
                                          
write_header_file                       : Class = ProjStringData
write_source_file                       : Class = ProjStringData
camel_case_name                         : name = ProjStringData
