convert                       : 

============================== [PHASE 1: Create AST code ] BEGIN ==============================

parse                         : self._cfilepath=[/home/kev/git/ecmwf/eccodes.convertion-inherit/src/] self._cfilename=[grib_accessor_class_ascii.cc]
parse                         : FILE=[/home/kev/git/ecmwf/eccodes.convertion-inherit/src/grib_accessor_class_ascii.cc]
parse                         : MACRO generation enabled [PARSE_DETAILED_PROCESSING_RECORD]
parse_root                    : INCLUDE=[/home/kev/git/ecmwf/eccodes.convertion-inherit/src/]
parse                         : MACRO DEFN spelling=[grib_api_internal_H] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_INLINE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[eccodes_windef_H] loc=[eccodes_windef.h]
parse                         : MACRO DEFN spelling=[GRIB_MUTEX_INIT_ONCE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_MUTEX_LOCK] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_MUTEX_UNLOCK] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[fseeko] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[ftello] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[Assert] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[COMPILE_TIME_ASSERT] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[DEBUG_ASSERT] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[DEBUG_ASSERT_ACCESS] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[STR_EQUAL] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[STR_EQUAL_NOCASE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[grib_api_H] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[ECCODES_DEPRECATED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_SECTION_PRODUCT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_SECTION_GRID] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_SECTION_LOCAL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_SECTION_DATA] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_SECTION_BITMAP] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_LOG_INFO] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_LOG_WARNING] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_LOG_ERROR] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_LOG_FATAL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_LOG_DEBUG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_UNDEFINED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_LONG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_DOUBLE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_STRING] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_BYTES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_SECTION] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_LABEL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_MISSING] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_MISSING_LONG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_MISSING_DOUBLE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_READ_ONLY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_DUMP_OK] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_VALUES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_CODED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_OCTET] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_ALIASES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_TYPE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_HEXADECIMAL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_NO_DATA] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_ALL_DATA] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DUMP_FLAG_ALL_ATTRIBUTES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NEAREST_SAME_GRID] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NEAREST_SAME_DATA] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NEAREST_SAME_POINT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_GEOITERATOR_NO_VALUES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_ALL_KEYS] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_SKIP_READ_ONLY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_SKIP_OPTIONAL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_SKIP_EDITION_SPECIFIC] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_SKIP_CODED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_SKIP_COMPUTED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_SKIP_DUPLICATES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_SKIP_FUNCTION] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_KEYS_ITERATOR_DUMP_ONLY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_CHECK] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_CHECK_NOLINE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_REGULAR_LL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_ROTATED_LL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_REGULAR_GG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_ROTATED_GG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_REDUCED_GG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_SH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_REDUCED_LL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_POLAR_STEREOGRAPHIC] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_REDUCED_ROTATED_GG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_LAMBERT_AZIMUTHAL_EQUAL_AREA] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_LAMBERT_CONFORMAL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_UNSTRUCTURED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_GRID_SPEC_HEALPIX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_SAME_AS_INPUT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_SPECTRAL_COMPLEX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_SPECTRAL_SIMPLE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_JPEG] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_GRID_COMPLEX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE_MATRIX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_GRID_SECOND_ORDER] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_CCSDS] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_TYPE_IEEE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_SAME_AS_INPUT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_PACKING_USE_PROVIDED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_ACCURACY_SAME_BITS_PER_VALUES_AS_INPUT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_ACCURACY_USE_PROVIDED_BITS_PER_VALUES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_ACCURACY_SAME_DECIMAL_SCALE_FACTOR_AS_INPUT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UTIL_ACCURACY_USE_PROVIDED_DECIMAL_SCALE_FACTOR] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[grib_errors_H] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_SUCCESS] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_END_OF_FILE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INTERNAL_ERROR] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_BUFFER_TOO_SMALL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NOT_IMPLEMENTED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_7777_NOT_FOUND] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_ARRAY_TOO_SMALL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_FILE_NOT_FOUND] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_CODE_NOT_FOUND_IN_TABLE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_ARRAY_SIZE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NOT_FOUND] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_IO_PROBLEM] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_MESSAGE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DECODING_ERROR] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_ENCODING_ERROR] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NO_MORE_IN_SET] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_GEOCALCULUS_PROBLEM] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_OUT_OF_MEMORY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_READ_ONLY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_ARGUMENT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NULL_HANDLE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_SECTION_NUMBER] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_VALUE_CANNOT_BE_MISSING] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_LENGTH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_TYPE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_STEP] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_STEP_UNIT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_FILE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_GRIB] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_INDEX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_ITERATOR] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_KEYS_ITERATOR] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_NEAREST] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_ORDERBY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_MISSING_KEY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_OUT_OF_AREA] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_CONCEPT_NO_MATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_HASH_ARRAY_NO_MATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NO_DEFINITIONS] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_TYPE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_END] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NO_VALUES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_GRID] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_END_OF_INDEX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NULL_INDEX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_PREMATURE_END_OF_FILE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INTERNAL_ARRAY_TOO_SMALL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_MESSAGE_TOO_LARGE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_CONSTANT_FIELD] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_SWITCH_NO_MATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UNDERFLOW] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_MESSAGE_MALFORMED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_CORRUPTED_INDEX] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_BPV] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DIFFERENT_EDITION] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_VALUE_DIFFERENT] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_INVALID_KEY_VALUE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_STRING_TOO_SMALL] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_CONVERSION] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_MISSING_BUFR_ENTRY] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NULL_POINTER] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_ATTRIBUTE_CLASH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TOO_MANY_ATTRIBUTES] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_ATTRIBUTE_NOT_FOUND] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UNSUPPORTED_EDITION] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_OUT_OF_RANGE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_WRONG_BITMAP_SIZE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_FUNCTIONALITY_NOT_ENABLED] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_VALUE_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_DOUBLE_VALUE_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_LONG_VALUE_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_BYTE_VALUE_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_STRING_VALUE_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_OFFSET_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_COUNT_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_NAME_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_TYPE_AND_VALUE_MISMATCH] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_UNABLE_TO_COMPARE_ACCESSORS] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[GRIB_ASSERTION_FAILURE] loc=[grib_api.h]
parse                         : MACRO DEFN spelling=[MAX_ACCESSOR_ATTRIBUTES] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_FILE_HANDLES_WITH_MULTI] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[ACCESSORS_ARRAY_SIZE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_NUM_CONCEPTS] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_NUM_HASH_ARRAY] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_NAMESPACE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_NAMESPACE_LEN] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_MY_BUFFER] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_USER_BUFFER] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_REAL_MODE8] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_NUM_SECTIONS] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_LOG_PERROR] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_HASH_ARRAY_TYPE_UNKNOWN] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_HASH_ARRAY_TYPE_INTEGER] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_HASH_ARRAY_TYPE_DOUBLE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_HASH_ARRAY_TYPE_STRING] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_GRIB] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_BUFR] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_METAR] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_GTS] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_BUFR_UNPACK_STRUCTURE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_BUFR_UNPACK_FLAT] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[CODES_BUFR_NEW_DATA] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_SMART_TABLE_COLUMNS] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_CODETABLE_ENTRIES] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_COMPARE_NAMES] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_COMPARE_TYPES] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_ACCESSOR_NAMES] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_READ_ONLY] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_DUMP] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_CAN_BE_MISSING] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_HIDDEN] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_CONSTRAINT] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_BUFR_DATA] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_NO_COPY] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_COPY_OK] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_FUNCTION] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_DATA] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_NO_FAIL] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_TRANSIENT] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_STRING_TYPE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_LONG_TYPE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_DOUBLE_TYPE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_LOWERCASE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_BUFR_COORD] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[GRIB_ACCESSOR_FLAG_COPY_IF_CHANGING_EDITION] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_UNKNOWN] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_STRING] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_DOUBLE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_LONG] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_TABLE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_FLAG] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_REPLICATION] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_OPERATOR] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[BUFR_DESCRIPTOR_TYPE_SEQUENCE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_SET_VALUES] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[MAX_ACCESSOR_CACHE] loc=[grib_api_internal.h]
parse                         : MACRO DEFN spelling=[STRING_VALUE_LEN] loc=[grib_api_internal.h]
parse                         : MACRO INST spelling=[Assert] loc=[grib_accessor_class_ascii.cc] extent=[120:5 -> 120:27]
parse                         : MACRO INST spelling=[NULL] loc=[grib_accessor_class_ascii.cc] extent=[136:33 -> 136:37]
parse                         : MACRO INST spelling=[GRIB_TYPE_STRING] loc=[grib_accessor_class_ascii.cc] extent=[141:12 -> 141:28]
parse                         : MACRO INST spelling=[GRIB_LOG_ERROR] loc=[grib_accessor_class_ascii.cc] extent=[151:38 -> 151:52]
parse                         : MACRO INST spelling=[GRIB_ARRAY_TOO_SMALL] loc=[grib_accessor_class_ascii.cc] extent=[154:16 -> 154:36]
parse                         : MACRO INST spelling=[GRIB_SUCCESS] loc=[grib_accessor_class_ascii.cc] extent=[161:12 -> 161:24]
parse                         : MACRO INST spelling=[GRIB_LOG_ERROR] loc=[grib_accessor_class_ascii.cc] extent=[170:38 -> 170:52]
parse                         : MACRO INST spelling=[GRIB_BUFFER_TOO_SMALL] loc=[grib_accessor_class_ascii.cc] extent=[173:16 -> 173:37]
parse                         : MACRO INST spelling=[GRIB_SUCCESS] loc=[grib_accessor_class_ascii.cc] extent=[183:12 -> 183:24]
parse                         : MACRO INST spelling=[GRIB_LOG_ERROR] loc=[grib_accessor_class_ascii.cc] extent=[188:34 -> 188:48]
parse                         : MACRO INST spelling=[GRIB_NOT_IMPLEMENTED] loc=[grib_accessor_class_ascii.cc] extent=[189:12 -> 189:32]
parse                         : MACRO INST spelling=[GRIB_LOG_ERROR] loc=[grib_accessor_class_ascii.cc] extent=[194:34 -> 194:48]
parse                         : MACRO INST spelling=[GRIB_NOT_IMPLEMENTED] loc=[grib_accessor_class_ascii.cc] extent=[195:12 -> 195:32]
parse                         : MACRO INST spelling=[NULL] loc=[grib_accessor_class_ascii.cc] extent=[203:18 -> 203:22]
parse                         : MACRO INST spelling=[GRIB_LOG_DEBUG] loc=[grib_accessor_class_ascii.cc] extent=[222:34 -> 222:48]
parse                         : MACRO INST spelling=[GRIB_SUCCESS] loc=[grib_accessor_class_ascii.cc] extent=[223:12 -> 223:24]
parse                         : MACRO INST spelling=[NULL] loc=[grib_accessor_class_ascii.cc] extent=[230:18 -> 230:22]
parse                         : MACRO INST spelling=[GRIB_LOG_DEBUG] loc=[grib_accessor_class_ascii.cc] extent=[238:38 -> 238:52]
parse                         : MACRO INST spelling=[GRIB_SUCCESS] loc=[grib_accessor_class_ascii.cc] extent=[239:16 -> 239:28]
parse                         : MACRO INST spelling=[GRIB_LOG_WARNING] loc=[grib_accessor_class_ascii.cc] extent=[242:34 -> 242:50]
parse                         : MACRO INST spelling=[GRIB_NOT_IMPLEMENTED] loc=[grib_accessor_class_ascii.cc] extent=[244:12 -> 244:32]
parse                         : MACRO INST spelling=[GRIB_COUNT_MISMATCH] loc=[grib_accessor_class_ascii.cc] extent=[258:16 -> 258:35]
parse                         : MACRO INST spelling=[GRIB_SUCCESS] loc=[grib_accessor_class_ascii.cc] extent=[268:14 -> 268:26]
parse                         : MACRO INST spelling=[STR_EQUAL] loc=[grib_accessor_class_ascii.cc] extent=[269:10 -> 269:31]
parse                         : MACRO INST spelling=[GRIB_STRING_VALUE_MISMATCH] loc=[grib_accessor_class_ascii.cc] extent=[270:18 -> 270:44]
convert                       : 

============================== [PHASE 1: Create AST code ] END   ==============================

convert                       : 

============================== [PHASE 2: Convert AST to C] BEGIN ==============================

to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[get_native_type] type=[int (grib_accessor *)] extent=[42:1]->[42:43]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int get_native_type ( grib_accessor * )
parse_DECL_node               : [OUT][FuncSig] int get_native_type(grib_accessor* );
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[pack_double] type=[int (grib_accessor *, const double *, size_t *)] extent=[43:1]->[43:71]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int pack_double ( grib_accessor * , const double * val , size_t * len )
parse_DECL_node               : [OUT][FuncSig] int pack_double(grib_accessor* , const double* val, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[pack_long] type=[int (grib_accessor *, const long *, size_t *)] extent=[44:1]->[44:67]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int pack_long ( grib_accessor * , const long * val , size_t * len )
parse_DECL_node               : [OUT][FuncSig] int pack_long(grib_accessor* , const long* val, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[pack_string] type=[int (grib_accessor *, const char *, size_t *)] extent=[45:1]->[45:65]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int pack_string ( grib_accessor * , const char * , size_t * len )
parse_DECL_node               : [OUT][FuncSig] int pack_string(grib_accessor* , const char* , size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[unpack_double] type=[int (grib_accessor *, double *, size_t *)] extent=[46:1]->[46:67]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int unpack_double ( grib_accessor * , double * val , size_t * len )
parse_DECL_node               : [OUT][FuncSig] int unpack_double(grib_accessor* , double* val, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[unpack_long] type=[int (grib_accessor *, long *, size_t *)] extent=[47:1]->[47:63]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int unpack_long ( grib_accessor * , long * val , size_t * len )
parse_DECL_node               : [OUT][FuncSig] int unpack_long(grib_accessor* , long* val, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[48:1]->[48:61]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int unpack_string ( grib_accessor * , char * , size_t * len )
parse_DECL_node               : [OUT][FuncSig] int unpack_string(grib_accessor* , char* , size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[string_length] type=[size_t (grib_accessor *)] extent=[49:1]->[49:44]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static size_t string_length ( grib_accessor * )
parse_DECL_node               : [OUT][FuncSig] size_t string_length(grib_accessor* );
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[value_count] type=[int (grib_accessor *, long *)] extent=[50:1]->[50:46]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int value_count ( grib_accessor * , long * )
parse_DECL_node               : [OUT][FuncSig] int value_count(grib_accessor* , long* );
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[dump] type=[void (grib_accessor *, grib_dumper *)] extent=[51:1]->[51:47]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static void dump ( grib_accessor * , grib_dumper * )
parse_DECL_node               : [OUT][FuncSig] void dump(grib_accessor* , grib_dumper* );
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[init] type=[void (grib_accessor *, const long, grib_arguments *)] extent=[52:1]->[52:62]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static void init ( grib_accessor * , const long , grib_arguments * )
parse_DECL_node               : [OUT][FuncSig] void init(grib_accessor* , const long , grib_arguments* );
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[compare] type=[int (grib_accessor *, grib_accessor *)] extent=[53:1]->[53:51]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int compare ( grib_accessor * , grib_accessor * )
parse_DECL_node               : [OUT][FuncSig] int compare(grib_accessor* , grib_accessor* );
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[init] type=[void (grib_accessor *, const long, grib_arguments *)] extent=[117:1]->[121:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static void init ( grib_accessor * a , const long len , grib_arguments * arg ) { a -> length = len ; Assert ( a -> length >= 0 ) ; }
parse_DECL_node               : [OUT][FuncSig] void init(grib_accessor* a, const long len, grib_arguments* arg);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[value_count] type=[int (grib_accessor *, long *)] extent=[123:1]->[127:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int value_count ( grib_accessor * a , long * count ) { * count = 1 ; return 0 ; }
parse_DECL_node               : [OUT][FuncSig] int value_count(grib_accessor* a, long* count);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[string_length] type=[size_t (grib_accessor *)] extent=[129:1]->[132:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static size_t string_length ( grib_accessor * a ) { return a -> length ; }
parse_DECL_node               : [OUT][FuncSig] size_t string_length(grib_accessor* a);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[dump] type=[void (grib_accessor *, grib_dumper *)] extent=[134:1]->[137:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static void dump ( grib_accessor * a , grib_dumper * dumper ) { grib_dump_string ( dumper , a , NULL ) ; }
parse_DECL_node               : [OUT][FuncSig] void dump(grib_accessor* a, grib_dumper* dumper);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[get_native_type] type=[int (grib_accessor *)] extent=[139:1]->[142:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int get_native_type ( grib_accessor * a ) { return GRIB_TYPE_STRING ; }
parse_DECL_node               : [OUT][FuncSig] int get_native_type(grib_accessor* a);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[144:1]->[162:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int unpack_string ( grib_accessor * a , char * val , size_t * len ) { size_t i = 0 ; grib_handle * hand = grib_handle_of_accessor ( a ) ; const size_t alen = a -> length ; if ( len [ 0 ] < ( alen + 1 ) ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "unpack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_ARRAY_TOO_SMALL ; } for ( i = 0 ; i < alen ; i ++ ) val [ i ] = hand -> buffer -> data [ a -> offset + i ] ; val [ i ] = 0 ; len [ 0 ] = i ; return GRIB_SUCCESS ; }
parse_DECL_node               : [OUT][FuncSig] int unpack_string(grib_accessor* a, char* val, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[pack_string] type=[int (grib_accessor *, const char *, size_t *)] extent=[164:1]->[184:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int pack_string ( grib_accessor * a , const char * val , size_t * len ) { size_t i = 0 ; grib_handle * hand = grib_handle_of_accessor ( a ) ; const size_t alen = a -> length ; if ( len [ 0 ] > ( alen + 1 ) ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "pack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_BUFFER_TOO_SMALL ; } for ( i = 0 ; i < alen ; i ++ ) { if ( i < len [ 0 ] ) hand -> buffer -> data [ a -> offset + i ] = val [ i ] ; else hand -> buffer -> data [ a -> offset + i ] = 0 ; } return GRIB_SUCCESS ; }
parse_DECL_node               : [OUT][FuncSig] int pack_string(grib_accessor* a, const char* val, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[pack_long] type=[int (grib_accessor *, const long *, size_t *)] extent=[186:1]->[190:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int pack_long ( grib_accessor * a , const long * v , size_t * len ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "Should not pack %s as long (It's a string)" , a -> name ) ; return GRIB_NOT_IMPLEMENTED ; }
parse_DECL_node               : [OUT][FuncSig] int pack_long(grib_accessor* a, const long* v, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[pack_double] type=[int (grib_accessor *, const double *, size_t *)] extent=[192:1]->[196:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int pack_double ( grib_accessor * a , const double * v , size_t * len ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "Should not pack %s as double (It's a string)" , a -> name ) ; return GRIB_NOT_IMPLEMENTED ; }
parse_DECL_node               : [OUT][FuncSig] int pack_double(grib_accessor* a, const double* v, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[unpack_long] type=[int (grib_accessor *, long *, size_t *)] extent=[198:1]->[224:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int unpack_long ( grib_accessor * a , long * v , size_t * len ) { char val [ 1024 ] = { 0 , } ; size_t l = sizeof ( val ) ; size_t i = 0 ; char * last = NULL ; int err = grib_unpack_string ( a , val , & l ) ; if ( err ) return err ; i = 0 ; while ( i < l - 1 && val [ i ] == ' ' ) i ++ ; if ( val [ i ] == 0 ) { * v = 0 ; return 0 ; } if ( val [ i + 1 ] == ' ' && i < l - 2 ) val [ i + 1 ] = 0 ; * v = strtol ( val , & last , 10 ) ; grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name ) ; return GRIB_SUCCESS ; }
parse_DECL_node               : [OUT][FuncSig] int unpack_long(grib_accessor* a, long* v, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[unpack_double] type=[int (grib_accessor *, double *, size_t *)] extent=[226:1]->[245:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int unpack_double ( grib_accessor * a , double * v , size_t * len ) { char val [ 1024 ] ; size_t l = sizeof ( val ) ; char * last = NULL ; int err = grib_unpack_string ( a , val , & l ) ; if ( err ) return err ; * v = strtod ( val , & last ) ; if ( * last == 0 ) { grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name ) ; return GRIB_SUCCESS ; } grib_context_log ( a -> context , GRIB_LOG_WARNING , "Cannot unpack %s as double. Hint: Try unpacking as string" , a -> name ) ; return GRIB_NOT_IMPLEMENTED ; }
parse_DECL_node               : [OUT][FuncSig] int unpack_double(grib_accessor* a, double* v, size_t* len);
to_ccode_objects              : [OUT] ==========================================================================================
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.FUNCTION_DECL] spelling=[compare] type=[int (grib_accessor *, grib_accessor *)] extent=[247:1]->[276:2]
parse_DECL_node               : [IN] [CursorKind.FUNCTION_DECL] static int compare ( grib_accessor * a , grib_accessor * b ) { int retval = 0 ; char * aval = 0 ; char * bval = 0 ; int err = 0 ; size_t alen = a -> length + 1 ; size_t blen = b -> length + 1 ; if ( alen != blen ) return GRIB_COUNT_MISMATCH ; aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) ) ; bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) ) ; err = grib_unpack_string ( a , aval , & alen ) ; if ( err ) return err ; err = grib_unpack_string ( b , bval , & blen ) ; if ( err ) return err ; retval = GRIB_SUCCESS ; if ( ! STR_EQUAL ( aval , bval ) ) retval = GRIB_STRING_VALUE_MISMATCH ; grib_context_free ( a -> context , aval ) ; grib_context_free ( b -> context , bval ) ; return retval ; }
parse_DECL_node               : [OUT][FuncSig] int compare(grib_accessor* a, grib_accessor* b);
to_ccode_objects              : [OUT] ==========================================================================================
convert_global_function_nodes : int get_native_type(grib_accessor* );
                                int pack_double(grib_accessor* , const double* val, size_t* len);
                                int pack_long(grib_accessor* , const long* val, size_t* len);
                                int pack_string(grib_accessor* , const char* , size_t* len);
                                int unpack_double(grib_accessor* , double* val, size_t* len);
                                int unpack_long(grib_accessor* , long* val, size_t* len);
                                int unpack_string(grib_accessor* , char* , size_t* len);
                                size_t string_length(grib_accessor* );
                                int value_count(grib_accessor* , long* );
                                void dump(grib_accessor* , grib_dumper* );
                                void init(grib_accessor* , const long , grib_arguments* );
                                int compare(grib_accessor* , grib_accessor* );
                                void init(grib_accessor* a, const long len, grib_arguments* arg);
                                int value_count(grib_accessor* a, long* count);
                                size_t string_length(grib_accessor* a);
                                void dump(grib_accessor* a, grib_dumper* dumper);
                                int get_native_type(grib_accessor* a);
                                int unpack_string(grib_accessor* a, char* val, size_t* len);
                                int pack_string(grib_accessor* a, const char* val, size_t* len);
                                int pack_long(grib_accessor* a, const long* v, size_t* len);
                                int pack_double(grib_accessor* a, const double* v, size_t* len);
                                int unpack_long(grib_accessor* a, long* v, size_t* len);
                                int unpack_double(grib_accessor* a, double* v, size_t* len);
                                int compare(grib_accessor* a, grib_accessor* b);
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[118:1]->[121:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { a -> length = len ; Assert ( a -> length >= 0 ) ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[118:1]->[121:2]
dump_node                     :    -> tokens[:10]=[['{', 'a', '->', 'length', '=', 'len', ';', 'Assert', '(', 'a']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[119:5]->[119:20]
dump_node                     :     -> tokens[:10]=[['a', '->', 'length', '=', 'len']]
dump_node                     :     [4:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[119:5]->[119:14]
dump_node                     :      -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[119:5]->[119:6]
dump_node                     :       -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[119:5]->[119:6]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[long] extent=[119:17]->[119:20]
dump_node                     :      -> tokens[:10]=[['len']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[len] type=[const long] extent=[119:17]->[119:20]
dump_node                     :       -> tokens[:10]=[['len']]
dump_node                     :    [3:CursorKind.DO_STMT] spelling=[] type=[] extent=[120:5]->[120:27]
dump_node                     :     -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[120:5]->[120:27]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.IF_STMT] spelling=[] type=[] extent=[120:5]->[120:27]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNARY_OPERATOR] spelling=[] type=[bool] extent=[120:5]->[120:27]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.PAREN_EXPR] spelling=[] type=[bool] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[120:5]->[120:5]
dump_node                     :          -> tokens[:10]=[['a', '->', 'length', '>=', '0']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[120:5]->[120:5]
dump_node                     :           -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :           [10:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[120:5]->[120:5]
dump_node                     :            -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :            [11:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[120:5]->[120:5]
dump_node                     :             -> tokens[:10]=[['a']]
dump_node                     :             [12:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[120:5]->[120:5]
dump_node                     :              -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[120:5]->[120:5]
dump_node                     :           -> tokens[:10]=[['0']]
dump_node                     :           [10:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[120:5]->[120:5]
dump_node                     :            -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.CALL_EXPR] spelling=[codes_assertion_failed] type=[void] extent=[120:5]->[120:27]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[codes_assertion_failed] type=[void (*)(const char *, const char *, int)] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[codes_assertion_failed] type=[void (const char *, const char *, int)] extent=[120:5]->[120:27]
dump_node                     :          -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.STRING_LITERAL] spelling=["a->length >= 0"] type=[const char[15]] extent=[120:5]->[120:27]
dump_node                     :          -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.STRING_LITERAL] spelling=["/home/kev/git/ecmwf/eccodes.convertion-inherit/src/grib_accessor_class_ascii.cc"] type=[const char[80]] extent=[120:5]->[120:27]
dump_node                     :          -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[bool] extent=[120:5]->[120:27]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[120:5]->[120:27]
dump_node                     :       -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[119:5]->[119:20]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> length = len
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[119:5]->[119:14]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[long] extent=[119:17]->[119:20]
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[119:5]->[119:14]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[long] extent=[119:17]->[119:20]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[const long] extent=[119:17]->[119:20]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->length] operator_token=[=] right_operand_cvalue=[len]
parse_EXPR_node               : [OUT][BinaryOperation] a->length = len;
parse_ast_node                : [CursorKind.DO_STMT] spelling=[] type=[] extent=[120:5]->[120:27]
parse_macro_instantiation     : MACRO macro_node spelling=[Assert] kind=[CursorKind.MACRO_INSTANTIATION] extent=[120:5 -> 120:27]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[Assert] type=[] extent=[120:5]->[120:27]
dump_node                     :    -> tokens[:10]=[['Assert', '(', 'a', '->', 'length', '>=', '0', ')']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.DO_STMT] extent=[120:5 -> 120:27]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.DO_STMT] spelling=[] type=[] extent=[120:5]->[120:27]
dump_node                     :    -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[120:5]->[120:27]
dump_node                     :     -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.IF_STMT] spelling=[] type=[] extent=[120:5]->[120:27]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.UNARY_OPERATOR] spelling=[] type=[bool] extent=[120:5]->[120:27]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.PAREN_EXPR] spelling=[] type=[bool] extent=[120:5]->[120:27]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[120:5]->[120:5]
dump_node                     :         -> tokens[:10]=[['a', '->', 'length', '>=', '0']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[120:5]->[120:5]
dump_node                     :          -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[120:5]->[120:5]
dump_node                     :           -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[120:5]->[120:5]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[120:5]->[120:5]
dump_node                     :             -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[120:5]->[120:5]
dump_node                     :          -> tokens[:10]=[['0']]
dump_node                     :          [9:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[120:5]->[120:5]
dump_node                     :           -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[codes_assertion_failed] type=[void] extent=[120:5]->[120:27]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[codes_assertion_failed] type=[void (*)(const char *, const char *, int)] extent=[120:5]->[120:27]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[codes_assertion_failed] type=[void (const char *, const char *, int)] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[120:5]->[120:27]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.STRING_LITERAL] spelling=["a->length >= 0"] type=[const char[15]] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[120:5]->[120:27]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.STRING_LITERAL] spelling=["/home/kev/git/ecmwf/eccodes.convertion-inherit/src/grib_accessor_class_ascii.cc"] type=[const char[80]] extent=[120:5]->[120:27]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[120:5]->[120:27]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[bool] extent=[120:5]->[120:27]
dump_node                     :     -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[120:5]->[120:27]
dump_node                     :      -> tokens[:10]=[[]]
parse_macro_instantiation     : Found root_expanded_node, kind=[CursorKind.BINARY_OPERATOR], parsing...
convert_tokens                : [IN] tokens=[['a', '->', 'length', '>=', '0', ')']] root_expanded_node kind=CursorKind.BINARY_OPERATOR spelling=[]
match_tokens                  : new_node [CursorKind.DECL_REF_EXPR] spelling=[a] best_match_count=[1]
match_tokens                  : new_node [CursorKind.UNEXPOSED_EXPR] spelling=[a] best_match_count=[1]
match_tokens                  : new_node [CursorKind.MEMBER_REF_EXPR] spelling=[length] best_match_count=[3]
match_tokens                  : new_node [CursorKind.UNEXPOSED_EXPR] spelling=[length] best_match_count=[3]
match_tokens                  : new_node [CursorKind.BINARY_OPERATOR] spelling=[] best_match_count=[5]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[120:5]->[120:5]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> length >= 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[120:5]->[120:5]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[120:5]->[120:5]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[120:5]->[120:5]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[120:5]->[120:5]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[120:5]->[120:5]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[120:5]->[120:5]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->length] operator_token=[>=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] a->length >= 0
convert_tokens                :      MATCH - converted_tokens=[a->length >= 0] tokens=[['a', '->', 'length', '>=', '0', ')']] match_count=[5]
parse_macro_instantiation     : converted_node=[a->length >= 0]
convert_tokens                : [IN] tokens=[[')']] root_expanded_node kind=CursorKind.BINARY_OPERATOR spelling=[]
convert_tokens                :      NO MATCH - converted_token=[)] tokens=[[]]
parse_macro_instantiation     : converted_node=[)]
parse_macro_instantiation     : FINAL MACRO INST=[Assert(a->length >= 0);]
parse_STMT_node               : [OUT][CompoundStatement] {
a->length = len;
Assert(a->length >= 0);
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : void init(grib_accessor* a, const long len, grib_arguments* arg)
                                {
                                a->length = len;
                                Assert(a->length >= 0);
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[124:1]->[127:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { * count = 1 ; return 0 ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[124:1]->[127:2]
dump_node                     :    -> tokens[:10]=[['{', '*', 'count', '=', '1', ';', 'return', '0', ';', '}']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[125:5]->[125:15]
dump_node                     :     -> tokens[:10]=[['*', 'count', '=', '1']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[125:5]->[125:11]
dump_node                     :      -> tokens[:10]=[['*', 'count']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[count] type=[long *] extent=[125:6]->[125:11]
dump_node                     :       -> tokens[:10]=[['count']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[count] type=[long *] extent=[125:6]->[125:11]
dump_node                     :        -> tokens[:10]=[['count']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[125:14]->[125:15]
dump_node                     :      -> tokens[:10]=[['1']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[125:14]->[125:15]
dump_node                     :       -> tokens[:10]=[['1']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[126:5]->[126:13]
dump_node                     :     -> tokens[:10]=[['return', '0']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[126:12]->[126:13]
dump_node                     :      -> tokens[:10]=[['0']]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[125:5]->[125:15]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] * count = 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[125:5]->[125:11]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[125:14]->[125:15]
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[125:5]->[125:11]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] * count
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[*]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[count] type=[long *] extent=[125:6]->[125:11]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] count
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[count] type=[long *] extent=[125:6]->[125:11]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] count
parse_EXPR_node               : [OUT][ValueDeclarationReference] count
parse_EXPR_node               : [OUT][ValueDeclarationReference] count
parse_EXPR_node               : [OUT][UnaryOperation] *count;
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[125:14]->[125:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[125:14]->[125:15]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[*count;] operator_token=[=] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] *count = 1;
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[126:5]->[126:13]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[126:12]->[126:13]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_STMT_node               : [OUT][ReturnStatement] return 
0;
parse_STMT_node               : [OUT][CompoundStatement] {
*count = 1;
return 
0;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int value_count(grib_accessor* a, long* count)
                                {
                                *count = 1;
                                return 
                                0;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[130:1]->[132:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { return a -> length ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[130:1]->[132:2]
dump_node                     :    -> tokens[:10]=[['{', 'return', 'a', '->', 'length', ';', '}']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[131:5]->[131:21]
dump_node                     :     -> tokens[:10]=[['return', 'a', '->', 'length']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[size_t] extent=[131:12]->[131:21]
dump_node                     :      -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[131:12]->[131:21]
dump_node                     :       -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[131:12]->[131:21]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[131:12]->[131:13]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[131:12]->[131:13]
dump_node                     :          -> tokens[:10]=[['a']]
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[131:5]->[131:21]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return a -> length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[size_t] extent=[131:12]->[131:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[131:12]->[131:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[131:12]->[131:21]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_STMT_node               : [OUT][ReturnStatement] return 
a->length;
parse_STMT_node               : [OUT][CompoundStatement] {
return 
a->length;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : size_t string_length(grib_accessor* a)
                                {
                                return 
                                a->length;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[135:1]->[137:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { grib_dump_string ( dumper , a , NULL ) ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[135:1]->[137:2]
dump_node                     :    -> tokens[:10]=[['{', 'grib_dump_string', '(', 'dumper', ',', 'a', ',', 'NULL', ')', ';']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_dump_string] type=[void] extent=[136:5]->[136:38]
dump_node                     :     -> tokens[:10]=[['grib_dump_string', '(', 'dumper', ',', 'a', ',', 'NULL', ')']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_dump_string] type=[void (*)(grib_dumper *, grib_accessor *, const char *)] extent=[136:5]->[136:21]
dump_node                     :      -> tokens[:10]=[['grib_dump_string']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_dump_string] type=[void (grib_dumper *, grib_accessor *, const char *)] extent=[136:5]->[136:21]
dump_node                     :       -> tokens[:10]=[['grib_dump_string']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[dumper] type=[grib_dumper *] extent=[136:22]->[136:28]
dump_node                     :      -> tokens[:10]=[['dumper']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[dumper] type=[grib_dumper *] extent=[136:22]->[136:28]
dump_node                     :       -> tokens[:10]=[['dumper']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[136:30]->[136:31]
dump_node                     :      -> tokens[:10]=[['a']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[136:30]->[136:31]
dump_node                     :       -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[136:33]->[136:37]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.GNU_NULL_EXPR] spelling=[] type=[long] extent=[136:33]->[136:37]
dump_node                     :       -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_dump_string] type=[void] extent=[136:5]->[136:38]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_dump_string ( dumper , a , NULL )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_dump_string] type=[void (*)(grib_dumper *, grib_accessor *, const char *)] extent=[136:5]->[136:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_dump_string
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_dump_string] type=[void (grib_dumper *, grib_accessor *, const char *)] extent=[136:5]->[136:21]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_dump_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_dump_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_dump_string
parse_CALL_EXPR               : cfunc_name=[grib_dump_string] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[dumper] type=[grib_dumper *] extent=[136:22]->[136:28]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] dumper
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[dumper] type=[grib_dumper *] extent=[136:22]->[136:28]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] dumper
parse_EXPR_node               : [OUT][ValueDeclarationReference] dumper
parse_EXPR_node               : [OUT][ValueDeclarationReference] dumper
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[136:30]->[136:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[136:30]->[136:31]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[136:33]->[136:37]
parse_macro_instantiation     : MACRO macro_node spelling=[NULL] kind=[CursorKind.MACRO_INSTANTIATION] extent=[136:33 -> 136:37]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[NULL] type=[] extent=[136:33]->[136:37]
dump_node                     :    -> tokens[:10]=[['NULL']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.UNEXPOSED_EXPR] extent=[136:33 -> 136:37]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[136:33]->[136:37]
dump_node                     :    -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.GNU_NULL_EXPR] spelling=[] type=[long] extent=[136:33]->[136:37]
dump_node                     :     -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_EXPR_node               : [OUT][FunctionCall] grib_dump_string(dumper, a, NULL);
parse_STMT_node               : [OUT][CompoundStatement] {
grib_dump_string(dumper, a, NULL);
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : void dump(grib_accessor* a, grib_dumper* dumper)
                                {
                                grib_dump_string(dumper, a, NULL);
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[140:1]->[142:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { return GRIB_TYPE_STRING ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[140:1]->[142:2]
dump_node                     :    -> tokens[:10]=[['{', 'return', 'GRIB_TYPE_STRING', ';', '}']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[141:5]->[141:28]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_TYPE_STRING']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[141:12]->[141:28]
dump_node                     :      -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[141:5]->[141:28]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_TYPE_STRING
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_TYPE_STRING']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_TYPE_STRING;
parse_STMT_node               : [OUT][CompoundStatement] {
return 
GRIB_TYPE_STRING;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int get_native_type(grib_accessor* a)
                                {
                                return 
                                GRIB_TYPE_STRING;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[145:1]->[162:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { size_t i = 0 ; grib_handle * hand = grib_handle_of_accessor ( a ) ; const size_t alen = a -> length ; if ( len [ 0 ] < ( alen + 1 ) ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "unpack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_ARRAY_TOO_SMALL ; } for ( i = 0 ; i < alen ; i ++ ) val [ i ] = hand -> buffer -> data [ a -> offset + i ] ; val [ i ] = 0 ; len [ 0 ] = i ; return GRIB_SUCCESS ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[145:1]->[162:2]
dump_node                     :    -> tokens[:10]=[['{', 'size_t', 'i', '=', '0', ';', 'grib_handle', '*', 'hand', '=']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[146:5]->[146:18]
dump_node                     :     -> tokens[:10]=[['size_t', 'i', '=', '0', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[i] type=[size_t] extent=[146:5]->[146:17]
dump_node                     :      -> tokens[:10]=[['size_t', 'i', '=', '0']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[146:5]->[146:11]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[146:16]->[146:17]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[146:16]->[146:17]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[147:5]->[147:52]
dump_node                     :     -> tokens[:10]=[['grib_handle', '*', 'hand', '=', 'grib_handle_of_accessor', '(', 'a', ')', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[hand] type=[grib_handle *] extent=[147:5]->[147:51]
dump_node                     :      -> tokens[:10]=[['grib_handle', '*', 'hand', '=', 'grib_handle_of_accessor', '(', 'a', ')']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[grib_handle] type=[grib_handle] extent=[147:5]->[147:16]
dump_node                     :       -> tokens[:10]=[['grib_handle']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *] extent=[147:25]->[147:51]
dump_node                     :       -> tokens[:10]=[['grib_handle_of_accessor', '(', 'a', ')']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(*)(const grib_accessor *)] extent=[147:25]->[147:48]
dump_node                     :        -> tokens[:10]=[['grib_handle_of_accessor']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(const grib_accessor *)] extent=[147:25]->[147:48]
dump_node                     :         -> tokens[:10]=[['grib_handle_of_accessor']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[const grib_accessor *] extent=[147:49]->[147:50]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[147:49]->[147:50]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[147:49]->[147:50]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[148:5]->[148:35]
dump_node                     :     -> tokens[:10]=[['const', 'size_t', 'alen', '=', 'a', '->', 'length', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[alen] type=[const size_t] extent=[148:5]->[148:34]
dump_node                     :      -> tokens[:10]=[['const', 'size_t', 'alen', '=', 'a', '->', 'length']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[148:11]->[148:17]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[const size_t] extent=[148:25]->[148:34]
dump_node                     :       -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[148:25]->[148:34]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :        [7:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[148:25]->[148:34]
dump_node                     :         -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[148:25]->[148:26]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[148:25]->[148:26]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[150:5]->[155:6]
dump_node                     :     -> tokens[:10]=[['if', '(', 'len', '[', '0', ']', '<', '(', 'alen', '+']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[150:9]->[150:28]
dump_node                     :      -> tokens[:10]=[['len', '[', '0', ']', '<', '(', 'alen', '+', '1', ')']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[150:9]->[150:15]
dump_node                     :       -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :       [6:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[150:9]->[150:15]
dump_node                     :        -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[150:9]->[150:12]
dump_node                     :         -> tokens[:10]=[['len']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[150:9]->[150:12]
dump_node                     :          -> tokens[:10]=[['len']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[150:13]->[150:14]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.PAREN_EXPR] spelling=[] type=[size_t] extent=[150:18]->[150:28]
dump_node                     :       -> tokens[:10]=[['(', 'alen', '+', '1', ')']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[150:19]->[150:27]
dump_node                     :        -> tokens[:10]=[['alen', '+', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[150:19]->[150:23]
dump_node                     :         -> tokens[:10]=[['alen']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[150:19]->[150:23]
dump_node                     :          -> tokens[:10]=[['alen']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[150:26]->[150:27]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[150:26]->[150:27]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :     [4:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[150:30]->[155:6]
dump_node                     :      -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"unpack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[151:9]->[152:48]
dump_node                     :       -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"unpack_string: Wrong size (%zu) for %s, it contains %ld values"', ',']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[151:9]->[151:25]
dump_node                     :        -> tokens[:10]=[['grib_context_log']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[151:9]->[151:25]
dump_node                     :         -> tokens[:10]=[['grib_context_log']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[151:26]->[151:36]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[151:26]->[151:36]
dump_node                     :         -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[151:26]->[151:36]
dump_node                     :          -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[151:26]->[151:27]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[151:26]->[151:27]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[151:38]->[151:52]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[151:54]->[151:118]
dump_node                     :        -> tokens[:10]=[['"unpack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :        [7:CursorKind.STRING_LITERAL] spelling=["unpack_string: Wrong size (%zu) for %s, it contains %ld values"] type=[const char[63]] extent=[151:54]->[151:118]
dump_node                     :         -> tokens[:10]=[['"unpack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[152:17]->[152:23]
dump_node                     :        -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[152:17]->[152:23]
dump_node                     :         -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[152:17]->[152:20]
dump_node                     :          -> tokens[:10]=[['len']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[152:17]->[152:20]
dump_node                     :           -> tokens[:10]=[['len']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[152:21]->[152:22]
dump_node                     :          -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[152:25]->[152:32]
dump_node                     :        -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :        [7:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[152:25]->[152:32]
dump_node                     :         -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:25]->[152:26]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:25]->[152:26]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[152:34]->[152:47]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length', '+', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[152:34]->[152:43]
dump_node                     :         -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[152:34]->[152:43]
dump_node                     :          -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:34]->[152:35]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:34]->[152:35]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[152:46]->[152:47]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[152:46]->[152:47]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :      [5:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[153:9]->[153:19]
dump_node                     :       -> tokens[:10]=[['len', '[', '0', ']', '=', '0']]
dump_node                     :       [6:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[153:9]->[153:15]
dump_node                     :        -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[153:9]->[153:12]
dump_node                     :         -> tokens[:10]=[['len']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[153:9]->[153:12]
dump_node                     :          -> tokens[:10]=[['len']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[153:13]->[153:14]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[153:18]->[153:19]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[153:18]->[153:19]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[154:9]->[154:36]
dump_node                     :       -> tokens[:10]=[['return', 'GRIB_ARRAY_TOO_SMALL']]
dump_node                     :       [6:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[154:16]->[154:36]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[154:16]->[154:36]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.FOR_STMT] spelling=[] type=[] extent=[157:5]->[158:51]
dump_node                     :     -> tokens[:10]=[['for', '(', 'i', '=', '0', ';', 'i', '<', 'alen', ';']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[157:10]->[157:15]
dump_node                     :      -> tokens[:10]=[['i', '=', '0']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[157:10]->[157:11]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[157:14]->[157:15]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[157:14]->[157:15]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[157:17]->[157:25]
dump_node                     :      -> tokens[:10]=[['i', '<', 'alen']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[157:17]->[157:18]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[157:17]->[157:18]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[157:21]->[157:25]
dump_node                     :       -> tokens[:10]=[['alen']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[157:21]->[157:25]
dump_node                     :        -> tokens[:10]=[['alen']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t] extent=[157:27]->[157:30]
dump_node                     :      -> tokens[:10]=[['i', '++']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[157:27]->[157:28]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[char] extent=[158:9]->[158:51]
dump_node                     :      -> tokens[:10]=[['val', '[', 'i', ']', '=', 'hand', '->', 'buffer', '->', 'data']]
dump_node                     :      [5:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[158:9]->[158:15]
dump_node                     :       -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[158:9]->[158:12]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char *] extent=[158:9]->[158:12]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[158:13]->[158:14]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[158:13]->[158:14]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[158:18]->[158:51]
dump_node                     :       -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[158:18]->[158:51]
dump_node                     :        -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :        [7:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[158:18]->[158:51]
dump_node                     :         -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[158:18]->[158:36]
dump_node                     :          -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[158:18]->[158:36]
dump_node                     :           -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[158:18]->[158:30]
dump_node                     :            -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :            [11:CursorKind.MEMBER_REF_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[158:18]->[158:30]
dump_node                     :             -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :             [12:CursorKind.UNEXPOSED_EXPR] spelling=[hand] type=[grib_handle *] extent=[158:18]->[158:22]
dump_node                     :              -> tokens[:10]=[['hand']]
dump_node                     :              [13:CursorKind.DECL_REF_EXPR] spelling=[hand] type=[grib_handle *] extent=[158:18]->[158:22]
dump_node                     :               -> tokens[:10]=[['hand']]
dump_node                     :         [8:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[158:37]->[158:50]
dump_node                     :          -> tokens[:10]=[['a', '->', 'offset', '+', 'i']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[158:37]->[158:46]
dump_node                     :           -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[158:37]->[158:46]
dump_node                     :            -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :            [11:CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[158:37]->[158:46]
dump_node                     :             -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :             [12:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[158:37]->[158:38]
dump_node                     :              -> tokens[:10]=[['a']]
dump_node                     :              [13:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[158:37]->[158:38]
dump_node                     :               -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[158:49]->[158:50]
dump_node                     :           -> tokens[:10]=[['i']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[158:49]->[158:50]
dump_node                     :            -> tokens[:10]=[['i']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[char] extent=[159:5]->[159:15]
dump_node                     :     -> tokens[:10]=[['val', '[', 'i', ']', '=', '0']]
dump_node                     :     [4:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[159:5]->[159:11]
dump_node                     :      -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[159:5]->[159:8]
dump_node                     :       -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char *] extent=[159:5]->[159:8]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[159:9]->[159:10]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[159:9]->[159:10]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[159:14]->[159:15]
dump_node                     :      -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[159:14]->[159:15]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[160:5]->[160:15]
dump_node                     :     -> tokens[:10]=[['len', '[', '0', ']', '=', 'i']]
dump_node                     :     [4:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[160:5]->[160:11]
dump_node                     :      -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[160:5]->[160:8]
dump_node                     :       -> tokens[:10]=[['len']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[160:5]->[160:8]
dump_node                     :        -> tokens[:10]=[['len']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[160:9]->[160:10]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[160:14]->[160:15]
dump_node                     :      -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[160:14]->[160:15]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[161:5]->[161:24]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_SUCCESS']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[161:12]->[161:24]
dump_node                     :      -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[146:5]->[146:18]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] size_t i = 0 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[i] type=[size_t] extent=[146:5]->[146:17]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] size_t i = 0
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[146:16]->[146:17]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[146:16]->[146:17]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[size_t i]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[0]
parse_DECL_node               : [OUT][VariableDeclaration] size_t i = 0;
parse_STMT_node               : [OUT][CodeObjects] size_t i = 0;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[147:5]->[147:52]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] grib_handle * hand = grib_handle_of_accessor ( a ) ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[hand] type=[grib_handle *] extent=[147:5]->[147:51]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] grib_handle * hand = grib_handle_of_accessor ( a )
parse_VAR_DECL                : Ignoring child spelling=[grib_handle] type=[grib_handle] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *] extent=[147:25]->[147:51]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_handle_of_accessor ( a )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(*)(const grib_accessor *)] extent=[147:25]->[147:48]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_handle_of_accessor
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(const grib_accessor *)] extent=[147:25]->[147:48]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_handle_of_accessor
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_handle_of_accessor
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_handle_of_accessor
parse_CALL_EXPR               : cfunc_name=[grib_handle_of_accessor] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[const grib_accessor *] extent=[147:49]->[147:50]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[147:49]->[147:50]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[147:49]->[147:50]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][FunctionCall] grib_handle_of_accessor(a);
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[grib_handle* hand]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.function_call.FunctionCall'>.__NAME__] as_string=[grib_handle_of_accessor(a);]
parse_DECL_node               : [OUT][VariableDeclaration] grib_handle* hand = grib_handle_of_accessor(a);
parse_STMT_node               : [OUT][CodeObjects] grib_handle* hand = grib_handle_of_accessor(a);
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[148:5]->[148:35]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] const size_t alen = a -> length ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[alen] type=[const size_t] extent=[148:5]->[148:34]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] const size_t alen = a -> length
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[const size_t] extent=[148:25]->[148:34]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[148:25]->[148:34]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[148:25]->[148:34]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[const size_t alen]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.struct_member_access.StructMemberAccess'>.__NAME__] as_string=[a->length]
parse_DECL_node               : [OUT][VariableDeclaration] const size_t alen = a->length;
parse_STMT_node               : [OUT][CodeObjects] const size_t alen = a->length;
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[150:5]->[155:6]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( len [ 0 ] < ( alen + 1 ) ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "unpack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_ARRAY_TOO_SMALL ; }
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[150:9]->[150:28]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] len [ 0 ] < ( alen + 1 )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[150:9]->[150:15]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.PAREN_EXPR] spelling=[] type=[size_t] extent=[150:18]->[150:28]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[150:9]->[150:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[150:9]->[150:15]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[150:9]->[150:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[150:9]->[150:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[150:13]->[150:14]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_ast_node                : [CursorKind.PAREN_EXPR] spelling=[] type=[size_t] extent=[150:18]->[150:28]
parse_EXPR_node               : [IN] [CursorKind.PAREN_EXPR] ( alen + 1 )
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[150:19]->[150:27]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] alen + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[150:19]->[150:23]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[150:26]->[150:27]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[150:19]->[150:23]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] alen
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[150:19]->[150:23]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[150:26]->[150:27]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[150:26]->[150:27]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[alen] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] alen + 1
parse_EXPR_node               : [OUT][ParenExpression] (alen + 1)
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[len[0]] operator_token=[<] right_operand_cvalue=[(alen + 1)]
parse_EXPR_node               : [OUT][BinaryOperation] len[0] < (alen + 1)
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[150:30]->[155:6]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { grib_context_log ( a -> context , GRIB_LOG_ERROR , "unpack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_ARRAY_TOO_SMALL ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[150:30]->[155:6]
dump_node                     :    -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"unpack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[151:9]->[152:48]
dump_node                     :     -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"unpack_string: Wrong size (%zu) for %s, it contains %ld values"', ',']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[151:9]->[151:25]
dump_node                     :      -> tokens[:10]=[['grib_context_log']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[151:9]->[151:25]
dump_node                     :       -> tokens[:10]=[['grib_context_log']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[151:26]->[151:36]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[151:26]->[151:36]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[151:26]->[151:36]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[151:26]->[151:27]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[151:26]->[151:27]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[151:38]->[151:52]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[151:54]->[151:118]
dump_node                     :      -> tokens[:10]=[['"unpack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :      [5:CursorKind.STRING_LITERAL] spelling=["unpack_string: Wrong size (%zu) for %s, it contains %ld values"] type=[const char[63]] extent=[151:54]->[151:118]
dump_node                     :       -> tokens[:10]=[['"unpack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[152:17]->[152:23]
dump_node                     :      -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :      [5:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[152:17]->[152:23]
dump_node                     :       -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[152:17]->[152:20]
dump_node                     :        -> tokens[:10]=[['len']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[152:17]->[152:20]
dump_node                     :         -> tokens[:10]=[['len']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[152:21]->[152:22]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[152:25]->[152:32]
dump_node                     :      -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :      [5:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[152:25]->[152:32]
dump_node                     :       -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:25]->[152:26]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:25]->[152:26]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[152:34]->[152:47]
dump_node                     :      -> tokens[:10]=[['a', '->', 'length', '+', '1']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[152:34]->[152:43]
dump_node                     :       -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[152:34]->[152:43]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:34]->[152:35]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[152:34]->[152:35]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[152:46]->[152:47]
dump_node                     :       -> tokens[:10]=[['1']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[152:46]->[152:47]
dump_node                     :        -> tokens[:10]=[['1']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[153:9]->[153:19]
dump_node                     :     -> tokens[:10]=[['len', '[', '0', ']', '=', '0']]
dump_node                     :     [4:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[153:9]->[153:15]
dump_node                     :      -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[153:9]->[153:12]
dump_node                     :       -> tokens[:10]=[['len']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[153:9]->[153:12]
dump_node                     :        -> tokens[:10]=[['len']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[153:13]->[153:14]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[153:18]->[153:19]
dump_node                     :      -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[153:18]->[153:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[154:9]->[154:36]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_ARRAY_TOO_SMALL']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[154:16]->[154:36]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[154:16]->[154:36]
dump_node                     :       -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[151:9]->[152:48]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_log ( a -> context , GRIB_LOG_ERROR , "unpack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[151:9]->[151:25]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_log
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[151:9]->[151:25]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_CALL_EXPR               : cfunc_name=[grib_context_log] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[151:26]->[151:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[151:26]->[151:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[151:26]->[151:36]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[151:38]->[151:52]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_LOG_ERROR] kind=[CursorKind.MACRO_INSTANTIATION] extent=[151:38 -> 151:52]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_LOG_ERROR] type=[] extent=[151:38]->[151:52]
dump_node                     :    -> tokens[:10]=[['GRIB_LOG_ERROR']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[151:38 -> 151:52]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[151:38]->[151:52]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[151:54]->[151:118]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] "unpack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_ast_node                : [CursorKind.STRING_LITERAL] spelling=["unpack_string: Wrong size (%zu) for %s, it contains %ld values"] type=[const char[63]] extent=[151:54]->[151:118]
parse_EXPR_node               : [IN] [CursorKind.STRING_LITERAL] "unpack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_EXPR_node               : [OUT][Literal] "unpack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_EXPR_node               : [OUT][Literal] "unpack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[152:17]->[152:23]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[152:17]->[152:23]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[152:17]->[152:20]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[152:17]->[152:20]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[152:21]->[152:22]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[152:25]->[152:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> name
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[152:25]->[152:32]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> name
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[name] type=[const char *] tokens=[['a', '->', 'name']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'name']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->name]
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[152:34]->[152:47]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> length + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[152:34]->[152:43]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[152:46]->[152:47]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[152:34]->[152:43]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[152:34]->[152:43]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[152:46]->[152:47]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[152:46]->[152:47]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->length] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] a->length + 1
parse_EXPR_node               : [OUT][FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[153:9]->[153:19]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] len [ 0 ] = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[153:9]->[153:15]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[153:18]->[153:19]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[153:9]->[153:15]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[153:9]->[153:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[153:9]->[153:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[153:13]->[153:14]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[153:18]->[153:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[153:18]->[153:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[len[0]] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] len[0] = 0;
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[154:9]->[154:36]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_ARRAY_TOO_SMALL
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_ARRAY_TOO_SMALL']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_ARRAY_TOO_SMALL;
parse_STMT_node               : [OUT][CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_ARRAY_TOO_SMALL;
}
parse_STMT_node               : [OUT][IfStatement] if (len[0] < (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_ARRAY_TOO_SMALL;
}
parse_ast_node                : [CursorKind.FOR_STMT] spelling=[] type=[] extent=[157:5]->[158:51]
parse_STMT_node               : [IN] [CursorKind.FOR_STMT] for ( i = 0 ; i < alen ; i ++ ) val [ i ] = hand -> buffer -> data [ a -> offset + i ]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[157:10]->[157:15]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[157:10]->[157:11]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[157:14]->[157:15]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[157:10]->[157:11]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[157:14]->[157:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[157:14]->[157:15]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] i = 0;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[157:17]->[157:25]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i < alen
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[157:17]->[157:18]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[157:21]->[157:25]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[157:17]->[157:18]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[157:17]->[157:18]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[157:21]->[157:25]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] alen
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[157:21]->[157:25]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[<] right_operand_cvalue=[alen]
parse_EXPR_node               : [OUT][BinaryOperation] i < alen
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t] extent=[157:27]->[157:30]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] i ++
parse_UNARY_OPERATOR          : op_position=[postfix] op_value=[++]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[157:27]->[157:28]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][UnaryOperation] i++;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[char] extent=[158:9]->[158:51]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] val [ i ] = hand -> buffer -> data [ a -> offset + i ]
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[158:9]->[158:15]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[158:18]->[158:51]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[158:9]->[158:15]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[158:9]->[158:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char *] extent=[158:9]->[158:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[158:13]->[158:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[158:13]->[158:14]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[158:18]->[158:51]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] hand -> buffer -> data [ a -> offset + i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[158:18]->[158:51]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] hand -> buffer -> data [ a -> offset + i ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[158:18]->[158:51]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] hand -> buffer -> data [ a -> offset + i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[158:18]->[158:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] hand -> buffer -> data
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[158:18]->[158:36]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] hand -> buffer -> data
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[data] type=[unsigned char *] tokens=[['hand', '->', 'buffer', '->', 'data']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'buffer', '->', 'data']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'data']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[hand->buffer->data]
parse_EXPR_node               : [OUT][StructMemberAccess] hand->buffer->data
parse_EXPR_node               : [OUT][StructMemberAccess] hand->buffer->data
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[158:37]->[158:50]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> offset + i
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[158:37]->[158:46]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[158:49]->[158:50]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[158:37]->[158:46]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> offset
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[158:37]->[158:46]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> offset
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[158:37]->[158:46]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> offset
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[offset] type=[long] tokens=[['a', '->', 'offset']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'offset']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->offset]
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[158:49]->[158:50]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[158:49]->[158:50]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->offset] operator_token=[+] right_operand_cvalue=[i]
parse_EXPR_node               : [OUT][BinaryOperation] a->offset + i
parse_EXPR_node               : [OUT][ArrayAccess] hand->buffer->data[a->offset + i]
parse_EXPR_node               : [OUT][ArrayAccess] hand->buffer->data[a->offset + i]
parse_EXPR_node               : [OUT][ArrayAccess] hand->buffer->data[a->offset + i]
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[val[i]] operator_token=[=] right_operand_cvalue=[hand->buffer->data[a->offset + i]]
parse_EXPR_node               : [OUT][BinaryOperation] val[i] = hand->buffer->data[a->offset + i];
parse_STMT_node               : [OUT][ForStatement] for(i = 0;i < alen;i++)
val[i] = hand->buffer->data[a->offset + i];
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[char] extent=[159:5]->[159:15]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] val [ i ] = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[159:5]->[159:11]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[159:14]->[159:15]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[159:5]->[159:11]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[159:5]->[159:8]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char *] extent=[159:5]->[159:8]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[159:9]->[159:10]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[159:9]->[159:10]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[159:14]->[159:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[159:14]->[159:15]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[val[i]] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] val[i] = 0;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[160:5]->[160:15]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] len [ 0 ] = i
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[160:5]->[160:11]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[160:14]->[160:15]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[160:5]->[160:11]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[160:5]->[160:8]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[160:5]->[160:8]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[160:9]->[160:10]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[160:14]->[160:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[160:14]->[160:15]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[len[0]] operator_token=[=] right_operand_cvalue=[i]
parse_EXPR_node               : [OUT][BinaryOperation] len[0] = i;
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[161:5]->[161:24]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_SUCCESS
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_SUCCESS']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_SUCCESS;
parse_STMT_node               : [OUT][CompoundStatement] {
size_t i = 0;
grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = a->length;
if (len[0] < (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_ARRAY_TOO_SMALL;
}
for(i = 0;i < alen;i++)
val[i] = hand->buffer->data[a->offset + i];
val[i] = 0;
len[0] = i;
return 
GRIB_SUCCESS;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int unpack_string(grib_accessor* a, char* val, size_t* len)
                                {
                                size_t i = 0;
                                grib_handle* hand = grib_handle_of_accessor(a);
                                const size_t alen = a->length;
                                if (len[0] < (alen + 1))
                                {
                                grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
                                len[0] = 0;
                                return 
                                GRIB_ARRAY_TOO_SMALL;
                                }
                                for(i = 0;i < alen;i++)
                                val[i] = hand->buffer->data[a->offset + i];
                                val[i] = 0;
                                len[0] = i;
                                return 
                                GRIB_SUCCESS;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[165:1]->[184:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { size_t i = 0 ; grib_handle * hand = grib_handle_of_accessor ( a ) ; const size_t alen = a -> length ; if ( len [ 0 ] > ( alen + 1 ) ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "pack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_BUFFER_TOO_SMALL ; } for ( i = 0 ; i < alen ; i ++ ) { if ( i < len [ 0 ] ) hand -> buffer -> data [ a -> offset + i ] = val [ i ] ; else hand -> buffer -> data [ a -> offset + i ] = 0 ; } return GRIB_SUCCESS ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[165:1]->[184:2]
dump_node                     :    -> tokens[:10]=[['{', 'size_t', 'i', '=', '0', ';', 'grib_handle', '*', 'hand', '=']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[166:5]->[166:18]
dump_node                     :     -> tokens[:10]=[['size_t', 'i', '=', '0', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[i] type=[size_t] extent=[166:5]->[166:17]
dump_node                     :      -> tokens[:10]=[['size_t', 'i', '=', '0']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[166:5]->[166:11]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[166:16]->[166:17]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[166:16]->[166:17]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[167:5]->[167:52]
dump_node                     :     -> tokens[:10]=[['grib_handle', '*', 'hand', '=', 'grib_handle_of_accessor', '(', 'a', ')', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[hand] type=[grib_handle *] extent=[167:5]->[167:51]
dump_node                     :      -> tokens[:10]=[['grib_handle', '*', 'hand', '=', 'grib_handle_of_accessor', '(', 'a', ')']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[grib_handle] type=[grib_handle] extent=[167:5]->[167:16]
dump_node                     :       -> tokens[:10]=[['grib_handle']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *] extent=[167:25]->[167:51]
dump_node                     :       -> tokens[:10]=[['grib_handle_of_accessor', '(', 'a', ')']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(*)(const grib_accessor *)] extent=[167:25]->[167:48]
dump_node                     :        -> tokens[:10]=[['grib_handle_of_accessor']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(const grib_accessor *)] extent=[167:25]->[167:48]
dump_node                     :         -> tokens[:10]=[['grib_handle_of_accessor']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[const grib_accessor *] extent=[167:49]->[167:50]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[167:49]->[167:50]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[167:49]->[167:50]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[168:5]->[168:35]
dump_node                     :     -> tokens[:10]=[['const', 'size_t', 'alen', '=', 'a', '->', 'length', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[alen] type=[const size_t] extent=[168:5]->[168:34]
dump_node                     :      -> tokens[:10]=[['const', 'size_t', 'alen', '=', 'a', '->', 'length']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[168:11]->[168:17]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[const size_t] extent=[168:25]->[168:34]
dump_node                     :       -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[168:25]->[168:34]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :        [7:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[168:25]->[168:34]
dump_node                     :         -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[168:25]->[168:26]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[168:25]->[168:26]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[169:5]->[174:6]
dump_node                     :     -> tokens[:10]=[['if', '(', 'len', '[', '0', ']', '>', '(', 'alen', '+']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[169:9]->[169:28]
dump_node                     :      -> tokens[:10]=[['len', '[', '0', ']', '>', '(', 'alen', '+', '1', ')']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[169:9]->[169:15]
dump_node                     :       -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :       [6:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[169:9]->[169:15]
dump_node                     :        -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[169:9]->[169:12]
dump_node                     :         -> tokens[:10]=[['len']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[169:9]->[169:12]
dump_node                     :          -> tokens[:10]=[['len']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[169:13]->[169:14]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.PAREN_EXPR] spelling=[] type=[size_t] extent=[169:18]->[169:28]
dump_node                     :       -> tokens[:10]=[['(', 'alen', '+', '1', ')']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[169:19]->[169:27]
dump_node                     :        -> tokens[:10]=[['alen', '+', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[169:19]->[169:23]
dump_node                     :         -> tokens[:10]=[['alen']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[169:19]->[169:23]
dump_node                     :          -> tokens[:10]=[['alen']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[169:26]->[169:27]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[169:26]->[169:27]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :     [4:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[169:30]->[174:6]
dump_node                     :      -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"pack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[170:9]->[171:112]
dump_node                     :       -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"pack_string: Wrong size (%zu) for %s, it contains %ld values"', ',']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[170:9]->[170:25]
dump_node                     :        -> tokens[:10]=[['grib_context_log']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[170:9]->[170:25]
dump_node                     :         -> tokens[:10]=[['grib_context_log']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[170:26]->[170:36]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[170:26]->[170:36]
dump_node                     :         -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[170:26]->[170:36]
dump_node                     :          -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[170:26]->[170:27]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[170:26]->[170:27]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[170:38]->[170:52]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[171:17]->[171:79]
dump_node                     :        -> tokens[:10]=[['"pack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :        [7:CursorKind.STRING_LITERAL] spelling=["pack_string: Wrong size (%zu) for %s, it contains %ld values"] type=[const char[61]] extent=[171:17]->[171:79]
dump_node                     :         -> tokens[:10]=[['"pack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[171:81]->[171:87]
dump_node                     :        -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[171:81]->[171:87]
dump_node                     :         -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[171:81]->[171:84]
dump_node                     :          -> tokens[:10]=[['len']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[171:81]->[171:84]
dump_node                     :           -> tokens[:10]=[['len']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[171:85]->[171:86]
dump_node                     :          -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[171:89]->[171:96]
dump_node                     :        -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :        [7:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[171:89]->[171:96]
dump_node                     :         -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:89]->[171:90]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:89]->[171:90]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[171:98]->[171:111]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length', '+', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[171:98]->[171:107]
dump_node                     :         -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[171:98]->[171:107]
dump_node                     :          -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:98]->[171:99]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:98]->[171:99]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[171:110]->[171:111]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[171:110]->[171:111]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :      [5:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[172:9]->[172:19]
dump_node                     :       -> tokens[:10]=[['len', '[', '0', ']', '=', '0']]
dump_node                     :       [6:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[172:9]->[172:15]
dump_node                     :        -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[172:9]->[172:12]
dump_node                     :         -> tokens[:10]=[['len']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[172:9]->[172:12]
dump_node                     :          -> tokens[:10]=[['len']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[172:13]->[172:14]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[172:18]->[172:19]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[172:18]->[172:19]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[173:9]->[173:37]
dump_node                     :       -> tokens[:10]=[['return', 'GRIB_BUFFER_TOO_SMALL']]
dump_node                     :       [6:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[173:16]->[173:37]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[173:16]->[173:37]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.FOR_STMT] spelling=[] type=[] extent=[176:5]->[181:6]
dump_node                     :     -> tokens[:10]=[['for', '(', 'i', '=', '0', ';', 'i', '<', 'alen', ';']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[176:10]->[176:15]
dump_node                     :      -> tokens[:10]=[['i', '=', '0']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[176:10]->[176:11]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[176:14]->[176:15]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[176:14]->[176:15]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[176:17]->[176:25]
dump_node                     :      -> tokens[:10]=[['i', '<', 'alen']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[176:17]->[176:18]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[176:17]->[176:18]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[176:21]->[176:25]
dump_node                     :       -> tokens[:10]=[['alen']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[176:21]->[176:25]
dump_node                     :        -> tokens[:10]=[['alen']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t] extent=[176:27]->[176:30]
dump_node                     :      -> tokens[:10]=[['i', '++']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[176:27]->[176:28]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :     [4:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[176:32]->[181:6]
dump_node                     :      -> tokens[:10]=[['{', 'if', '(', 'i', '<', 'len', '[', '0', ']', ')']]
dump_node                     :      [5:CursorKind.IF_STMT] spelling=[] type=[] extent=[177:9]->[180:50]
dump_node                     :       -> tokens[:10]=[['if', '(', 'i', '<', 'len', '[', '0', ']', ')', 'hand']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[177:13]->[177:23]
dump_node                     :        -> tokens[:10]=[['i', '<', 'len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[177:13]->[177:14]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[177:13]->[177:14]
dump_node                     :          -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[177:17]->[177:23]
dump_node                     :         -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :         [8:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[177:17]->[177:23]
dump_node                     :          -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[177:17]->[177:20]
dump_node                     :           -> tokens[:10]=[['len']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[177:17]->[177:20]
dump_node                     :            -> tokens[:10]=[['len']]
dump_node                     :          [9:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[177:21]->[177:22]
dump_node                     :           -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned char] extent=[178:13]->[178:55]
dump_node                     :        -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :        [7:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[178:13]->[178:46]
dump_node                     :         -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[178:13]->[178:31]
dump_node                     :          -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[178:13]->[178:31]
dump_node                     :           -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[178:13]->[178:25]
dump_node                     :            -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :            [11:CursorKind.MEMBER_REF_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[178:13]->[178:25]
dump_node                     :             -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :             [12:CursorKind.UNEXPOSED_EXPR] spelling=[hand] type=[grib_handle *] extent=[178:13]->[178:17]
dump_node                     :              -> tokens[:10]=[['hand']]
dump_node                     :              [13:CursorKind.DECL_REF_EXPR] spelling=[hand] type=[grib_handle *] extent=[178:13]->[178:17]
dump_node                     :               -> tokens[:10]=[['hand']]
dump_node                     :         [8:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[178:32]->[178:45]
dump_node                     :          -> tokens[:10]=[['a', '->', 'offset', '+', 'i']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[178:32]->[178:41]
dump_node                     :           -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[178:32]->[178:41]
dump_node                     :            -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :            [11:CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[178:32]->[178:41]
dump_node                     :             -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :             [12:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[178:32]->[178:33]
dump_node                     :              -> tokens[:10]=[['a']]
dump_node                     :              [13:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[178:32]->[178:33]
dump_node                     :               -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[178:44]->[178:45]
dump_node                     :           -> tokens[:10]=[['i']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[178:44]->[178:45]
dump_node                     :            -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[178:49]->[178:55]
dump_node                     :         -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[178:49]->[178:55]
dump_node                     :          -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :          [9:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[const char] extent=[178:49]->[178:55]
dump_node                     :           -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[const char *] extent=[178:49]->[178:52]
dump_node                     :            -> tokens[:10]=[['val']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[val] type=[const char *] extent=[178:49]->[178:52]
dump_node                     :             -> tokens[:10]=[['val']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[178:53]->[178:54]
dump_node                     :            -> tokens[:10]=[['i']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[178:53]->[178:54]
dump_node                     :             -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned char] extent=[180:13]->[180:50]
dump_node                     :        -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :        [7:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[180:13]->[180:46]
dump_node                     :         -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[180:13]->[180:31]
dump_node                     :          -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[180:13]->[180:31]
dump_node                     :           -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[180:13]->[180:25]
dump_node                     :            -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :            [11:CursorKind.MEMBER_REF_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[180:13]->[180:25]
dump_node                     :             -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :             [12:CursorKind.UNEXPOSED_EXPR] spelling=[hand] type=[grib_handle *] extent=[180:13]->[180:17]
dump_node                     :              -> tokens[:10]=[['hand']]
dump_node                     :              [13:CursorKind.DECL_REF_EXPR] spelling=[hand] type=[grib_handle *] extent=[180:13]->[180:17]
dump_node                     :               -> tokens[:10]=[['hand']]
dump_node                     :         [8:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[180:32]->[180:45]
dump_node                     :          -> tokens[:10]=[['a', '->', 'offset', '+', 'i']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[180:32]->[180:41]
dump_node                     :           -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[180:32]->[180:41]
dump_node                     :            -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :            [11:CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[180:32]->[180:41]
dump_node                     :             -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :             [12:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[180:32]->[180:33]
dump_node                     :              -> tokens[:10]=[['a']]
dump_node                     :              [13:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[180:32]->[180:33]
dump_node                     :               -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[180:44]->[180:45]
dump_node                     :           -> tokens[:10]=[['i']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[180:44]->[180:45]
dump_node                     :            -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[180:49]->[180:50]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[180:49]->[180:50]
dump_node                     :          -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[183:5]->[183:24]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_SUCCESS']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[183:12]->[183:24]
dump_node                     :      -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[166:5]->[166:18]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] size_t i = 0 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[i] type=[size_t] extent=[166:5]->[166:17]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] size_t i = 0
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[166:16]->[166:17]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[166:16]->[166:17]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[size_t i]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[0]
parse_DECL_node               : [OUT][VariableDeclaration] size_t i = 0;
parse_STMT_node               : [OUT][CodeObjects] size_t i = 0;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[167:5]->[167:52]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] grib_handle * hand = grib_handle_of_accessor ( a ) ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[hand] type=[grib_handle *] extent=[167:5]->[167:51]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] grib_handle * hand = grib_handle_of_accessor ( a )
parse_VAR_DECL                : Ignoring child spelling=[grib_handle] type=[grib_handle] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *] extent=[167:25]->[167:51]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_handle_of_accessor ( a )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(*)(const grib_accessor *)] extent=[167:25]->[167:48]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_handle_of_accessor
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_handle_of_accessor] type=[grib_handle *(const grib_accessor *)] extent=[167:25]->[167:48]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_handle_of_accessor
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_handle_of_accessor
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_handle_of_accessor
parse_CALL_EXPR               : cfunc_name=[grib_handle_of_accessor] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[const grib_accessor *] extent=[167:49]->[167:50]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[167:49]->[167:50]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[167:49]->[167:50]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][FunctionCall] grib_handle_of_accessor(a);
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[grib_handle* hand]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.function_call.FunctionCall'>.__NAME__] as_string=[grib_handle_of_accessor(a);]
parse_DECL_node               : [OUT][VariableDeclaration] grib_handle* hand = grib_handle_of_accessor(a);
parse_STMT_node               : [OUT][CodeObjects] grib_handle* hand = grib_handle_of_accessor(a);
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[168:5]->[168:35]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] const size_t alen = a -> length ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[alen] type=[const size_t] extent=[168:5]->[168:34]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] const size_t alen = a -> length
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[const size_t] extent=[168:25]->[168:34]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[168:25]->[168:34]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[168:25]->[168:34]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[const size_t alen]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.struct_member_access.StructMemberAccess'>.__NAME__] as_string=[a->length]
parse_DECL_node               : [OUT][VariableDeclaration] const size_t alen = a->length;
parse_STMT_node               : [OUT][CodeObjects] const size_t alen = a->length;
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[169:5]->[174:6]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( len [ 0 ] > ( alen + 1 ) ) { grib_context_log ( a -> context , GRIB_LOG_ERROR , "pack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_BUFFER_TOO_SMALL ; }
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[169:9]->[169:28]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] len [ 0 ] > ( alen + 1 )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[169:9]->[169:15]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.PAREN_EXPR] spelling=[] type=[size_t] extent=[169:18]->[169:28]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[169:9]->[169:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[169:9]->[169:15]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[169:9]->[169:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[169:9]->[169:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[169:13]->[169:14]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_ast_node                : [CursorKind.PAREN_EXPR] spelling=[] type=[size_t] extent=[169:18]->[169:28]
parse_EXPR_node               : [IN] [CursorKind.PAREN_EXPR] ( alen + 1 )
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[169:19]->[169:27]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] alen + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[169:19]->[169:23]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[169:26]->[169:27]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[169:19]->[169:23]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] alen
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[169:19]->[169:23]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[169:26]->[169:27]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[169:26]->[169:27]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[alen] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] alen + 1
parse_EXPR_node               : [OUT][ParenExpression] (alen + 1)
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[len[0]] operator_token=[>] right_operand_cvalue=[(alen + 1)]
parse_EXPR_node               : [OUT][BinaryOperation] len[0] > (alen + 1)
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[169:30]->[174:6]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { grib_context_log ( a -> context , GRIB_LOG_ERROR , "pack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 ) ; len [ 0 ] = 0 ; return GRIB_BUFFER_TOO_SMALL ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[169:30]->[174:6]
dump_node                     :    -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"pack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[170:9]->[171:112]
dump_node                     :     -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"pack_string: Wrong size (%zu) for %s, it contains %ld values"', ',']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[170:9]->[170:25]
dump_node                     :      -> tokens[:10]=[['grib_context_log']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[170:9]->[170:25]
dump_node                     :       -> tokens[:10]=[['grib_context_log']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[170:26]->[170:36]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[170:26]->[170:36]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[170:26]->[170:36]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[170:26]->[170:27]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[170:26]->[170:27]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[170:38]->[170:52]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[171:17]->[171:79]
dump_node                     :      -> tokens[:10]=[['"pack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :      [5:CursorKind.STRING_LITERAL] spelling=["pack_string: Wrong size (%zu) for %s, it contains %ld values"] type=[const char[61]] extent=[171:17]->[171:79]
dump_node                     :       -> tokens[:10]=[['"pack_string: Wrong size (%zu) for %s, it contains %ld values"']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[171:81]->[171:87]
dump_node                     :      -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :      [5:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[171:81]->[171:87]
dump_node                     :       -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[171:81]->[171:84]
dump_node                     :        -> tokens[:10]=[['len']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[171:81]->[171:84]
dump_node                     :         -> tokens[:10]=[['len']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[171:85]->[171:86]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[171:89]->[171:96]
dump_node                     :      -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :      [5:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[171:89]->[171:96]
dump_node                     :       -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:89]->[171:90]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:89]->[171:90]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[171:98]->[171:111]
dump_node                     :      -> tokens[:10]=[['a', '->', 'length', '+', '1']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[171:98]->[171:107]
dump_node                     :       -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[171:98]->[171:107]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:98]->[171:99]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[171:98]->[171:99]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[171:110]->[171:111]
dump_node                     :       -> tokens[:10]=[['1']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[171:110]->[171:111]
dump_node                     :        -> tokens[:10]=[['1']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[172:9]->[172:19]
dump_node                     :     -> tokens[:10]=[['len', '[', '0', ']', '=', '0']]
dump_node                     :     [4:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[172:9]->[172:15]
dump_node                     :      -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[172:9]->[172:12]
dump_node                     :       -> tokens[:10]=[['len']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[172:9]->[172:12]
dump_node                     :        -> tokens[:10]=[['len']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[172:13]->[172:14]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[172:18]->[172:19]
dump_node                     :      -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[172:18]->[172:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[173:9]->[173:37]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_BUFFER_TOO_SMALL']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[173:16]->[173:37]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[173:16]->[173:37]
dump_node                     :       -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[170:9]->[171:112]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_log ( a -> context , GRIB_LOG_ERROR , "pack_string: Wrong size (%zu) for %s, it contains %ld values" , len [ 0 ] , a -> name , a -> length + 1 )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[170:9]->[170:25]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_log
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[170:9]->[170:25]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_CALL_EXPR               : cfunc_name=[grib_context_log] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[170:26]->[170:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[170:26]->[170:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[170:26]->[170:36]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[170:38]->[170:52]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_LOG_ERROR] kind=[CursorKind.MACRO_INSTANTIATION] extent=[170:38 -> 170:52]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_LOG_ERROR] type=[] extent=[170:38]->[170:52]
dump_node                     :    -> tokens[:10]=[['GRIB_LOG_ERROR']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[170:38 -> 170:52]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[170:38]->[170:52]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[171:17]->[171:79]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] "pack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_ast_node                : [CursorKind.STRING_LITERAL] spelling=["pack_string: Wrong size (%zu) for %s, it contains %ld values"] type=[const char[61]] extent=[171:17]->[171:79]
parse_EXPR_node               : [IN] [CursorKind.STRING_LITERAL] "pack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_EXPR_node               : [OUT][Literal] "pack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_EXPR_node               : [OUT][Literal] "pack_string: Wrong size (%zu) for %s, it contains %ld values"
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[171:81]->[171:87]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[171:81]->[171:87]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[171:81]->[171:84]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[171:81]->[171:84]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[171:85]->[171:86]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[171:89]->[171:96]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> name
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[171:89]->[171:96]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> name
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[name] type=[const char *] tokens=[['a', '->', 'name']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'name']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->name]
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[171:98]->[171:111]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> length + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[171:98]->[171:107]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[171:110]->[171:111]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[171:98]->[171:107]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[171:98]->[171:107]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[171:110]->[171:111]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[171:110]->[171:111]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->length] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] a->length + 1
parse_EXPR_node               : [OUT][FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[172:9]->[172:19]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] len [ 0 ] = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[172:9]->[172:15]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[172:18]->[172:19]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[172:9]->[172:15]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[172:9]->[172:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[172:9]->[172:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[172:13]->[172:14]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[172:18]->[172:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[172:18]->[172:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[len[0]] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] len[0] = 0;
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[173:9]->[173:37]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_BUFFER_TOO_SMALL
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_BUFFER_TOO_SMALL']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_BUFFER_TOO_SMALL;
parse_STMT_node               : [OUT][CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_BUFFER_TOO_SMALL;
}
parse_STMT_node               : [OUT][IfStatement] if (len[0] > (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_BUFFER_TOO_SMALL;
}
parse_ast_node                : [CursorKind.FOR_STMT] spelling=[] type=[] extent=[176:5]->[181:6]
parse_STMT_node               : [IN] [CursorKind.FOR_STMT] for ( i = 0 ; i < alen ; i ++ ) { if ( i < len [ 0 ] ) hand -> buffer -> data [ a -> offset + i ] = val [ i ] ; else hand -> buffer -> data [ a -> offset + i ] = 0 ; }
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[176:10]->[176:15]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[176:10]->[176:11]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[176:14]->[176:15]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[176:10]->[176:11]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[176:14]->[176:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[176:14]->[176:15]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] i = 0;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[176:17]->[176:25]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i < alen
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[176:17]->[176:18]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[176:21]->[176:25]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[176:17]->[176:18]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[176:17]->[176:18]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[176:21]->[176:25]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] alen
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[alen] type=[const size_t] extent=[176:21]->[176:25]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[<] right_operand_cvalue=[alen]
parse_EXPR_node               : [OUT][BinaryOperation] i < alen
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t] extent=[176:27]->[176:30]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] i ++
parse_UNARY_OPERATOR          : op_position=[postfix] op_value=[++]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[176:27]->[176:28]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][UnaryOperation] i++;
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[176:32]->[181:6]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { if ( i < len [ 0 ] ) hand -> buffer -> data [ a -> offset + i ] = val [ i ] ; else hand -> buffer -> data [ a -> offset + i ] = 0 ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[176:32]->[181:6]
dump_node                     :    -> tokens[:10]=[['{', 'if', '(', 'i', '<', 'len', '[', '0', ']', ')']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[177:9]->[180:50]
dump_node                     :     -> tokens[:10]=[['if', '(', 'i', '<', 'len', '[', '0', ']', ')', 'hand']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[177:13]->[177:23]
dump_node                     :      -> tokens[:10]=[['i', '<', 'len', '[', '0', ']']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[177:13]->[177:14]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[177:13]->[177:14]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[177:17]->[177:23]
dump_node                     :       -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :       [6:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[177:17]->[177:23]
dump_node                     :        -> tokens[:10]=[['len', '[', '0', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[177:17]->[177:20]
dump_node                     :         -> tokens[:10]=[['len']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[177:17]->[177:20]
dump_node                     :          -> tokens[:10]=[['len']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[177:21]->[177:22]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned char] extent=[178:13]->[178:55]
dump_node                     :      -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :      [5:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[178:13]->[178:46]
dump_node                     :       -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[178:13]->[178:31]
dump_node                     :        -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :        [7:CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[178:13]->[178:31]
dump_node                     :         -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[178:13]->[178:25]
dump_node                     :          -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[178:13]->[178:25]
dump_node                     :           -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[hand] type=[grib_handle *] extent=[178:13]->[178:17]
dump_node                     :            -> tokens[:10]=[['hand']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[hand] type=[grib_handle *] extent=[178:13]->[178:17]
dump_node                     :             -> tokens[:10]=[['hand']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[178:32]->[178:45]
dump_node                     :        -> tokens[:10]=[['a', '->', 'offset', '+', 'i']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[178:32]->[178:41]
dump_node                     :         -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[178:32]->[178:41]
dump_node                     :          -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[178:32]->[178:41]
dump_node                     :           -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[178:32]->[178:33]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[178:32]->[178:33]
dump_node                     :             -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[178:44]->[178:45]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[178:44]->[178:45]
dump_node                     :          -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[178:49]->[178:55]
dump_node                     :       -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[178:49]->[178:55]
dump_node                     :        -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :        [7:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[const char] extent=[178:49]->[178:55]
dump_node                     :         -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[const char *] extent=[178:49]->[178:52]
dump_node                     :          -> tokens[:10]=[['val']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[val] type=[const char *] extent=[178:49]->[178:52]
dump_node                     :           -> tokens[:10]=[['val']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[178:53]->[178:54]
dump_node                     :          -> tokens[:10]=[['i']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[178:53]->[178:54]
dump_node                     :           -> tokens[:10]=[['i']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned char] extent=[180:13]->[180:50]
dump_node                     :      -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :      [5:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[180:13]->[180:46]
dump_node                     :       -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data', '[', 'a', '->', 'offset', '+']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[180:13]->[180:31]
dump_node                     :        -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :        [7:CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[180:13]->[180:31]
dump_node                     :         -> tokens[:10]=[['hand', '->', 'buffer', '->', 'data']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[180:13]->[180:25]
dump_node                     :          -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[buffer] type=[grib_buffer *] extent=[180:13]->[180:25]
dump_node                     :           -> tokens[:10]=[['hand', '->', 'buffer']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[hand] type=[grib_handle *] extent=[180:13]->[180:17]
dump_node                     :            -> tokens[:10]=[['hand']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[hand] type=[grib_handle *] extent=[180:13]->[180:17]
dump_node                     :             -> tokens[:10]=[['hand']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[180:32]->[180:45]
dump_node                     :        -> tokens[:10]=[['a', '->', 'offset', '+', 'i']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[180:32]->[180:41]
dump_node                     :         -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[180:32]->[180:41]
dump_node                     :          -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :          [9:CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[180:32]->[180:41]
dump_node                     :           -> tokens[:10]=[['a', '->', 'offset']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[180:32]->[180:33]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[180:32]->[180:33]
dump_node                     :             -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[180:44]->[180:45]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[180:44]->[180:45]
dump_node                     :          -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[180:49]->[180:50]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[180:49]->[180:50]
dump_node                     :        -> tokens[:10]=[['0']]
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[177:9]->[180:50]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( i < len [ 0 ] ) hand -> buffer -> data [ a -> offset + i ] = val [ i ] ; else hand -> buffer -> data [ a -> offset + i ] = 0
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[177:13]->[177:23]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i < len [ 0 ]
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[177:13]->[177:14]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[177:17]->[177:23]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[177:13]->[177:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[177:13]->[177:14]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[177:17]->[177:23]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[size_t] extent=[177:17]->[177:23]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] len [ 0 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[len] type=[size_t *] extent=[177:17]->[177:20]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] len
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[len] type=[size_t *] extent=[177:17]->[177:20]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_EXPR_node               : [OUT][ValueDeclarationReference] len
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[177:21]->[177:22]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_EXPR_node               : [OUT][ArrayAccess] len[0]
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[<] right_operand_cvalue=[len[0]]
parse_EXPR_node               : [OUT][BinaryOperation] i < len[0]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned char] extent=[178:13]->[178:55]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] hand -> buffer -> data [ a -> offset + i ] = val [ i ]
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[178:13]->[178:46]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[178:49]->[178:55]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[178:13]->[178:46]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] hand -> buffer -> data [ a -> offset + i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[178:13]->[178:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] hand -> buffer -> data
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[178:13]->[178:31]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] hand -> buffer -> data
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[data] type=[unsigned char *] tokens=[['hand', '->', 'buffer', '->', 'data']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'buffer', '->', 'data']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'data']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[hand->buffer->data]
parse_EXPR_node               : [OUT][StructMemberAccess] hand->buffer->data
parse_EXPR_node               : [OUT][StructMemberAccess] hand->buffer->data
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[178:32]->[178:45]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> offset + i
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[178:32]->[178:41]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[178:44]->[178:45]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[178:32]->[178:41]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> offset
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[178:32]->[178:41]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> offset
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[178:32]->[178:41]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> offset
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[offset] type=[long] tokens=[['a', '->', 'offset']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'offset']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->offset]
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[178:44]->[178:45]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[178:44]->[178:45]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->offset] operator_token=[+] right_operand_cvalue=[i]
parse_EXPR_node               : [OUT][BinaryOperation] a->offset + i
parse_EXPR_node               : [OUT][ArrayAccess] hand->buffer->data[a->offset + i]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[178:49]->[178:55]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[178:49]->[178:55]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[const char] extent=[178:49]->[178:55]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[const char *] extent=[178:49]->[178:52]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[const char *] extent=[178:49]->[178:52]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[178:53]->[178:54]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[178:53]->[178:54]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[hand->buffer->data[a->offset + i]] operator_token=[=] right_operand_cvalue=[val[i]]
parse_EXPR_node               : [OUT][BinaryOperation] hand->buffer->data[a->offset + i] = val[i];
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned char] extent=[180:13]->[180:50]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] hand -> buffer -> data [ a -> offset + i ] = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[180:13]->[180:46]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[180:49]->[180:50]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[unsigned char] extent=[180:13]->[180:46]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] hand -> buffer -> data [ a -> offset + i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[data] type=[unsigned char *] extent=[180:13]->[180:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] hand -> buffer -> data
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[data] type=[unsigned char *] extent=[180:13]->[180:31]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] hand -> buffer -> data
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[data] type=[unsigned char *] tokens=[['hand', '->', 'buffer', '->', 'data']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'buffer', '->', 'data']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'data']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[hand->buffer->data]
parse_EXPR_node               : [OUT][StructMemberAccess] hand->buffer->data
parse_EXPR_node               : [OUT][StructMemberAccess] hand->buffer->data
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[180:32]->[180:45]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> offset + i
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[180:32]->[180:41]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[180:44]->[180:45]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[size_t] extent=[180:32]->[180:41]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> offset
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[offset] type=[long] extent=[180:32]->[180:41]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> offset
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[offset] type=[long] extent=[180:32]->[180:41]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> offset
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[offset] type=[long] tokens=[['a', '->', 'offset']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'offset']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->offset]
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_EXPR_node               : [OUT][StructMemberAccess] a->offset
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[180:44]->[180:45]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[180:44]->[180:45]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->offset] operator_token=[+] right_operand_cvalue=[i]
parse_EXPR_node               : [OUT][BinaryOperation] a->offset + i
parse_EXPR_node               : [OUT][ArrayAccess] hand->buffer->data[a->offset + i]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[unsigned char] extent=[180:49]->[180:50]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[180:49]->[180:50]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[hand->buffer->data[a->offset + i]] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] hand->buffer->data[a->offset + i] = 0;
parse_STMT_node               : [OUT][IfStatement] if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
parse_STMT_node               : [OUT][CompoundStatement] {
if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
}
parse_STMT_node               : [OUT][ForStatement] for(i = 0;i < alen;i++)
{
if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
}
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[183:5]->[183:24]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_SUCCESS
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_SUCCESS']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_SUCCESS;
parse_STMT_node               : [OUT][CompoundStatement] {
size_t i = 0;
grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = a->length;
if (len[0] > (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_BUFFER_TOO_SMALL;
}
for(i = 0;i < alen;i++)
{
if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
}
return 
GRIB_SUCCESS;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int pack_string(grib_accessor* a, const char* val, size_t* len)
                                {
                                size_t i = 0;
                                grib_handle* hand = grib_handle_of_accessor(a);
                                const size_t alen = a->length;
                                if (len[0] > (alen + 1))
                                {
                                grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
                                len[0] = 0;
                                return 
                                GRIB_BUFFER_TOO_SMALL;
                                }
                                for(i = 0;i < alen;i++)
                                {
                                if (i < len[0])
                                hand->buffer->data[a->offset + i] = val[i];
                                else hand->buffer->data[a->offset + i] = 0;
                                }
                                return 
                                GRIB_SUCCESS;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[187:1]->[190:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { grib_context_log ( a -> context , GRIB_LOG_ERROR , "Should not pack %s as long (It's a string)" , a -> name ) ; return GRIB_NOT_IMPLEMENTED ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[187:1]->[190:2]
dump_node                     :    -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"Should not pack %s as long (It\'s a string)"']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[188:5]->[188:104]
dump_node                     :     -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"Should not pack %s as long (It\'s a string)"', ',']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[188:5]->[188:21]
dump_node                     :      -> tokens[:10]=[['grib_context_log']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[188:5]->[188:21]
dump_node                     :       -> tokens[:10]=[['grib_context_log']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[188:22]->[188:32]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[188:22]->[188:32]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[188:22]->[188:32]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[188:22]->[188:23]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[188:22]->[188:23]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[188:34]->[188:48]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[188:50]->[188:94]
dump_node                     :      -> tokens[:10]=[['"Should not pack %s as long (It\'s a string)"']]
dump_node                     :      [5:CursorKind.STRING_LITERAL] spelling=["Should not pack %s as long (It's a string)"] type=[const char[43]] extent=[188:50]->[188:94]
dump_node                     :       -> tokens[:10]=[['"Should not pack %s as long (It\'s a string)"']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[188:96]->[188:103]
dump_node                     :      -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :      [5:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[188:96]->[188:103]
dump_node                     :       -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[188:96]->[188:97]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[188:96]->[188:97]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[189:5]->[189:32]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_NOT_IMPLEMENTED']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[189:12]->[189:32]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[189:12]->[189:32]
dump_node                     :       -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[188:5]->[188:104]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_log ( a -> context , GRIB_LOG_ERROR , "Should not pack %s as long (It's a string)" , a -> name )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[188:5]->[188:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_log
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[188:5]->[188:21]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_CALL_EXPR               : cfunc_name=[grib_context_log] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[188:22]->[188:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[188:22]->[188:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[188:22]->[188:32]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[188:34]->[188:48]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_LOG_ERROR] kind=[CursorKind.MACRO_INSTANTIATION] extent=[188:34 -> 188:48]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_LOG_ERROR] type=[] extent=[188:34]->[188:48]
dump_node                     :    -> tokens[:10]=[['GRIB_LOG_ERROR']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[188:34 -> 188:48]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[188:34]->[188:48]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[188:50]->[188:94]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] "Should not pack %s as long (It's a string)"
parse_ast_node                : [CursorKind.STRING_LITERAL] spelling=["Should not pack %s as long (It's a string)"] type=[const char[43]] extent=[188:50]->[188:94]
parse_EXPR_node               : [IN] [CursorKind.STRING_LITERAL] "Should not pack %s as long (It's a string)"
parse_EXPR_node               : [OUT][Literal] "Should not pack %s as long (It's a string)"
parse_EXPR_node               : [OUT][Literal] "Should not pack %s as long (It's a string)"
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[188:96]->[188:103]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> name
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[188:96]->[188:103]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> name
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[name] type=[const char *] tokens=[['a', '->', 'name']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'name']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->name]
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[189:5]->[189:32]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_NOT_IMPLEMENTED
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_NOT_IMPLEMENTED']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_NOT_IMPLEMENTED;
parse_STMT_node               : [OUT][CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int pack_long(grib_accessor* a, const long* v, size_t* len)
                                {
                                grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
                                return 
                                GRIB_NOT_IMPLEMENTED;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[193:1]->[196:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { grib_context_log ( a -> context , GRIB_LOG_ERROR , "Should not pack %s as double (It's a string)" , a -> name ) ; return GRIB_NOT_IMPLEMENTED ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[193:1]->[196:2]
dump_node                     :    -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"Should not pack %s as double (It\'s a string)"']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[194:5]->[194:106]
dump_node                     :     -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_ERROR', ',', '"Should not pack %s as double (It\'s a string)"', ',']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[194:5]->[194:21]
dump_node                     :      -> tokens[:10]=[['grib_context_log']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[194:5]->[194:21]
dump_node                     :       -> tokens[:10]=[['grib_context_log']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[194:22]->[194:32]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[194:22]->[194:32]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[194:22]->[194:32]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[194:22]->[194:23]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[194:22]->[194:23]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[194:34]->[194:48]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[194:50]->[194:96]
dump_node                     :      -> tokens[:10]=[['"Should not pack %s as double (It\'s a string)"']]
dump_node                     :      [5:CursorKind.STRING_LITERAL] spelling=["Should not pack %s as double (It's a string)"] type=[const char[45]] extent=[194:50]->[194:96]
dump_node                     :       -> tokens[:10]=[['"Should not pack %s as double (It\'s a string)"']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[194:98]->[194:105]
dump_node                     :      -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :      [5:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[194:98]->[194:105]
dump_node                     :       -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[194:98]->[194:99]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[194:98]->[194:99]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[195:5]->[195:32]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_NOT_IMPLEMENTED']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[195:12]->[195:32]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[195:12]->[195:32]
dump_node                     :       -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[194:5]->[194:106]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_log ( a -> context , GRIB_LOG_ERROR , "Should not pack %s as double (It's a string)" , a -> name )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[194:5]->[194:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_log
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[194:5]->[194:21]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_CALL_EXPR               : cfunc_name=[grib_context_log] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[194:22]->[194:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[194:22]->[194:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[194:22]->[194:32]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[194:34]->[194:48]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_LOG_ERROR] kind=[CursorKind.MACRO_INSTANTIATION] extent=[194:34 -> 194:48]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_LOG_ERROR] type=[] extent=[194:34]->[194:48]
dump_node                     :    -> tokens[:10]=[['GRIB_LOG_ERROR']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[194:34 -> 194:48]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[194:34]->[194:48]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[194:50]->[194:96]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] "Should not pack %s as double (It's a string)"
parse_ast_node                : [CursorKind.STRING_LITERAL] spelling=["Should not pack %s as double (It's a string)"] type=[const char[45]] extent=[194:50]->[194:96]
parse_EXPR_node               : [IN] [CursorKind.STRING_LITERAL] "Should not pack %s as double (It's a string)"
parse_EXPR_node               : [OUT][Literal] "Should not pack %s as double (It's a string)"
parse_EXPR_node               : [OUT][Literal] "Should not pack %s as double (It's a string)"
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[194:98]->[194:105]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> name
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[194:98]->[194:105]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> name
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[name] type=[const char *] tokens=[['a', '->', 'name']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'name']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->name]
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[195:5]->[195:32]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_NOT_IMPLEMENTED
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_NOT_IMPLEMENTED']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_NOT_IMPLEMENTED;
parse_STMT_node               : [OUT][CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int pack_double(grib_accessor* a, const double* v, size_t* len)
                                {
                                grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
                                return 
                                GRIB_NOT_IMPLEMENTED;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[199:1]->[224:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { char val [ 1024 ] = { 0 , } ; size_t l = sizeof ( val ) ; size_t i = 0 ; char * last = NULL ; int err = grib_unpack_string ( a , val , & l ) ; if ( err ) return err ; i = 0 ; while ( i < l - 1 && val [ i ] == ' ' ) i ++ ; if ( val [ i ] == 0 ) { * v = 0 ; return 0 ; } if ( val [ i + 1 ] == ' ' && i < l - 2 ) val [ i + 1 ] = 0 ; * v = strtol ( val , & last , 10 ) ; grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name ) ; return GRIB_SUCCESS ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[199:1]->[224:2]
dump_node                     :    -> tokens[:10]=[['{', 'char', 'val', '[', '1024', ']', '=', '{', '0', ',']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[200:5]->[200:27]
dump_node                     :     -> tokens[:10]=[['char', 'val', '[', '1024', ']', '=', '{', '0', ',', '}']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[val] type=[char[1024]] extent=[200:5]->[200:26]
dump_node                     :      -> tokens[:10]=[['char', 'val', '[', '1024', ']', '=', '{', '0', ',', '}']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[200:14]->[200:18]
dump_node                     :       -> tokens[:10]=[['1024']]
dump_node                     :      [5:CursorKind.INIT_LIST_EXPR] spelling=[] type=[char[1024]] extent=[200:22]->[200:26]
dump_node                     :       -> tokens[:10]=[['{', '0', ',', '}']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[200:23]->[200:24]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[201:5]->[201:30]
dump_node                     :     -> tokens[:10]=[['size_t', 'l', '=', 'sizeof', '(', 'val', ')', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[l] type=[size_t] extent=[201:5]->[201:29]
dump_node                     :      -> tokens[:10]=[['size_t', 'l', '=', 'sizeof', '(', 'val', ')']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[201:5]->[201:11]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.CXX_UNARY_EXPR] spelling=[] type=[unsigned long] extent=[201:18]->[201:29]
dump_node                     :       -> tokens[:10]=[['sizeof', '(', 'val', ')']]
dump_node                     :       [6:CursorKind.PAREN_EXPR] spelling=[] type=[char[1024]] extent=[201:24]->[201:29]
dump_node                     :        -> tokens[:10]=[['(', 'val', ')']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[201:25]->[201:28]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[202:5]->[202:20]
dump_node                     :     -> tokens[:10]=[['size_t', 'i', '=', '0', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[i] type=[size_t] extent=[202:5]->[202:19]
dump_node                     :      -> tokens[:10]=[['size_t', 'i', '=', '0']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[202:5]->[202:11]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[202:18]->[202:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[202:18]->[202:19]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[203:5]->[203:23]
dump_node                     :     -> tokens[:10]=[['char', '*', 'last', '=', 'NULL', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[last] type=[char *] extent=[203:5]->[203:22]
dump_node                     :      -> tokens[:10]=[['char', '*', 'last', '=', 'NULL']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[203:18]->[203:22]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.GNU_NULL_EXPR] spelling=[] type=[long] extent=[203:18]->[203:22]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[204:5]->[204:49]
dump_node                     :     -> tokens[:10]=[['int', 'err', '=', 'grib_unpack_string', '(', 'a', ',', 'val', ',', '&']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[err] type=[int] extent=[204:5]->[204:48]
dump_node                     :      -> tokens[:10]=[['int', 'err', '=', 'grib_unpack_string', '(', 'a', ',', 'val', ',', '&']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[204:18]->[204:48]
dump_node                     :       -> tokens[:10]=[['grib_unpack_string', '(', 'a', ',', 'val', ',', '&', 'l', ')']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[204:18]->[204:36]
dump_node                     :        -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[204:18]->[204:36]
dump_node                     :         -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[204:37]->[204:38]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[204:37]->[204:38]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[204:40]->[204:43]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[204:40]->[204:43]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[204:45]->[204:47]
dump_node                     :        -> tokens[:10]=[['&', 'l']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[204:46]->[204:47]
dump_node                     :         -> tokens[:10]=[['l']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[206:5]->[207:19]
dump_node                     :     -> tokens[:10]=[['if', '(', 'err', ')', 'return', 'err']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[206:9]->[206:12]
dump_node                     :      -> tokens[:10]=[['err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[206:9]->[206:12]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[206:9]->[206:12]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :     [4:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[207:9]->[207:19]
dump_node                     :      -> tokens[:10]=[['return', 'err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[207:16]->[207:19]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[207:16]->[207:19]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[209:5]->[209:10]
dump_node                     :     -> tokens[:10]=[['i', '=', '0']]
dump_node                     :     [4:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[209:5]->[209:6]
dump_node                     :      -> tokens[:10]=[['i']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[209:9]->[209:10]
dump_node                     :      -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[209:9]->[209:10]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.WHILE_STMT] spelling=[] type=[] extent=[210:5]->[211:12]
dump_node                     :     -> tokens[:10]=[['while', '(', 'i', '<', 'l', '-', '1', '&&', 'val', '[']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:12]->[210:38]
dump_node                     :      -> tokens[:10]=[['i', '<', 'l', '-', '1', '&&', 'val', '[', 'i', ']']]
dump_node                     :      [5:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:12]->[210:21]
dump_node                     :       -> tokens[:10]=[['i', '<', 'l', '-', '1']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[210:12]->[210:13]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[210:12]->[210:13]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[210:16]->[210:21]
dump_node                     :        -> tokens[:10]=[['l', '-', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[l] type=[size_t] extent=[210:16]->[210:17]
dump_node                     :         -> tokens[:10]=[['l']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[210:16]->[210:17]
dump_node                     :          -> tokens[:10]=[['l']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[210:20]->[210:21]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[210:20]->[210:21]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :      [5:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:25]->[210:38]
dump_node                     :       -> tokens[:10]=[['val', '[', 'i', ']', '==', "' '"]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:25]->[210:31]
dump_node                     :        -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[210:25]->[210:31]
dump_node                     :         -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :         [8:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[210:25]->[210:31]
dump_node                     :          -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[210:25]->[210:28]
dump_node                     :           -> tokens[:10]=[['val']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[210:25]->[210:28]
dump_node                     :            -> tokens[:10]=[['val']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[210:29]->[210:30]
dump_node                     :           -> tokens[:10]=[['i']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[210:29]->[210:30]
dump_node                     :            -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:35]->[210:38]
dump_node                     :        -> tokens[:10]=[["' '"]]
dump_node                     :        [7:CursorKind.CHARACTER_LITERAL] spelling=[] type=[char] extent=[210:35]->[210:38]
dump_node                     :         -> tokens[:10]=[["' '"]]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t] extent=[211:9]->[211:12]
dump_node                     :      -> tokens[:10]=[['i', '++']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[211:9]->[211:10]
dump_node                     :       -> tokens[:10]=[['i']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[213:5]->[216:6]
dump_node                     :     -> tokens[:10]=[['if', '(', 'val', '[', 'i', ']', '==', '0', ')', '{']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[213:9]->[213:20]
dump_node                     :      -> tokens[:10]=[['val', '[', 'i', ']', '==', '0']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[213:9]->[213:15]
dump_node                     :       -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[213:9]->[213:15]
dump_node                     :        -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :        [7:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[213:9]->[213:15]
dump_node                     :         -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[213:9]->[213:12]
dump_node                     :          -> tokens[:10]=[['val']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[213:9]->[213:12]
dump_node                     :           -> tokens[:10]=[['val']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[213:13]->[213:14]
dump_node                     :          -> tokens[:10]=[['i']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[213:13]->[213:14]
dump_node                     :           -> tokens[:10]=[['i']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[213:19]->[213:20]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[213:22]->[216:6]
dump_node                     :      -> tokens[:10]=[['{', '*', 'v', '=', '0', ';', 'return', '0', ';', '}']]
dump_node                     :      [5:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[214:9]->[214:15]
dump_node                     :       -> tokens[:10]=[['*', 'v', '=', '0']]
dump_node                     :       [6:CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[214:9]->[214:11]
dump_node                     :        -> tokens[:10]=[['*', 'v']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[v] type=[long *] extent=[214:10]->[214:11]
dump_node                     :         -> tokens[:10]=[['v']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[v] type=[long *] extent=[214:10]->[214:11]
dump_node                     :          -> tokens[:10]=[['v']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[214:14]->[214:15]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[214:14]->[214:15]
dump_node                     :         -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[215:9]->[215:17]
dump_node                     :       -> tokens[:10]=[['return', '0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[215:16]->[215:17]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[217:5]->[218:23]
dump_node                     :     -> tokens[:10]=[['if', '(', 'val', '[', 'i', '+', '1', ']', '==', "' '"]]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:9]->[217:39]
dump_node                     :      -> tokens[:10]=[['val', '[', 'i', '+', '1', ']', '==', "' '", '&&', 'i']]
dump_node                     :      [5:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:9]->[217:26]
dump_node                     :       -> tokens[:10]=[['val', '[', 'i', '+', '1', ']', '==', "' '"]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[217:9]->[217:19]
dump_node                     :        -> tokens[:10]=[['val', '[', 'i', '+', '1', ']']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[217:9]->[217:19]
dump_node                     :         -> tokens[:10]=[['val', '[', 'i', '+', '1', ']']]
dump_node                     :         [8:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[217:9]->[217:19]
dump_node                     :          -> tokens[:10]=[['val', '[', 'i', '+', '1', ']']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[217:9]->[217:12]
dump_node                     :           -> tokens[:10]=[['val']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[217:9]->[217:12]
dump_node                     :            -> tokens[:10]=[['val']]
dump_node                     :          [9:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[217:13]->[217:18]
dump_node                     :           -> tokens[:10]=[['i', '+', '1']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[217:13]->[217:14]
dump_node                     :            -> tokens[:10]=[['i']]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[217:13]->[217:14]
dump_node                     :             -> tokens[:10]=[['i']]
dump_node                     :           [10:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[217:17]->[217:18]
dump_node                     :            -> tokens[:10]=[['1']]
dump_node                     :            [11:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[217:17]->[217:18]
dump_node                     :             -> tokens[:10]=[['1']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[217:23]->[217:26]
dump_node                     :        -> tokens[:10]=[["' '"]]
dump_node                     :        [7:CursorKind.CHARACTER_LITERAL] spelling=[] type=[char] extent=[217:23]->[217:26]
dump_node                     :         -> tokens[:10]=[["' '"]]
dump_node                     :      [5:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:30]->[217:39]
dump_node                     :       -> tokens[:10]=[['i', '<', 'l', '-', '2']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[217:30]->[217:31]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[217:30]->[217:31]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[217:34]->[217:39]
dump_node                     :        -> tokens[:10]=[['l', '-', '2']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[l] type=[size_t] extent=[217:34]->[217:35]
dump_node                     :         -> tokens[:10]=[['l']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[217:34]->[217:35]
dump_node                     :          -> tokens[:10]=[['l']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[217:38]->[217:39]
dump_node                     :         -> tokens[:10]=[['2']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[217:38]->[217:39]
dump_node                     :          -> tokens[:10]=[['2']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[char] extent=[218:9]->[218:23]
dump_node                     :      -> tokens[:10]=[['val', '[', 'i', '+', '1', ']', '=', '0']]
dump_node                     :      [5:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[218:9]->[218:19]
dump_node                     :       -> tokens[:10]=[['val', '[', 'i', '+', '1', ']']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[218:9]->[218:12]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[218:9]->[218:12]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[218:13]->[218:18]
dump_node                     :        -> tokens[:10]=[['i', '+', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[218:13]->[218:14]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[218:13]->[218:14]
dump_node                     :          -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[218:17]->[218:18]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[218:17]->[218:18]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[218:22]->[218:23]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[218:22]->[218:23]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[220:5]->[220:32]
dump_node                     :     -> tokens[:10]=[['*', 'v', '=', 'strtol', '(', 'val', ',', '&', 'last', ',']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[220:5]->[220:7]
dump_node                     :      -> tokens[:10]=[['*', 'v']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[v] type=[long *] extent=[220:6]->[220:7]
dump_node                     :       -> tokens[:10]=[['v']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[v] type=[long *] extent=[220:6]->[220:7]
dump_node                     :        -> tokens[:10]=[['v']]
dump_node                     :     [4:CursorKind.CALL_EXPR] spelling=[strtol] type=[long] extent=[220:10]->[220:32]
dump_node                     :      -> tokens[:10]=[['strtol', '(', 'val', ',', '&', 'last', ',', '10', ')']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[strtol] type=[long (*)(const char *__restrict, char **__restrict, int) noexcept(true)] extent=[220:10]->[220:16]
dump_node                     :       -> tokens[:10]=[['strtol']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[strtol] type=[long (const char *__restrict, char **__restrict, int) noexcept(true)] extent=[220:10]->[220:16]
dump_node                     :        -> tokens[:10]=[['strtol']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[const char *] extent=[220:17]->[220:20]
dump_node                     :       -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[220:17]->[220:20]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[220:17]->[220:20]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :      [5:CursorKind.UNARY_OPERATOR] spelling=[] type=[char **] extent=[220:22]->[220:27]
dump_node                     :       -> tokens[:10]=[['&', 'last']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[last] type=[char *] extent=[220:23]->[220:27]
dump_node                     :        -> tokens[:10]=[['last']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[220:29]->[220:31]
dump_node                     :       -> tokens[:10]=[['10']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[222:5]->[222:88]
dump_node                     :     -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_DEBUG', ',', '" Casting string %s to long"', ',']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[222:5]->[222:21]
dump_node                     :      -> tokens[:10]=[['grib_context_log']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[222:5]->[222:21]
dump_node                     :       -> tokens[:10]=[['grib_context_log']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[222:22]->[222:32]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[222:22]->[222:32]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[222:22]->[222:32]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[222:22]->[222:23]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[222:22]->[222:23]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[222:34]->[222:48]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[222:50]->[222:78]
dump_node                     :      -> tokens[:10]=[['" Casting string %s to long"']]
dump_node                     :      [5:CursorKind.STRING_LITERAL] spelling=[" Casting string %s to long"] type=[const char[27]] extent=[222:50]->[222:78]
dump_node                     :       -> tokens[:10]=[['" Casting string %s to long"']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[222:80]->[222:87]
dump_node                     :      -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :      [5:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[222:80]->[222:87]
dump_node                     :       -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[222:80]->[222:81]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[222:80]->[222:81]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[223:5]->[223:24]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_SUCCESS']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[223:12]->[223:24]
dump_node                     :      -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[200:5]->[200:27]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] char val [ 1024 ] = { 0 , } ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[val] type=[char[1024]] extent=[200:5]->[200:26]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] char val [ 1024 ] = { 0 , }
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[200:14]->[200:18]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1024
parse_EXPR_node               : [OUT][Literal] 1024
parse_ast_node                : [CursorKind.INIT_LIST_EXPR] spelling=[] type=[char[1024]] extent=[200:22]->[200:26]
parse_EXPR_node               : [IN] [CursorKind.INIT_LIST_EXPR] { 0 , }
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[200:23]->[200:24]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][InitList] {0}
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[char val[]]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.init_list.InitList'>.__NAME__] as_string=[{0}]
parse_DECL_node               : [OUT][VariableDeclaration] char val[] = {0};
parse_STMT_node               : [OUT][CodeObjects] char val[] = {0};
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[201:5]->[201:30]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] size_t l = sizeof ( val ) ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[l] type=[size_t] extent=[201:5]->[201:29]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] size_t l = sizeof ( val )
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.CXX_UNARY_EXPR] spelling=[] type=[unsigned long] extent=[201:18]->[201:29]
parse_EXPR_node               : [IN] [CursorKind.CXX_UNARY_EXPR] sizeof ( val )
parse_ast_node                : [CursorKind.PAREN_EXPR] spelling=[] type=[char[1024]] extent=[201:24]->[201:29]
parse_EXPR_node               : [IN] [CursorKind.PAREN_EXPR] ( val )
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[201:25]->[201:28]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ParenExpression] (val)
parse_EXPR_node               : [OUT][UnaryExpression] sizeof(val)
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[size_t l]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.unary_expression.UnaryExpression'>.__NAME__] as_string=[sizeof(val)]
parse_DECL_node               : [OUT][VariableDeclaration] size_t l = sizeof(val);
parse_STMT_node               : [OUT][CodeObjects] size_t l = sizeof(val);
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[202:5]->[202:20]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] size_t i = 0 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[i] type=[size_t] extent=[202:5]->[202:19]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] size_t i = 0
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[202:18]->[202:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[202:18]->[202:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[size_t i]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[0]
parse_DECL_node               : [OUT][VariableDeclaration] size_t i = 0;
parse_STMT_node               : [OUT][CodeObjects] size_t i = 0;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[203:5]->[203:23]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] char * last = NULL ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[last] type=[char *] extent=[203:5]->[203:22]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] char * last = NULL
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[203:18]->[203:22]
parse_macro_instantiation     : MACRO macro_node spelling=[NULL] kind=[CursorKind.MACRO_INSTANTIATION] extent=[203:18 -> 203:22]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[NULL] type=[] extent=[203:18]->[203:22]
dump_node                     :    -> tokens[:10]=[['NULL']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.UNEXPOSED_EXPR] extent=[203:18 -> 203:22]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[203:18]->[203:22]
dump_node                     :    -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.GNU_NULL_EXPR] spelling=[] type=[long] extent=[203:18]->[203:22]
dump_node                     :     -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[char* last]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[NULL]
parse_DECL_node               : [OUT][VariableDeclaration] char* last = NULL;
parse_STMT_node               : [OUT][CodeObjects] char* last = NULL;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[204:5]->[204:49]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] int err = grib_unpack_string ( a , val , & l ) ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[err] type=[int] extent=[204:5]->[204:48]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] int err = grib_unpack_string ( a , val , & l )
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[204:18]->[204:48]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_unpack_string ( a , val , & l )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[204:18]->[204:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_unpack_string
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[204:18]->[204:36]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_CALL_EXPR               : cfunc_name=[grib_unpack_string] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[204:37]->[204:38]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[204:37]->[204:38]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[204:40]->[204:43]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[204:40]->[204:43]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[204:45]->[204:47]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] & l
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[&]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[204:46]->[204:47]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] l
parse_EXPR_node               : [OUT][ValueDeclarationReference] l
parse_EXPR_node               : [OUT][UnaryOperation] &l;
parse_EXPR_node               : [OUT][FunctionCall] grib_unpack_string(a, val, &l;);
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[int err]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.function_call.FunctionCall'>.__NAME__] as_string=[grib_unpack_string(a, val, &l;);]
parse_DECL_node               : [OUT][VariableDeclaration] int err = grib_unpack_string(a, val, &l;);
parse_STMT_node               : [OUT][CodeObjects] int err = grib_unpack_string(a, val, &l;);
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[206:5]->[207:19]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( err ) return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[206:9]->[206:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[206:9]->[206:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[206:9]->[206:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[207:9]->[207:19]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[207:16]->[207:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[207:16]->[207:19]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_STMT_node               : [OUT][ReturnStatement] return 
err;
parse_STMT_node               : [OUT][IfStatement] if (err)
return 
err;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[209:5]->[209:10]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[209:5]->[209:6]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[209:9]->[209:10]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[209:5]->[209:6]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[209:9]->[209:10]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[209:9]->[209:10]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] i = 0;
parse_ast_node                : [CursorKind.WHILE_STMT] spelling=[] type=[] extent=[210:5]->[211:12]
parse_STMT_node               : [IN] [CursorKind.WHILE_STMT] while ( i < l - 1 && val [ i ] == ' ' ) i ++
parse_WHILE_STMT              : WHILE Nodes:
dump_node                     : [0:CursorKind.WHILE_STMT] spelling=[] type=[] extent=[210:5]->[211:12]
dump_node                     :  -> tokens[:10]=[['while', '(', 'i', '<', 'l', '-', '1', '&&', 'val', '[']]
dump_node                     :  [1:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:12]->[210:38]
dump_node                     :   -> tokens[:10]=[['i', '<', 'l', '-', '1', '&&', 'val', '[', 'i', ']']]
dump_node                     :   [2:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:12]->[210:21]
dump_node                     :    -> tokens[:10]=[['i', '<', 'l', '-', '1']]
dump_node                     :    [3:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[210:12]->[210:13]
dump_node                     :     -> tokens[:10]=[['i']]
dump_node                     :     [4:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[210:12]->[210:13]
dump_node                     :      -> tokens[:10]=[['i']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[210:16]->[210:21]
dump_node                     :     -> tokens[:10]=[['l', '-', '1']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[l] type=[size_t] extent=[210:16]->[210:17]
dump_node                     :      -> tokens[:10]=[['l']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[210:16]->[210:17]
dump_node                     :       -> tokens[:10]=[['l']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[210:20]->[210:21]
dump_node                     :      -> tokens[:10]=[['1']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[210:20]->[210:21]
dump_node                     :       -> tokens[:10]=[['1']]
dump_node                     :   [2:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:25]->[210:38]
dump_node                     :    -> tokens[:10]=[['val', '[', 'i', ']', '==', "' '"]]
dump_node                     :    [3:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:25]->[210:31]
dump_node                     :     -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[210:25]->[210:31]
dump_node                     :      -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :      [5:CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[210:25]->[210:31]
dump_node                     :       -> tokens[:10]=[['val', '[', 'i', ']']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[210:25]->[210:28]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[210:25]->[210:28]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[210:29]->[210:30]
dump_node                     :        -> tokens[:10]=[['i']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[210:29]->[210:30]
dump_node                     :         -> tokens[:10]=[['i']]
dump_node                     :    [3:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:35]->[210:38]
dump_node                     :     -> tokens[:10]=[["' '"]]
dump_node                     :     [4:CursorKind.CHARACTER_LITERAL] spelling=[] type=[char] extent=[210:35]->[210:38]
dump_node                     :      -> tokens[:10]=[["' '"]]
dump_node                     :  [1:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t] extent=[211:9]->[211:12]
dump_node                     :   -> tokens[:10]=[['i', '++']]
dump_node                     :   [2:CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[211:9]->[211:10]
dump_node                     :    -> tokens[:10]=[['i']]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:12]->[210:38]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i < l - 1 && val [ i ] == ' '
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:12]->[210:21]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:25]->[210:38]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:12]->[210:21]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i < l - 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[210:12]->[210:13]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[210:16]->[210:21]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[210:12]->[210:13]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[210:12]->[210:13]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[210:16]->[210:21]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] l - 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[l] type=[size_t] extent=[210:16]->[210:17]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[210:20]->[210:21]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[l] type=[size_t] extent=[210:16]->[210:17]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] l
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[210:16]->[210:17]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] l
parse_EXPR_node               : [OUT][ValueDeclarationReference] l
parse_EXPR_node               : [OUT][ValueDeclarationReference] l
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[210:20]->[210:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[210:20]->[210:21]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[l] operator_token=[-] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] l - 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[<] right_operand_cvalue=[l - 1]
parse_EXPR_node               : [OUT][BinaryOperation] i < l - 1
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[210:25]->[210:38]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] val [ i ] == ' '
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:25]->[210:31]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:35]->[210:38]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:25]->[210:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[210:25]->[210:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[210:25]->[210:31]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[210:25]->[210:28]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[210:25]->[210:28]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[210:29]->[210:30]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[210:29]->[210:30]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[210:35]->[210:38]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] ' '
parse_ast_node                : [CursorKind.CHARACTER_LITERAL] spelling=[] type=[char] extent=[210:35]->[210:38]
parse_EXPR_node               : [IN] [CursorKind.CHARACTER_LITERAL] ' '
parse_EXPR_node               : [OUT][Literal] ' '
parse_EXPR_node               : [OUT][Literal] ' '
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[val[i]] operator_token=[==] right_operand_cvalue=[' ']
parse_EXPR_node               : [OUT][BinaryOperation] val[i] == ' '
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i < l - 1] operator_token=[&&] right_operand_cvalue=[val[i] == ' ']
parse_EXPR_node               : [OUT][BinaryOperation] i < l - 1 && val[i] == ' '
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t] extent=[211:9]->[211:12]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] i ++
parse_UNARY_OPERATOR          : op_position=[postfix] op_value=[++]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[211:9]->[211:10]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][UnaryOperation] i++;
parse_STMT_node               : [OUT][WhileStatement] while (i < l - 1 && val[i] == ' ')
i++;
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[213:5]->[216:6]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( val [ i ] == 0 ) { * v = 0 ; return 0 ; }
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[213:9]->[213:20]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] val [ i ] == 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[213:9]->[213:15]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[213:19]->[213:20]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[213:9]->[213:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[213:9]->[213:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[213:9]->[213:15]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] val [ i ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[213:9]->[213:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[213:9]->[213:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[213:13]->[213:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[213:13]->[213:14]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_EXPR_node               : [OUT][ArrayAccess] val[i]
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[213:19]->[213:20]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[val[i]] operator_token=[==] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] val[i] == 0
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[213:22]->[216:6]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { * v = 0 ; return 0 ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[213:22]->[216:6]
dump_node                     :    -> tokens[:10]=[['{', '*', 'v', '=', '0', ';', 'return', '0', ';', '}']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[214:9]->[214:15]
dump_node                     :     -> tokens[:10]=[['*', 'v', '=', '0']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[214:9]->[214:11]
dump_node                     :      -> tokens[:10]=[['*', 'v']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[v] type=[long *] extent=[214:10]->[214:11]
dump_node                     :       -> tokens[:10]=[['v']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[v] type=[long *] extent=[214:10]->[214:11]
dump_node                     :        -> tokens[:10]=[['v']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[214:14]->[214:15]
dump_node                     :      -> tokens[:10]=[['0']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[214:14]->[214:15]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[215:9]->[215:17]
dump_node                     :     -> tokens[:10]=[['return', '0']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[215:16]->[215:17]
dump_node                     :      -> tokens[:10]=[['0']]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[214:9]->[214:15]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] * v = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[214:9]->[214:11]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[214:14]->[214:15]
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[214:9]->[214:11]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] * v
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[*]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[v] type=[long *] extent=[214:10]->[214:11]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] v
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[v] type=[long *] extent=[214:10]->[214:11]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] v
parse_EXPR_node               : [OUT][ValueDeclarationReference] v
parse_EXPR_node               : [OUT][ValueDeclarationReference] v
parse_EXPR_node               : [OUT][UnaryOperation] *v;
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[214:14]->[214:15]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[214:14]->[214:15]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[*v;] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] *v = 0;
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[215:9]->[215:17]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[215:16]->[215:17]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_STMT_node               : [OUT][ReturnStatement] return 
0;
parse_STMT_node               : [OUT][CompoundStatement] {
*v = 0;
return 
0;
}
parse_STMT_node               : [OUT][IfStatement] if (val[i] == 0)
{
*v = 0;
return 
0;
}
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[217:5]->[218:23]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( val [ i + 1 ] == ' ' && i < l - 2 ) val [ i + 1 ] = 0
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:9]->[217:39]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] val [ i + 1 ] == ' ' && i < l - 2
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:9]->[217:26]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:30]->[217:39]
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:9]->[217:26]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] val [ i + 1 ] == ' '
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[217:9]->[217:19]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[217:23]->[217:26]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[217:9]->[217:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i + 1 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[217:9]->[217:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val [ i + 1 ]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[217:9]->[217:19]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] val [ i + 1 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[217:9]->[217:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[217:9]->[217:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[217:13]->[217:18]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[217:13]->[217:14]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[217:17]->[217:18]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[217:13]->[217:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[217:13]->[217:14]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[217:17]->[217:18]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[217:17]->[217:18]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] i + 1
parse_EXPR_node               : [OUT][ArrayAccess] val[i + 1]
parse_EXPR_node               : [OUT][ArrayAccess] val[i + 1]
parse_EXPR_node               : [OUT][ArrayAccess] val[i + 1]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[217:23]->[217:26]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] ' '
parse_ast_node                : [CursorKind.CHARACTER_LITERAL] spelling=[] type=[char] extent=[217:23]->[217:26]
parse_EXPR_node               : [IN] [CursorKind.CHARACTER_LITERAL] ' '
parse_EXPR_node               : [OUT][Literal] ' '
parse_EXPR_node               : [OUT][Literal] ' '
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[val[i + 1]] operator_token=[==] right_operand_cvalue=[' ']
parse_EXPR_node               : [OUT][BinaryOperation] val[i + 1] == ' '
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[217:30]->[217:39]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i < l - 2
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[217:30]->[217:31]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[217:34]->[217:39]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[217:30]->[217:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[217:30]->[217:31]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[217:34]->[217:39]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] l - 2
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[l] type=[size_t] extent=[217:34]->[217:35]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[217:38]->[217:39]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[l] type=[size_t] extent=[217:34]->[217:35]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] l
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[217:34]->[217:35]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] l
parse_EXPR_node               : [OUT][ValueDeclarationReference] l
parse_EXPR_node               : [OUT][ValueDeclarationReference] l
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[217:38]->[217:39]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 2
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[217:38]->[217:39]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 2
parse_EXPR_node               : [OUT][Literal] 2
parse_EXPR_node               : [OUT][Literal] 2
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[l] operator_token=[-] right_operand_cvalue=[2]
parse_EXPR_node               : [OUT][BinaryOperation] l - 2
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[<] right_operand_cvalue=[l - 2]
parse_EXPR_node               : [OUT][BinaryOperation] i < l - 2
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[val[i + 1] == ' '] operator_token=[&&] right_operand_cvalue=[i < l - 2]
parse_EXPR_node               : [OUT][BinaryOperation] val[i + 1] == ' ' && i < l - 2
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[char] extent=[218:9]->[218:23]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] val [ i + 1 ] = 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[218:9]->[218:19]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[218:22]->[218:23]
parse_ast_node                : [CursorKind.ARRAY_SUBSCRIPT_EXPR] spelling=[] type=[char] extent=[218:9]->[218:19]
parse_EXPR_node               : [IN] [CursorKind.ARRAY_SUBSCRIPT_EXPR] val [ i + 1 ]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[218:9]->[218:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[218:9]->[218:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[size_t] extent=[218:13]->[218:18]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] i + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[218:13]->[218:14]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[218:17]->[218:18]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[i] type=[size_t] extent=[218:13]->[218:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] i
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[i] type=[size_t] extent=[218:13]->[218:14]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_EXPR_node               : [OUT][ValueDeclarationReference] i
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[218:17]->[218:18]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[218:17]->[218:18]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[i] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] i + 1
parse_EXPR_node               : [OUT][ArrayAccess] val[i + 1]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[218:22]->[218:23]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[218:22]->[218:23]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[val[i + 1]] operator_token=[=] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] val[i + 1] = 0;
parse_STMT_node               : [OUT][IfStatement] if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[220:5]->[220:32]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] * v = strtol ( val , & last , 10 )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[220:5]->[220:7]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.CALL_EXPR] spelling=[strtol] type=[long] extent=[220:10]->[220:32]
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[long] extent=[220:5]->[220:7]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] * v
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[*]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[v] type=[long *] extent=[220:6]->[220:7]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] v
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[v] type=[long *] extent=[220:6]->[220:7]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] v
parse_EXPR_node               : [OUT][ValueDeclarationReference] v
parse_EXPR_node               : [OUT][ValueDeclarationReference] v
parse_EXPR_node               : [OUT][UnaryOperation] *v;
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[strtol] type=[long] extent=[220:10]->[220:32]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] strtol ( val , & last , 10 )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[strtol] type=[long (*)(const char *__restrict, char **__restrict, int) noexcept(true)] extent=[220:10]->[220:16]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] strtol
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[strtol] type=[long (const char *__restrict, char **__restrict, int) noexcept(true)] extent=[220:10]->[220:16]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] strtol
parse_EXPR_node               : [OUT][ValueDeclarationReference] strtol
parse_EXPR_node               : [OUT][ValueDeclarationReference] strtol
parse_CALL_EXPR               : cfunc_name=[strtol] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[const char *] extent=[220:17]->[220:20]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[220:17]->[220:20]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[220:17]->[220:20]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[char **] extent=[220:22]->[220:27]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] & last
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[&]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[last] type=[char *] extent=[220:23]->[220:27]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] last
parse_EXPR_node               : [OUT][ValueDeclarationReference] last
parse_EXPR_node               : [OUT][UnaryOperation] &last;
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[220:29]->[220:31]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 10
parse_EXPR_node               : [OUT][Literal] 10
parse_EXPR_node               : [OUT][FunctionCall] strtol(val, &last;, 10);
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[*v;] operator_token=[=] right_operand_cvalue=[strtol(val, &last;, 10);]
parse_EXPR_node               : [OUT][BinaryOperation] *v = strtol(val, &last;, 10);
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[222:5]->[222:88]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[222:5]->[222:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_log
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[222:5]->[222:21]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_CALL_EXPR               : cfunc_name=[grib_context_log] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[222:22]->[222:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[222:22]->[222:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[222:22]->[222:32]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[222:34]->[222:48]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_LOG_DEBUG] kind=[CursorKind.MACRO_INSTANTIATION] extent=[222:34 -> 222:48]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_LOG_DEBUG] type=[] extent=[222:34]->[222:48]
dump_node                     :    -> tokens[:10]=[['GRIB_LOG_DEBUG']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[222:34 -> 222:48]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[222:34]->[222:48]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[222:50]->[222:78]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] " Casting string %s to long"
parse_ast_node                : [CursorKind.STRING_LITERAL] spelling=[" Casting string %s to long"] type=[const char[27]] extent=[222:50]->[222:78]
parse_EXPR_node               : [IN] [CursorKind.STRING_LITERAL] " Casting string %s to long"
parse_EXPR_node               : [OUT][Literal] " Casting string %s to long"
parse_EXPR_node               : [OUT][Literal] " Casting string %s to long"
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[222:80]->[222:87]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> name
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[222:80]->[222:87]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> name
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[name] type=[const char *] tokens=[['a', '->', 'name']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'name']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->name]
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][FunctionCall] grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[223:5]->[223:24]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_SUCCESS
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_SUCCESS']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_SUCCESS;
parse_STMT_node               : [OUT][CompoundStatement] {
char val[] = {0};
size_t l = sizeof(val);
size_t i = 0;
char* last = NULL;
int err = grib_unpack_string(a, val, &l;);
if (err)
return 
err;
i = 0;
while (i < l - 1 && val[i] == ' ')
i++;
if (val[i] == 0)
{
*v = 0;
return 
0;
}
if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
*v = strtol(val, &last;, 10);
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int unpack_long(grib_accessor* a, long* v, size_t* len)
                                {
                                char val[] = {0};
                                size_t l = sizeof(val);
                                size_t i = 0;
                                char* last = NULL;
                                int err = grib_unpack_string(a, val, &l;);
                                if (err)
                                return 
                                err;
                                i = 0;
                                while (i < l - 1 && val[i] == ' ')
                                i++;
                                if (val[i] == 0)
                                {
                                *v = 0;
                                return 
                                0;
                                }
                                if (val[i + 1] == ' ' && i < l - 2)
                                val[i + 1] = 0;
                                *v = strtol(val, &last;, 10);
                                grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
                                return 
                                GRIB_SUCCESS;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[227:1]->[245:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { char val [ 1024 ] ; size_t l = sizeof ( val ) ; char * last = NULL ; int err = grib_unpack_string ( a , val , & l ) ; if ( err ) return err ; * v = strtod ( val , & last ) ; if ( * last == 0 ) { grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name ) ; return GRIB_SUCCESS ; } grib_context_log ( a -> context , GRIB_LOG_WARNING , "Cannot unpack %s as double. Hint: Try unpacking as string" , a -> name ) ; return GRIB_NOT_IMPLEMENTED ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[227:1]->[245:2]
dump_node                     :    -> tokens[:10]=[['{', 'char', 'val', '[', '1024', ']', ';', 'size_t', 'l', '=']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[228:5]->[228:20]
dump_node                     :     -> tokens[:10]=[['char', 'val', '[', '1024', ']', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[val] type=[char[1024]] extent=[228:5]->[228:19]
dump_node                     :      -> tokens[:10]=[['char', 'val', '[', '1024', ']']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[228:14]->[228:18]
dump_node                     :       -> tokens[:10]=[['1024']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[229:5]->[229:30]
dump_node                     :     -> tokens[:10]=[['size_t', 'l', '=', 'sizeof', '(', 'val', ')', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[l] type=[size_t] extent=[229:5]->[229:29]
dump_node                     :      -> tokens[:10]=[['size_t', 'l', '=', 'sizeof', '(', 'val', ')']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[229:5]->[229:11]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.CXX_UNARY_EXPR] spelling=[] type=[unsigned long] extent=[229:18]->[229:29]
dump_node                     :       -> tokens[:10]=[['sizeof', '(', 'val', ')']]
dump_node                     :       [6:CursorKind.PAREN_EXPR] spelling=[] type=[char[1024]] extent=[229:24]->[229:29]
dump_node                     :        -> tokens[:10]=[['(', 'val', ')']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[229:25]->[229:28]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[230:5]->[230:23]
dump_node                     :     -> tokens[:10]=[['char', '*', 'last', '=', 'NULL', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[last] type=[char *] extent=[230:5]->[230:22]
dump_node                     :      -> tokens[:10]=[['char', '*', 'last', '=', 'NULL']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[230:18]->[230:22]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.GNU_NULL_EXPR] spelling=[] type=[long] extent=[230:18]->[230:22]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[232:5]->[232:46]
dump_node                     :     -> tokens[:10]=[['int', 'err', '=', 'grib_unpack_string', '(', 'a', ',', 'val', ',', '&']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[err] type=[int] extent=[232:5]->[232:45]
dump_node                     :      -> tokens[:10]=[['int', 'err', '=', 'grib_unpack_string', '(', 'a', ',', 'val', ',', '&']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[232:15]->[232:45]
dump_node                     :       -> tokens[:10]=[['grib_unpack_string', '(', 'a', ',', 'val', ',', '&', 'l', ')']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[232:15]->[232:33]
dump_node                     :        -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[232:15]->[232:33]
dump_node                     :         -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[232:34]->[232:35]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[232:34]->[232:35]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[232:37]->[232:40]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[232:37]->[232:40]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[232:42]->[232:44]
dump_node                     :        -> tokens[:10]=[['&', 'l']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[232:43]->[232:44]
dump_node                     :         -> tokens[:10]=[['l']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[233:5]->[233:24]
dump_node                     :     -> tokens[:10]=[['if', '(', 'err', ')', 'return', 'err']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[233:9]->[233:12]
dump_node                     :      -> tokens[:10]=[['err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[233:9]->[233:12]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[233:9]->[233:12]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :     [4:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[233:14]->[233:24]
dump_node                     :      -> tokens[:10]=[['return', 'err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[233:21]->[233:24]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[233:21]->[233:24]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[double] extent=[235:5]->[235:28]
dump_node                     :     -> tokens[:10]=[['*', 'v', '=', 'strtod', '(', 'val', ',', '&', 'last', ')']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[double] extent=[235:5]->[235:7]
dump_node                     :      -> tokens[:10]=[['*', 'v']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[v] type=[double *] extent=[235:6]->[235:7]
dump_node                     :       -> tokens[:10]=[['v']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[v] type=[double *] extent=[235:6]->[235:7]
dump_node                     :        -> tokens[:10]=[['v']]
dump_node                     :     [4:CursorKind.CALL_EXPR] spelling=[strtod] type=[double] extent=[235:10]->[235:28]
dump_node                     :      -> tokens[:10]=[['strtod', '(', 'val', ',', '&', 'last', ')']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[strtod] type=[double (*)(const char *__restrict, char **__restrict) noexcept(true)] extent=[235:10]->[235:16]
dump_node                     :       -> tokens[:10]=[['strtod']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[strtod] type=[double (const char *__restrict, char **__restrict) noexcept(true)] extent=[235:10]->[235:16]
dump_node                     :        -> tokens[:10]=[['strtod']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[const char *] extent=[235:17]->[235:20]
dump_node                     :       -> tokens[:10]=[['val']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[235:17]->[235:20]
dump_node                     :        -> tokens[:10]=[['val']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[235:17]->[235:20]
dump_node                     :         -> tokens[:10]=[['val']]
dump_node                     :      [5:CursorKind.UNARY_OPERATOR] spelling=[] type=[char **] extent=[235:22]->[235:27]
dump_node                     :       -> tokens[:10]=[['&', 'last']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[last] type=[char *] extent=[235:23]->[235:27]
dump_node                     :        -> tokens[:10]=[['last']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[237:5]->[240:6]
dump_node                     :     -> tokens[:10]=[['if', '(', '*', 'last', '==', '0', ')', '{', 'grib_context_log', '(']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[237:9]->[237:19]
dump_node                     :      -> tokens[:10]=[['*', 'last', '==', '0']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[237:9]->[237:14]
dump_node                     :       -> tokens[:10]=[['*', 'last']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[237:9]->[237:14]
dump_node                     :        -> tokens[:10]=[['*', 'last']]
dump_node                     :        [7:CursorKind.UNARY_OPERATOR] spelling=[] type=[char] extent=[237:9]->[237:14]
dump_node                     :         -> tokens[:10]=[['*', 'last']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[last] type=[char *] extent=[237:10]->[237:14]
dump_node                     :          -> tokens[:10]=[['last']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[last] type=[char *] extent=[237:10]->[237:14]
dump_node                     :           -> tokens[:10]=[['last']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[237:18]->[237:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :     [4:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[237:21]->[240:6]
dump_node                     :      -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_DEBUG', ',', '" Casting string %s to long"']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[238:9]->[238:92]
dump_node                     :       -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_DEBUG', ',', '" Casting string %s to long"', ',']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[238:9]->[238:25]
dump_node                     :        -> tokens[:10]=[['grib_context_log']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[238:9]->[238:25]
dump_node                     :         -> tokens[:10]=[['grib_context_log']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[238:26]->[238:36]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[238:26]->[238:36]
dump_node                     :         -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[238:26]->[238:36]
dump_node                     :          -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:26]->[238:27]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:26]->[238:27]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[238:38]->[238:52]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[238:54]->[238:82]
dump_node                     :        -> tokens[:10]=[['" Casting string %s to long"']]
dump_node                     :        [7:CursorKind.STRING_LITERAL] spelling=[" Casting string %s to long"] type=[const char[27]] extent=[238:54]->[238:82]
dump_node                     :         -> tokens[:10]=[['" Casting string %s to long"']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[238:84]->[238:91]
dump_node                     :        -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :        [7:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[238:84]->[238:91]
dump_node                     :         -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:84]->[238:85]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:84]->[238:85]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :      [5:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[239:9]->[239:28]
dump_node                     :       -> tokens[:10]=[['return', 'GRIB_SUCCESS']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[239:16]->[239:28]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[242:5]->[242:121]
dump_node                     :     -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_WARNING', ',', '"Cannot unpack %s as double. Hint: Try unpacking as string"', ',']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[242:5]->[242:21]
dump_node                     :      -> tokens[:10]=[['grib_context_log']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[242:5]->[242:21]
dump_node                     :       -> tokens[:10]=[['grib_context_log']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[242:22]->[242:32]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[242:22]->[242:32]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[242:22]->[242:32]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[242:22]->[242:23]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[242:22]->[242:23]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[242:34]->[242:50]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[242:52]->[242:111]
dump_node                     :      -> tokens[:10]=[['"Cannot unpack %s as double. Hint: Try unpacking as string"']]
dump_node                     :      [5:CursorKind.STRING_LITERAL] spelling=["Cannot unpack %s as double. Hint: Try unpacking as string"] type=[const char[58]] extent=[242:52]->[242:111]
dump_node                     :       -> tokens[:10]=[['"Cannot unpack %s as double. Hint: Try unpacking as string"']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[242:113]->[242:120]
dump_node                     :      -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :      [5:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[242:113]->[242:120]
dump_node                     :       -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[242:113]->[242:114]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[242:113]->[242:114]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[244:5]->[244:32]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_NOT_IMPLEMENTED']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[244:12]->[244:32]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[244:12]->[244:32]
dump_node                     :       -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[228:5]->[228:20]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] char val [ 1024 ] ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[val] type=[char[1024]] extent=[228:5]->[228:19]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] char val [ 1024 ]
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[228:14]->[228:18]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1024
parse_EXPR_node               : [OUT][Literal] 1024
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[char val[]]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[1024]
parse_DECL_node               : [OUT][VariableDeclaration] char val[] = 1024;
parse_STMT_node               : [OUT][CodeObjects] char val[] = 1024;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[229:5]->[229:30]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] size_t l = sizeof ( val ) ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[l] type=[size_t] extent=[229:5]->[229:29]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] size_t l = sizeof ( val )
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.CXX_UNARY_EXPR] spelling=[] type=[unsigned long] extent=[229:18]->[229:29]
parse_EXPR_node               : [IN] [CursorKind.CXX_UNARY_EXPR] sizeof ( val )
parse_ast_node                : [CursorKind.PAREN_EXPR] spelling=[] type=[char[1024]] extent=[229:24]->[229:29]
parse_EXPR_node               : [IN] [CursorKind.PAREN_EXPR] ( val )
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[229:25]->[229:28]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ParenExpression] (val)
parse_EXPR_node               : [OUT][UnaryExpression] sizeof(val)
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[size_t l]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.unary_expression.UnaryExpression'>.__NAME__] as_string=[sizeof(val)]
parse_DECL_node               : [OUT][VariableDeclaration] size_t l = sizeof(val);
parse_STMT_node               : [OUT][CodeObjects] size_t l = sizeof(val);
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[230:5]->[230:23]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] char * last = NULL ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[last] type=[char *] extent=[230:5]->[230:22]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] char * last = NULL
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[230:18]->[230:22]
parse_macro_instantiation     : MACRO macro_node spelling=[NULL] kind=[CursorKind.MACRO_INSTANTIATION] extent=[230:18 -> 230:22]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[NULL] type=[] extent=[230:18]->[230:22]
dump_node                     :    -> tokens[:10]=[['NULL']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.UNEXPOSED_EXPR] extent=[230:18 -> 230:22]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[230:18]->[230:22]
dump_node                     :    -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.GNU_NULL_EXPR] spelling=[] type=[long] extent=[230:18]->[230:22]
dump_node                     :     -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[char* last]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[NULL]
parse_DECL_node               : [OUT][VariableDeclaration] char* last = NULL;
parse_STMT_node               : [OUT][CodeObjects] char* last = NULL;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[232:5]->[232:46]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] int err = grib_unpack_string ( a , val , & l ) ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[err] type=[int] extent=[232:5]->[232:45]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] int err = grib_unpack_string ( a , val , & l )
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[232:15]->[232:45]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_unpack_string ( a , val , & l )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[232:15]->[232:33]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_unpack_string
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[232:15]->[232:33]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_CALL_EXPR               : cfunc_name=[grib_unpack_string] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[232:34]->[232:35]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[232:34]->[232:35]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[232:37]->[232:40]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[232:37]->[232:40]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[232:42]->[232:44]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] & l
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[&]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[l] type=[size_t] extent=[232:43]->[232:44]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] l
parse_EXPR_node               : [OUT][ValueDeclarationReference] l
parse_EXPR_node               : [OUT][UnaryOperation] &l;
parse_EXPR_node               : [OUT][FunctionCall] grib_unpack_string(a, val, &l;);
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[int err]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.function_call.FunctionCall'>.__NAME__] as_string=[grib_unpack_string(a, val, &l;);]
parse_DECL_node               : [OUT][VariableDeclaration] int err = grib_unpack_string(a, val, &l;);
parse_STMT_node               : [OUT][CodeObjects] int err = grib_unpack_string(a, val, &l;);
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[233:5]->[233:24]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( err ) return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[233:9]->[233:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[233:9]->[233:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[233:9]->[233:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[233:14]->[233:24]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[233:21]->[233:24]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[233:21]->[233:24]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_STMT_node               : [OUT][ReturnStatement] return 
err;
parse_STMT_node               : [OUT][IfStatement] if (err)
return 
err;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[double] extent=[235:5]->[235:28]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] * v = strtod ( val , & last )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNARY_OPERATOR] spelling=[] type=[double] extent=[235:5]->[235:7]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.CALL_EXPR] spelling=[strtod] type=[double] extent=[235:10]->[235:28]
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[double] extent=[235:5]->[235:7]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] * v
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[*]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[v] type=[double *] extent=[235:6]->[235:7]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] v
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[v] type=[double *] extent=[235:6]->[235:7]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] v
parse_EXPR_node               : [OUT][ValueDeclarationReference] v
parse_EXPR_node               : [OUT][ValueDeclarationReference] v
parse_EXPR_node               : [OUT][UnaryOperation] *v;
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[strtod] type=[double] extent=[235:10]->[235:28]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] strtod ( val , & last )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[strtod] type=[double (*)(const char *__restrict, char **__restrict) noexcept(true)] extent=[235:10]->[235:16]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] strtod
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[strtod] type=[double (const char *__restrict, char **__restrict) noexcept(true)] extent=[235:10]->[235:16]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] strtod
parse_EXPR_node               : [OUT][ValueDeclarationReference] strtod
parse_EXPR_node               : [OUT][ValueDeclarationReference] strtod
parse_CALL_EXPR               : cfunc_name=[strtod] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[const char *] extent=[235:17]->[235:20]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[val] type=[char *] extent=[235:17]->[235:20]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] val
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[val] type=[char[1024]] extent=[235:17]->[235:20]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_EXPR_node               : [OUT][ValueDeclarationReference] val
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[char **] extent=[235:22]->[235:27]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] & last
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[&]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[last] type=[char *] extent=[235:23]->[235:27]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] last
parse_EXPR_node               : [OUT][ValueDeclarationReference] last
parse_EXPR_node               : [OUT][UnaryOperation] &last;
parse_EXPR_node               : [OUT][FunctionCall] strtod(val, &last;);
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[*v;] operator_token=[=] right_operand_cvalue=[strtod(val, &last;);]
parse_EXPR_node               : [OUT][BinaryOperation] *v = strtod(val, &last;);
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[237:5]->[240:6]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( * last == 0 ) { grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name ) ; return GRIB_SUCCESS ; }
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[237:9]->[237:19]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] * last == 0
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[237:9]->[237:14]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[237:18]->[237:19]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[int] extent=[237:9]->[237:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] * last
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char] extent=[237:9]->[237:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] * last
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[char] extent=[237:9]->[237:14]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] * last
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[*]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[last] type=[char *] extent=[237:10]->[237:14]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] last
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[last] type=[char *] extent=[237:10]->[237:14]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] last
parse_EXPR_node               : [OUT][ValueDeclarationReference] last
parse_EXPR_node               : [OUT][ValueDeclarationReference] last
parse_EXPR_node               : [OUT][UnaryOperation] *last;
parse_EXPR_node               : [OUT][UnaryOperation] *last;
parse_EXPR_node               : [OUT][UnaryOperation] *last;
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[237:18]->[237:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[*last;] operator_token=[==] right_operand_cvalue=[0]
parse_EXPR_node               : [OUT][BinaryOperation] *last == 0
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[237:21]->[240:6]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name ) ; return GRIB_SUCCESS ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[237:21]->[240:6]
dump_node                     :    -> tokens[:10]=[['{', 'grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_DEBUG', ',', '" Casting string %s to long"']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[238:9]->[238:92]
dump_node                     :     -> tokens[:10]=[['grib_context_log', '(', 'a', '->', 'context', ',', 'GRIB_LOG_DEBUG', ',', '" Casting string %s to long"', ',']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[238:9]->[238:25]
dump_node                     :      -> tokens[:10]=[['grib_context_log']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[238:9]->[238:25]
dump_node                     :       -> tokens[:10]=[['grib_context_log']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[238:26]->[238:36]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[238:26]->[238:36]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[238:26]->[238:36]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:26]->[238:27]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:26]->[238:27]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[238:38]->[238:52]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[238:54]->[238:82]
dump_node                     :      -> tokens[:10]=[['" Casting string %s to long"']]
dump_node                     :      [5:CursorKind.STRING_LITERAL] spelling=[" Casting string %s to long"] type=[const char[27]] extent=[238:54]->[238:82]
dump_node                     :       -> tokens[:10]=[['" Casting string %s to long"']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[238:84]->[238:91]
dump_node                     :      -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :      [5:CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[238:84]->[238:91]
dump_node                     :       -> tokens[:10]=[['a', '->', 'name']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:84]->[238:85]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[238:84]->[238:85]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[239:9]->[239:28]
dump_node                     :     -> tokens[:10]=[['return', 'GRIB_SUCCESS']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[239:16]->[239:28]
dump_node                     :      -> tokens[:10]=[[]]
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[238:9]->[238:92]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_log ( a -> context , GRIB_LOG_DEBUG , " Casting string %s to long" , a -> name )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[238:9]->[238:25]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_log
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[238:9]->[238:25]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_CALL_EXPR               : cfunc_name=[grib_context_log] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[238:26]->[238:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[238:26]->[238:36]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[238:26]->[238:36]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[238:38]->[238:52]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_LOG_DEBUG] kind=[CursorKind.MACRO_INSTANTIATION] extent=[238:38 -> 238:52]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_LOG_DEBUG] type=[] extent=[238:38]->[238:52]
dump_node                     :    -> tokens[:10]=[['GRIB_LOG_DEBUG']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[238:38 -> 238:52]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[238:38]->[238:52]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[238:54]->[238:82]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] " Casting string %s to long"
parse_ast_node                : [CursorKind.STRING_LITERAL] spelling=[" Casting string %s to long"] type=[const char[27]] extent=[238:54]->[238:82]
parse_EXPR_node               : [IN] [CursorKind.STRING_LITERAL] " Casting string %s to long"
parse_EXPR_node               : [OUT][Literal] " Casting string %s to long"
parse_EXPR_node               : [OUT][Literal] " Casting string %s to long"
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[238:84]->[238:91]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> name
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[238:84]->[238:91]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> name
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[name] type=[const char *] tokens=[['a', '->', 'name']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'name']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->name]
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][FunctionCall] grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[239:9]->[239:28]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_SUCCESS
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_SUCCESS']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_SUCCESS;
parse_STMT_node               : [OUT][CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
parse_STMT_node               : [OUT][IfStatement] if (*last == 0)
{
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_log] type=[void] extent=[242:5]->[242:121]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_log ( a -> context , GRIB_LOG_WARNING , "Cannot unpack %s as double. Hint: Try unpacking as string" , a -> name )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_log] type=[void (*)(const grib_context *, int, const char *, ...)] extent=[242:5]->[242:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_log
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_log] type=[void (const grib_context *, int, const char *, ...)] extent=[242:5]->[242:21]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_log
parse_CALL_EXPR               : cfunc_name=[grib_context_log] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[242:22]->[242:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[242:22]->[242:32]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[242:22]->[242:32]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[242:34]->[242:50]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_LOG_WARNING] kind=[CursorKind.MACRO_INSTANTIATION] extent=[242:34 -> 242:50]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_LOG_WARNING] type=[] extent=[242:34]->[242:50]
dump_node                     :    -> tokens[:10]=[['GRIB_LOG_WARNING']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[242:34 -> 242:50]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[242:34]->[242:50]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[242:52]->[242:111]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] "Cannot unpack %s as double. Hint: Try unpacking as string"
parse_ast_node                : [CursorKind.STRING_LITERAL] spelling=["Cannot unpack %s as double. Hint: Try unpacking as string"] type=[const char[58]] extent=[242:52]->[242:111]
parse_EXPR_node               : [IN] [CursorKind.STRING_LITERAL] "Cannot unpack %s as double. Hint: Try unpacking as string"
parse_EXPR_node               : [OUT][Literal] "Cannot unpack %s as double. Hint: Try unpacking as string"
parse_EXPR_node               : [OUT][Literal] "Cannot unpack %s as double. Hint: Try unpacking as string"
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[name] type=[const char *] extent=[242:113]->[242:120]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> name
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[name] type=[const char *] extent=[242:113]->[242:120]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> name
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[name] type=[const char *] tokens=[['a', '->', 'name']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'name']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->name]
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][StructMemberAccess] a->name
parse_EXPR_node               : [OUT][FunctionCall] grib_context_log(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[244:5]->[244:32]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_NOT_IMPLEMENTED
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_NOT_IMPLEMENTED']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_NOT_IMPLEMENTED;
parse_STMT_node               : [OUT][CompoundStatement] {
char val[] = 1024;
size_t l = sizeof(val);
char* last = NULL;
int err = grib_unpack_string(a, val, &l;);
if (err)
return 
err;
*v = strtod(val, &last;);
if (*last == 0)
{
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
grib_context_log(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int unpack_double(grib_accessor* a, double* v, size_t* len)
                                {
                                char val[] = 1024;
                                size_t l = sizeof(val);
                                char* last = NULL;
                                int err = grib_unpack_string(a, val, &l;);
                                if (err)
                                return 
                                err;
                                *v = strtod(val, &last;);
                                if (*last == 0)
                                {
                                grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
                                return 
                                GRIB_SUCCESS;
                                }
                                grib_context_log(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
                                return 
                                GRIB_NOT_IMPLEMENTED;
                                }
to_ccode_objects              : [IN] ==========================================================================================
parse_ast_node                : [CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[248:1]->[276:2]
parse_STMT_node               : [IN] [CursorKind.COMPOUND_STMT] { int retval = 0 ; char * aval = 0 ; char * bval = 0 ; int err = 0 ; size_t alen = a -> length + 1 ; size_t blen = b -> length + 1 ; if ( alen != blen ) return GRIB_COUNT_MISMATCH ; aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) ) ; bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) ) ; err = grib_unpack_string ( a , aval , & alen ) ; if ( err ) return err ; err = grib_unpack_string ( b , bval , & blen ) ; if ( err ) return err ; retval = GRIB_SUCCESS ; if ( ! STR_EQUAL ( aval , bval ) ) retval = GRIB_STRING_VALUE_MISMATCH ; grib_context_free ( a -> context , aval ) ; grib_context_free ( b -> context , bval ) ; return retval ; }
parse_COMPOUND_STMT           : Dumping node for MACRO INFO:
dump_node                     :   [2:CursorKind.COMPOUND_STMT] spelling=[] type=[] extent=[248:1]->[276:2]
dump_node                     :    -> tokens[:10]=[['{', 'int', 'retval', '=', '0', ';', 'char', '*', 'aval', '=']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[249:5]->[249:20]
dump_node                     :     -> tokens[:10]=[['int', 'retval', '=', '0', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[retval] type=[int] extent=[249:5]->[249:19]
dump_node                     :      -> tokens[:10]=[['int', 'retval', '=', '0']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[249:18]->[249:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[250:5]->[250:20]
dump_node                     :     -> tokens[:10]=[['char', '*', 'aval', '=', '0', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[aval] type=[char *] extent=[250:5]->[250:19]
dump_node                     :      -> tokens[:10]=[['char', '*', 'aval', '=', '0']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[250:18]->[250:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[250:18]->[250:19]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[251:5]->[251:20]
dump_node                     :     -> tokens[:10]=[['char', '*', 'bval', '=', '0', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[bval] type=[char *] extent=[251:5]->[251:19]
dump_node                     :      -> tokens[:10]=[['char', '*', 'bval', '=', '0']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[251:18]->[251:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[251:18]->[251:19]
dump_node                     :        -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[252:5]->[252:20]
dump_node                     :     -> tokens[:10]=[['int', 'err', '=', '0', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[err] type=[int] extent=[252:5]->[252:19]
dump_node                     :      -> tokens[:10]=[['int', 'err', '=', '0']]
dump_node                     :      [5:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[252:18]->[252:19]
dump_node                     :       -> tokens[:10]=[['0']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[254:5]->[254:31]
dump_node                     :     -> tokens[:10]=[['size_t', 'alen', '=', 'a', '->', 'length', '+', '1', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[alen] type=[size_t] extent=[254:5]->[254:30]
dump_node                     :      -> tokens[:10]=[['size_t', 'alen', '=', 'a', '->', 'length', '+', '1']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[254:5]->[254:11]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[254:19]->[254:30]
dump_node                     :       -> tokens[:10]=[['a', '->', 'length', '+', '1']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[254:19]->[254:30]
dump_node                     :        -> tokens[:10]=[['a', '->', 'length', '+', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[254:19]->[254:28]
dump_node                     :         -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[254:19]->[254:28]
dump_node                     :          -> tokens[:10]=[['a', '->', 'length']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[254:19]->[254:20]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[254:19]->[254:20]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[254:29]->[254:30]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[254:29]->[254:30]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :    [3:CursorKind.DECL_STMT] spelling=[] type=[] extent=[255:5]->[255:31]
dump_node                     :     -> tokens[:10]=[['size_t', 'blen', '=', 'b', '->', 'length', '+', '1', ';']]
dump_node                     :     [4:CursorKind.VAR_DECL] spelling=[blen] type=[size_t] extent=[255:5]->[255:30]
dump_node                     :      -> tokens[:10]=[['size_t', 'blen', '=', 'b', '->', 'length', '+', '1']]
dump_node                     :      [5:CursorKind.TYPE_REF] spelling=[size_t] type=[size_t] extent=[255:5]->[255:11]
dump_node                     :       -> tokens[:10]=[['size_t']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[255:19]->[255:30]
dump_node                     :       -> tokens[:10]=[['b', '->', 'length', '+', '1']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[255:19]->[255:30]
dump_node                     :        -> tokens[:10]=[['b', '->', 'length', '+', '1']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[255:19]->[255:28]
dump_node                     :         -> tokens[:10]=[['b', '->', 'length']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[255:19]->[255:28]
dump_node                     :          -> tokens[:10]=[['b', '->', 'length']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[b] type=[grib_accessor *] extent=[255:19]->[255:20]
dump_node                     :           -> tokens[:10]=[['b']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[b] type=[grib_accessor *] extent=[255:19]->[255:20]
dump_node                     :            -> tokens[:10]=[['b']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[255:29]->[255:30]
dump_node                     :         -> tokens[:10]=[['1']]
dump_node                     :         [8:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[255:29]->[255:30]
dump_node                     :          -> tokens[:10]=[['1']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[257:5]->[258:35]
dump_node                     :     -> tokens[:10]=[['if', '(', 'alen', '!=', 'blen', ')', 'return', 'GRIB_COUNT_MISMATCH']]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[257:9]->[257:21]
dump_node                     :      -> tokens[:10]=[['alen', '!=', 'blen']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[257:9]->[257:13]
dump_node                     :       -> tokens[:10]=[['alen']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[alen] type=[size_t] extent=[257:9]->[257:13]
dump_node                     :        -> tokens[:10]=[['alen']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[blen] type=[size_t] extent=[257:17]->[257:21]
dump_node                     :       -> tokens[:10]=[['blen']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[blen] type=[size_t] extent=[257:17]->[257:21]
dump_node                     :        -> tokens[:10]=[['blen']]
dump_node                     :     [4:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[258:9]->[258:35]
dump_node                     :      -> tokens[:10]=[['return', 'GRIB_COUNT_MISMATCH']]
dump_node                     :      [5:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[258:16]->[258:35]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[258:16]->[258:35]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[char *] extent=[260:5]->[260:71]
dump_node                     :     -> tokens[:10]=[['aval', '=', '(', 'char', '*', ')', 'grib_context_malloc', '(', 'a', '->']]
dump_node                     :     [4:CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[260:5]->[260:9]
dump_node                     :      -> tokens[:10]=[['aval']]
dump_node                     :     [4:CursorKind.CSTYLE_CAST_EXPR] spelling=[] type=[char *] extent=[260:12]->[260:71]
dump_node                     :      -> tokens[:10]=[['(', 'char', '*', ')', 'grib_context_malloc', '(', 'a', '->', 'context', ',']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_context_malloc] type=[void *] extent=[260:19]->[260:71]
dump_node                     :       -> tokens[:10]=[['grib_context_malloc', '(', 'a', '->', 'context', ',', 'alen', '*', 'sizeof', '(']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_malloc] type=[void *(*)(const grib_context *, size_t)] extent=[260:19]->[260:38]
dump_node                     :        -> tokens[:10]=[['grib_context_malloc']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_context_malloc] type=[void *(const grib_context *, size_t)] extent=[260:19]->[260:38]
dump_node                     :         -> tokens[:10]=[['grib_context_malloc']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[260:39]->[260:49]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[260:39]->[260:49]
dump_node                     :         -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[260:39]->[260:49]
dump_node                     :          -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[260:39]->[260:40]
dump_node                     :           -> tokens[:10]=[['a']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[260:39]->[260:40]
dump_node                     :            -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned long] extent=[260:51]->[260:70]
dump_node                     :        -> tokens[:10]=[['alen', '*', 'sizeof', '(', 'char', ')']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[260:51]->[260:55]
dump_node                     :         -> tokens[:10]=[['alen']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[alen] type=[size_t] extent=[260:51]->[260:55]
dump_node                     :          -> tokens[:10]=[['alen']]
dump_node                     :        [7:CursorKind.CXX_UNARY_EXPR] spelling=[] type=[unsigned long] extent=[260:58]->[260:70]
dump_node                     :         -> tokens[:10]=[['sizeof', '(', 'char', ')']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[char *] extent=[261:5]->[261:71]
dump_node                     :     -> tokens[:10]=[['bval', '=', '(', 'char', '*', ')', 'grib_context_malloc', '(', 'b', '->']]
dump_node                     :     [4:CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[261:5]->[261:9]
dump_node                     :      -> tokens[:10]=[['bval']]
dump_node                     :     [4:CursorKind.CSTYLE_CAST_EXPR] spelling=[] type=[char *] extent=[261:12]->[261:71]
dump_node                     :      -> tokens[:10]=[['(', 'char', '*', ')', 'grib_context_malloc', '(', 'b', '->', 'context', ',']]
dump_node                     :      [5:CursorKind.CALL_EXPR] spelling=[grib_context_malloc] type=[void *] extent=[261:19]->[261:71]
dump_node                     :       -> tokens[:10]=[['grib_context_malloc', '(', 'b', '->', 'context', ',', 'blen', '*', 'sizeof', '(']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_malloc] type=[void *(*)(const grib_context *, size_t)] extent=[261:19]->[261:38]
dump_node                     :        -> tokens[:10]=[['grib_context_malloc']]
dump_node                     :        [7:CursorKind.DECL_REF_EXPR] spelling=[grib_context_malloc] type=[void *(const grib_context *, size_t)] extent=[261:19]->[261:38]
dump_node                     :         -> tokens[:10]=[['grib_context_malloc']]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[261:39]->[261:49]
dump_node                     :        -> tokens[:10]=[['b', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[261:39]->[261:49]
dump_node                     :         -> tokens[:10]=[['b', '->', 'context']]
dump_node                     :         [8:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[261:39]->[261:49]
dump_node                     :          -> tokens[:10]=[['b', '->', 'context']]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[b] type=[grib_accessor *] extent=[261:39]->[261:40]
dump_node                     :           -> tokens[:10]=[['b']]
dump_node                     :           [10:CursorKind.DECL_REF_EXPR] spelling=[b] type=[grib_accessor *] extent=[261:39]->[261:40]
dump_node                     :            -> tokens[:10]=[['b']]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[unsigned long] extent=[261:51]->[261:70]
dump_node                     :        -> tokens[:10]=[['blen', '*', 'sizeof', '(', 'char', ')']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[blen] type=[size_t] extent=[261:51]->[261:55]
dump_node                     :         -> tokens[:10]=[['blen']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[blen] type=[size_t] extent=[261:51]->[261:55]
dump_node                     :          -> tokens[:10]=[['blen']]
dump_node                     :        [7:CursorKind.CXX_UNARY_EXPR] spelling=[] type=[unsigned long] extent=[261:58]->[261:70]
dump_node                     :         -> tokens[:10]=[['sizeof', '(', 'char', ')']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[263:5]->[263:45]
dump_node                     :     -> tokens[:10]=[['err', '=', 'grib_unpack_string', '(', 'a', ',', 'aval', ',', '&', 'alen']]
dump_node                     :     [4:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[263:5]->[263:8]
dump_node                     :      -> tokens[:10]=[['err']]
dump_node                     :     [4:CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[263:11]->[263:45]
dump_node                     :      -> tokens[:10]=[['grib_unpack_string', '(', 'a', ',', 'aval', ',', '&', 'alen', ')']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[263:11]->[263:29]
dump_node                     :       -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[263:11]->[263:29]
dump_node                     :        -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[263:30]->[263:31]
dump_node                     :       -> tokens[:10]=[['a']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[263:30]->[263:31]
dump_node                     :        -> tokens[:10]=[['a']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[aval] type=[char *] extent=[263:33]->[263:37]
dump_node                     :       -> tokens[:10]=[['aval']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[263:33]->[263:37]
dump_node                     :        -> tokens[:10]=[['aval']]
dump_node                     :      [5:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[263:39]->[263:44]
dump_node                     :       -> tokens[:10]=[['&', 'alen']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[alen] type=[size_t] extent=[263:40]->[263:44]
dump_node                     :        -> tokens[:10]=[['alen']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[264:5]->[264:24]
dump_node                     :     -> tokens[:10]=[['if', '(', 'err', ')', 'return', 'err']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[264:9]->[264:12]
dump_node                     :      -> tokens[:10]=[['err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[264:9]->[264:12]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[264:9]->[264:12]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :     [4:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[264:14]->[264:24]
dump_node                     :      -> tokens[:10]=[['return', 'err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[264:21]->[264:24]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[264:21]->[264:24]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[265:5]->[265:45]
dump_node                     :     -> tokens[:10]=[['err', '=', 'grib_unpack_string', '(', 'b', ',', 'bval', ',', '&', 'blen']]
dump_node                     :     [4:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[265:5]->[265:8]
dump_node                     :      -> tokens[:10]=[['err']]
dump_node                     :     [4:CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[265:11]->[265:45]
dump_node                     :      -> tokens[:10]=[['grib_unpack_string', '(', 'b', ',', 'bval', ',', '&', 'blen', ')']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[265:11]->[265:29]
dump_node                     :       -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[265:11]->[265:29]
dump_node                     :        -> tokens[:10]=[['grib_unpack_string']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[b] type=[grib_accessor *] extent=[265:30]->[265:31]
dump_node                     :       -> tokens[:10]=[['b']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[b] type=[grib_accessor *] extent=[265:30]->[265:31]
dump_node                     :        -> tokens[:10]=[['b']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[bval] type=[char *] extent=[265:33]->[265:37]
dump_node                     :       -> tokens[:10]=[['bval']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[265:33]->[265:37]
dump_node                     :        -> tokens[:10]=[['bval']]
dump_node                     :      [5:CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[265:39]->[265:44]
dump_node                     :       -> tokens[:10]=[['&', 'blen']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[blen] type=[size_t] extent=[265:40]->[265:44]
dump_node                     :        -> tokens[:10]=[['blen']]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[266:5]->[266:24]
dump_node                     :     -> tokens[:10]=[['if', '(', 'err', ')', 'return', 'err']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[266:9]->[266:12]
dump_node                     :      -> tokens[:10]=[['err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[266:9]->[266:12]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[266:9]->[266:12]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :     [4:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[266:14]->[266:24]
dump_node                     :      -> tokens[:10]=[['return', 'err']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[266:21]->[266:24]
dump_node                     :       -> tokens[:10]=[['err']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[266:21]->[266:24]
dump_node                     :        -> tokens[:10]=[['err']]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[268:5]->[268:26]
dump_node                     :     -> tokens[:10]=[['retval', '=', 'GRIB_SUCCESS']]
dump_node                     :     [4:CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[268:5]->[268:11]
dump_node                     :      -> tokens[:10]=[['retval']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[268:14]->[268:26]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.IF_STMT] spelling=[] type=[] extent=[269:5]->[270:44]
dump_node                     :     -> tokens[:10]=[['if', '(', '!', 'STR_EQUAL', '(', 'aval', ',', 'bval', ')', ')']]
dump_node                     :     [4:CursorKind.UNARY_OPERATOR] spelling=[] type=[bool] extent=[269:9]->[269:31]
dump_node                     :      -> tokens[:10]=[['!', 'STR_EQUAL', '(', 'aval', ',', 'bval', ')']]
dump_node                     :      [5:CursorKind.PAREN_EXPR] spelling=[] type=[bool] extent=[269:10]->[269:31]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[269:10]->[269:31]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.CALL_EXPR] spelling=[strcmp] type=[int] extent=[269:10]->[269:31]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[strcmp] type=[int (*)(const char *, const char *) noexcept(true)] extent=[269:10]->[269:31]
dump_node                     :          -> tokens[:10]=[[]]
dump_node                     :          [9:CursorKind.DECL_REF_EXPR] spelling=[strcmp] type=[int (const char *, const char *) noexcept(true)] extent=[269:10]->[269:31]
dump_node                     :           -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[269:10]->[269:31]
dump_node                     :          -> tokens[:10]=[[]]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :           -> tokens[:10]=[[]]
dump_node                     :           [10:CursorKind.PAREN_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :            -> tokens[:10]=[[]]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[269:10]->[269:10]
dump_node                     :             -> tokens[:10]=[['aval']]
dump_node                     :         [8:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[269:10]->[269:31]
dump_node                     :          -> tokens[:10]=[[]]
dump_node                     :          [9:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :           -> tokens[:10]=[[]]
dump_node                     :           [10:CursorKind.PAREN_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :            -> tokens[:10]=[[]]
dump_node                     :            [11:CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[269:10]->[269:10]
dump_node                     :             -> tokens[:10]=[['bval']]
dump_node                     :        [7:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[269:10]->[269:31]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[270:9]->[270:44]
dump_node                     :      -> tokens[:10]=[['retval', '=', 'GRIB_STRING_VALUE_MISMATCH']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[270:9]->[270:15]
dump_node                     :       -> tokens[:10]=[['retval']]
dump_node                     :      [5:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[270:18]->[270:44]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[270:18]->[270:44]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_free] type=[void] extent=[272:5]->[272:40]
dump_node                     :     -> tokens[:10]=[['grib_context_free', '(', 'a', '->', 'context', ',', 'aval', ')']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_free] type=[void (*)(const grib_context *, void *)] extent=[272:5]->[272:22]
dump_node                     :      -> tokens[:10]=[['grib_context_free']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_free] type=[void (const grib_context *, void *)] extent=[272:5]->[272:22]
dump_node                     :       -> tokens[:10]=[['grib_context_free']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[272:23]->[272:33]
dump_node                     :      -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[272:23]->[272:33]
dump_node                     :       -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[272:23]->[272:33]
dump_node                     :        -> tokens[:10]=[['a', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[272:23]->[272:24]
dump_node                     :         -> tokens[:10]=[['a']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[272:23]->[272:24]
dump_node                     :          -> tokens[:10]=[['a']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[aval] type=[void *] extent=[272:35]->[272:39]
dump_node                     :      -> tokens[:10]=[['aval']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[aval] type=[char *] extent=[272:35]->[272:39]
dump_node                     :       -> tokens[:10]=[['aval']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[272:35]->[272:39]
dump_node                     :        -> tokens[:10]=[['aval']]
dump_node                     :    [3:CursorKind.CALL_EXPR] spelling=[grib_context_free] type=[void] extent=[273:5]->[273:40]
dump_node                     :     -> tokens[:10]=[['grib_context_free', '(', 'b', '->', 'context', ',', 'bval', ')']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_free] type=[void (*)(const grib_context *, void *)] extent=[273:5]->[273:22]
dump_node                     :      -> tokens[:10]=[['grib_context_free']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[grib_context_free] type=[void (const grib_context *, void *)] extent=[273:5]->[273:22]
dump_node                     :       -> tokens[:10]=[['grib_context_free']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[273:23]->[273:33]
dump_node                     :      -> tokens[:10]=[['b', '->', 'context']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[273:23]->[273:33]
dump_node                     :       -> tokens[:10]=[['b', '->', 'context']]
dump_node                     :       [6:CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[273:23]->[273:33]
dump_node                     :        -> tokens[:10]=[['b', '->', 'context']]
dump_node                     :        [7:CursorKind.UNEXPOSED_EXPR] spelling=[b] type=[grib_accessor *] extent=[273:23]->[273:24]
dump_node                     :         -> tokens[:10]=[['b']]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[b] type=[grib_accessor *] extent=[273:23]->[273:24]
dump_node                     :          -> tokens[:10]=[['b']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[bval] type=[void *] extent=[273:35]->[273:39]
dump_node                     :      -> tokens[:10]=[['bval']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[bval] type=[char *] extent=[273:35]->[273:39]
dump_node                     :       -> tokens[:10]=[['bval']]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[273:35]->[273:39]
dump_node                     :        -> tokens[:10]=[['bval']]
dump_node                     :    [3:CursorKind.RETURN_STMT] spelling=[] type=[] extent=[275:5]->[275:18]
dump_node                     :     -> tokens[:10]=[['return', 'retval']]
dump_node                     :     [4:CursorKind.UNEXPOSED_EXPR] spelling=[retval] type=[int] extent=[275:12]->[275:18]
dump_node                     :      -> tokens[:10]=[['retval']]
dump_node                     :      [5:CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[275:12]->[275:18]
dump_node                     :       -> tokens[:10]=[['retval']]
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[249:5]->[249:20]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] int retval = 0 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[retval] type=[int] extent=[249:5]->[249:19]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] int retval = 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[249:18]->[249:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[int retval]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[0]
parse_DECL_node               : [OUT][VariableDeclaration] int retval = 0;
parse_STMT_node               : [OUT][CodeObjects] int retval = 0;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[250:5]->[250:20]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] char * aval = 0 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[aval] type=[char *] extent=[250:5]->[250:19]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] char * aval = 0
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[250:18]->[250:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[250:18]->[250:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[char* aval]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[0]
parse_DECL_node               : [OUT][VariableDeclaration] char* aval = 0;
parse_STMT_node               : [OUT][CodeObjects] char* aval = 0;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[251:5]->[251:20]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] char * bval = 0 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[bval] type=[char *] extent=[251:5]->[251:19]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] char * bval = 0
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[251:18]->[251:19]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[251:18]->[251:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[char* bval]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[0]
parse_DECL_node               : [OUT][VariableDeclaration] char* bval = 0;
parse_STMT_node               : [OUT][CodeObjects] char* bval = 0;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[252:5]->[252:20]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] int err = 0 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[err] type=[int] extent=[252:5]->[252:19]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] int err = 0
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[252:18]->[252:19]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 0
parse_EXPR_node               : [OUT][Literal] 0
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[int err]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.literal.Literal'>.__NAME__] as_string=[0]
parse_DECL_node               : [OUT][VariableDeclaration] int err = 0;
parse_STMT_node               : [OUT][CodeObjects] int err = 0;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[254:5]->[254:31]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] size_t alen = a -> length + 1 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[alen] type=[size_t] extent=[254:5]->[254:30]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] size_t alen = a -> length + 1
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[254:19]->[254:30]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length + 1
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[254:19]->[254:30]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] a -> length + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[254:19]->[254:28]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[254:29]->[254:30]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[254:19]->[254:28]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[254:19]->[254:28]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['a', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->length]
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_EXPR_node               : [OUT][StructMemberAccess] a->length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[254:29]->[254:30]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[254:29]->[254:30]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[a->length] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] a->length + 1
parse_EXPR_node               : [OUT][BinaryOperation] a->length + 1
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[size_t alen]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.binary_operation.BinaryOperation'>.__NAME__] as_string=[a->length + 1]
parse_DECL_node               : [OUT][VariableDeclaration] size_t alen = a->length + 1;
parse_STMT_node               : [OUT][CodeObjects] size_t alen = a->length + 1;
parse_ast_node                : [CursorKind.DECL_STMT] spelling=[] type=[] extent=[255:5]->[255:31]
parse_STMT_node               : [IN] [CursorKind.DECL_STMT] size_t blen = b -> length + 1 ;
parse_ast_node                : [CursorKind.VAR_DECL] spelling=[blen] type=[size_t] extent=[255:5]->[255:30]
parse_DECL_node               : [IN] [CursorKind.VAR_DECL] size_t blen = b -> length + 1
parse_VAR_DECL                : Ignoring child spelling=[size_t] type=[size_t] kind=[CursorKind.TYPE_REF]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[size_t] extent=[255:19]->[255:30]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] b -> length + 1
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[long] extent=[255:19]->[255:30]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] b -> length + 1
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[255:19]->[255:28]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[255:29]->[255:30]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[length] type=[long] extent=[255:19]->[255:28]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] b -> length
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[length] type=[long] extent=[255:19]->[255:28]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] b -> length
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[length] type=[long] tokens=[['b', '->', 'length']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'length']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[b->length]
parse_EXPR_node               : [OUT][StructMemberAccess] b->length
parse_EXPR_node               : [OUT][StructMemberAccess] b->length
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[] type=[long] extent=[255:29]->[255:30]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] 1
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[255:29]->[255:30]
parse_EXPR_node               : [IN] [CursorKind.INTEGER_LITERAL] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_EXPR_node               : [OUT][Literal] 1
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[b->length] operator_token=[+] right_operand_cvalue=[1]
parse_EXPR_node               : [OUT][BinaryOperation] b->length + 1
parse_EXPR_node               : [OUT][BinaryOperation] b->length + 1
parse_VAR_DECL                : DEBUG: cvariable type=[<class 'code_object.arg.Arg'>.__NAME__] as_string=[size_t blen]
parse_VAR_DECL                : DEBUG: cvalue    type=[<class 'code_object.binary_operation.BinaryOperation'>.__NAME__] as_string=[b->length + 1]
parse_DECL_node               : [OUT][VariableDeclaration] size_t blen = b->length + 1;
parse_STMT_node               : [OUT][CodeObjects] size_t blen = b->length + 1;
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[257:5]->[258:35]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( alen != blen ) return GRIB_COUNT_MISMATCH
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[257:9]->[257:21]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] alen != blen
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[257:9]->[257:13]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNEXPOSED_EXPR] spelling=[blen] type=[size_t] extent=[257:17]->[257:21]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[alen] type=[size_t] extent=[257:9]->[257:13]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] alen
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[alen] type=[size_t] extent=[257:9]->[257:13]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[blen] type=[size_t] extent=[257:17]->[257:21]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] blen
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[blen] type=[size_t] extent=[257:17]->[257:21]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] blen
parse_EXPR_node               : [OUT][ValueDeclarationReference] blen
parse_EXPR_node               : [OUT][ValueDeclarationReference] blen
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[alen] operator_token=[!=] right_operand_cvalue=[blen]
parse_EXPR_node               : [OUT][BinaryOperation] alen != blen
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[258:9]->[258:35]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return GRIB_COUNT_MISMATCH
parse_RETURN_STMT             : The return value has no tokens: using the top-level tokens=[['GRIB_COUNT_MISMATCH']]
parse_STMT_node               : [OUT][ReturnStatement] return 
GRIB_COUNT_MISMATCH;
parse_STMT_node               : [OUT][IfStatement] if (alen != blen)
return 
GRIB_COUNT_MISMATCH;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[char *] extent=[260:5]->[260:71]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[260:5]->[260:9]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.CSTYLE_CAST_EXPR] spelling=[] type=[char *] extent=[260:12]->[260:71]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[260:5]->[260:9]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] aval
parse_EXPR_node               : [OUT][ValueDeclarationReference] aval
parse_ast_node                : [CursorKind.CSTYLE_CAST_EXPR] spelling=[] type=[char *] extent=[260:12]->[260:71]
parse_EXPR_node               : [IN] [CursorKind.CSTYLE_CAST_EXPR] ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
parse_CSTYLE_CAST_EXPR        : *** IGNORING *** child spelling=[grib_context_malloc] type=[void *] kind=[CursorKind.CALL_EXPR]
parse_EXPR_node               : [OUT][NoneType] None
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[aval] operator_token=[=] right_operand_cvalue=[None]
parse_EXPR_node               : [OUT][Literal] // [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[char *] extent=[261:5]->[261:71]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[261:5]->[261:9]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.CSTYLE_CAST_EXPR] spelling=[] type=[char *] extent=[261:12]->[261:71]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[261:5]->[261:9]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] bval
parse_EXPR_node               : [OUT][ValueDeclarationReference] bval
parse_ast_node                : [CursorKind.CSTYLE_CAST_EXPR] spelling=[] type=[char *] extent=[261:12]->[261:71]
parse_EXPR_node               : [IN] [CursorKind.CSTYLE_CAST_EXPR] ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
parse_CSTYLE_CAST_EXPR        : *** IGNORING *** child spelling=[grib_context_malloc] type=[void *] kind=[CursorKind.CALL_EXPR]
parse_EXPR_node               : [OUT][NoneType] None
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[bval] operator_token=[=] right_operand_cvalue=[None]
parse_EXPR_node               : [OUT][Literal] // [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[263:5]->[263:45]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] err = grib_unpack_string ( a , aval , & alen )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[263:5]->[263:8]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[263:11]->[263:45]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[263:5]->[263:8]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[263:11]->[263:45]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_unpack_string ( a , aval , & alen )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[263:11]->[263:29]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_unpack_string
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[263:11]->[263:29]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_CALL_EXPR               : cfunc_name=[grib_unpack_string] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[a] type=[grib_accessor *] extent=[263:30]->[263:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[a] type=[grib_accessor *] extent=[263:30]->[263:31]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_EXPR_node               : [OUT][ValueDeclarationReference] a
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[aval] type=[char *] extent=[263:33]->[263:37]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] aval
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[263:33]->[263:37]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] aval
parse_EXPR_node               : [OUT][ValueDeclarationReference] aval
parse_EXPR_node               : [OUT][ValueDeclarationReference] aval
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[263:39]->[263:44]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] & alen
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[&]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[alen] type=[size_t] extent=[263:40]->[263:44]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] alen
parse_EXPR_node               : [OUT][ValueDeclarationReference] alen
parse_EXPR_node               : [OUT][UnaryOperation] &alen;
parse_EXPR_node               : [OUT][FunctionCall] grib_unpack_string(a, aval, &alen;);
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[err] operator_token=[=] right_operand_cvalue=[grib_unpack_string(a, aval, &alen;);]
parse_EXPR_node               : [OUT][BinaryOperation] err = grib_unpack_string(a, aval, &alen;);
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[264:5]->[264:24]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( err ) return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[264:9]->[264:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[264:9]->[264:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[264:9]->[264:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[264:14]->[264:24]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[264:21]->[264:24]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[264:21]->[264:24]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_STMT_node               : [OUT][ReturnStatement] return 
err;
parse_STMT_node               : [OUT][IfStatement] if (err)
return 
err;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[265:5]->[265:45]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] err = grib_unpack_string ( b , bval , & blen )
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[265:5]->[265:8]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[265:11]->[265:45]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[265:5]->[265:8]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_unpack_string] type=[int] extent=[265:11]->[265:45]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_unpack_string ( b , bval , & blen )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_unpack_string] type=[int (*)(grib_accessor *, char *, size_t *)] extent=[265:11]->[265:29]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_unpack_string
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_unpack_string] type=[int (grib_accessor *, char *, size_t *)] extent=[265:11]->[265:29]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_unpack_string
parse_CALL_EXPR               : cfunc_name=[grib_unpack_string] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[b] type=[grib_accessor *] extent=[265:30]->[265:31]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] b
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[b] type=[grib_accessor *] extent=[265:30]->[265:31]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] b
parse_EXPR_node               : [OUT][ValueDeclarationReference] b
parse_EXPR_node               : [OUT][ValueDeclarationReference] b
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[bval] type=[char *] extent=[265:33]->[265:37]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] bval
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[265:33]->[265:37]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] bval
parse_EXPR_node               : [OUT][ValueDeclarationReference] bval
parse_EXPR_node               : [OUT][ValueDeclarationReference] bval
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[size_t *] extent=[265:39]->[265:44]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] & blen
parse_UNARY_OPERATOR          : op_position=[prefix] op_value=[&]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[blen] type=[size_t] extent=[265:40]->[265:44]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] blen
parse_EXPR_node               : [OUT][ValueDeclarationReference] blen
parse_EXPR_node               : [OUT][UnaryOperation] &blen;
parse_EXPR_node               : [OUT][FunctionCall] grib_unpack_string(b, bval, &blen;);
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[err] operator_token=[=] right_operand_cvalue=[grib_unpack_string(b, bval, &blen;);]
parse_EXPR_node               : [OUT][BinaryOperation] err = grib_unpack_string(b, bval, &blen;);
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[266:5]->[266:24]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( err ) return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[bool] extent=[266:9]->[266:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[266:9]->[266:12]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[266:9]->[266:12]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[266:14]->[266:24]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return err
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[err] type=[int] extent=[266:21]->[266:24]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] err
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[err] type=[int] extent=[266:21]->[266:24]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_EXPR_node               : [OUT][ValueDeclarationReference] err
parse_STMT_node               : [OUT][ReturnStatement] return 
err;
parse_STMT_node               : [OUT][IfStatement] if (err)
return 
err;
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[268:5]->[268:26]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] retval = GRIB_SUCCESS
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[268:5]->[268:11]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[268:14]->[268:26]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[268:5]->[268:11]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] retval
parse_EXPR_node               : [OUT][ValueDeclarationReference] retval
parse_BINARY_OPERATOR         : Right operand tokens don't match: assuming a macro
parse_ast_node                : [CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[268:14]->[268:26]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_SUCCESS] kind=[CursorKind.MACRO_INSTANTIATION] extent=[268:14 -> 268:26]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_SUCCESS] type=[] extent=[268:14]->[268:26]
dump_node                     :    -> tokens[:10]=[['GRIB_SUCCESS']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.INTEGER_LITERAL] extent=[268:14 -> 268:26]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[268:14]->[268:26]
dump_node                     :    -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[retval] operator_token=[=] right_operand_cvalue=[GRIB_SUCCESS]
parse_EXPR_node               : [OUT][BinaryOperation] retval = GRIB_SUCCESS;
parse_ast_node                : [CursorKind.IF_STMT] spelling=[] type=[] extent=[269:5]->[270:44]
parse_STMT_node               : [IN] [CursorKind.IF_STMT] if ( ! STR_EQUAL ( aval , bval ) ) retval = GRIB_STRING_VALUE_MISMATCH
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[bool] extent=[269:9]->[269:31]
parse_EXPR_node               : [IN] [CursorKind.UNARY_OPERATOR] ! STR_EQUAL ( aval , bval )
parse_UNARY_OPERATOR          : Expected tokens_count [7] to be 1 more than operand_tokens_count [0]: assuming a macro
parse_UNARY_OPERATOR          : op_position=[postfix] op_value=[)]
parse_ast_node                : [CursorKind.PAREN_EXPR] spelling=[] type=[bool] extent=[269:10]->[269:31]
parse_macro_instantiation     : MACRO macro_node spelling=[STR_EQUAL] kind=[CursorKind.MACRO_INSTANTIATION] extent=[269:10 -> 269:31]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[STR_EQUAL] type=[] extent=[269:10]->[269:31]
dump_node                     :    -> tokens[:10]=[['STR_EQUAL', '(', 'aval', ',', 'bval', ')']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.PAREN_EXPR] extent=[269:10 -> 269:31]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.PAREN_EXPR] spelling=[] type=[bool] extent=[269:10]->[269:31]
dump_node                     :    -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.BINARY_OPERATOR] spelling=[] type=[bool] extent=[269:10]->[269:31]
dump_node                     :     -> tokens[:10]=[[]]
dump_node                     :     [4:CursorKind.CALL_EXPR] spelling=[strcmp] type=[int] extent=[269:10]->[269:31]
dump_node                     :      -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[strcmp] type=[int (*)(const char *, const char *) noexcept(true)] extent=[269:10]->[269:31]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.DECL_REF_EXPR] spelling=[strcmp] type=[int (const char *, const char *) noexcept(true)] extent=[269:10]->[269:31]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[269:10]->[269:31]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.PAREN_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[269:10]->[269:10]
dump_node                     :          -> tokens[:10]=[['aval']]
dump_node                     :      [5:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[const char *] extent=[269:10]->[269:31]
dump_node                     :       -> tokens[:10]=[[]]
dump_node                     :       [6:CursorKind.UNEXPOSED_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :        -> tokens[:10]=[[]]
dump_node                     :        [7:CursorKind.PAREN_EXPR] spelling=[] type=[char *] extent=[269:10]->[269:31]
dump_node                     :         -> tokens[:10]=[[]]
dump_node                     :         [8:CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[269:10]->[269:10]
dump_node                     :          -> tokens[:10]=[['bval']]
dump_node                     :     [4:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[269:10]->[269:31]
dump_node                     :      -> tokens[:10]=[[]]
parse_macro_instantiation     : Found root_expanded_node, kind=[CursorKind.DECL_REF_EXPR], parsing...
convert_tokens                : [IN] tokens=[['aval', ',', 'bval', ')']] root_expanded_node kind=CursorKind.DECL_REF_EXPR spelling=[aval]
match_tokens                  : new_node [CursorKind.DECL_REF_EXPR] spelling=[aval] best_match_count=[1]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[269:10]->[269:10]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] aval
parse_EXPR_node               : [OUT][ValueDeclarationReference] aval
convert_tokens                :      MATCH - converted_tokens=[aval] tokens=[['aval', ',', 'bval', ')']] match_count=[1]
parse_macro_instantiation     : converted_node=[aval]
convert_tokens                : [IN] tokens=[[',', 'bval', ')']] root_expanded_node kind=CursorKind.DECL_REF_EXPR spelling=[aval]
convert_tokens                :      NO MATCH - converted_token=[,] tokens=[['bval', ')']]
parse_macro_instantiation     : converted_node=[,]
convert_tokens                : [IN] tokens=[['bval', ')']] root_expanded_node kind=CursorKind.DECL_REF_EXPR spelling=[aval]
convert_tokens                :      NO MATCH - converted_token=[bval] tokens=[[')']]
parse_macro_instantiation     : converted_node=[bval]
convert_tokens                : [IN] tokens=[[')']] root_expanded_node kind=CursorKind.DECL_REF_EXPR spelling=[aval]
convert_tokens                :      NO MATCH - converted_token=[)] tokens=[[]]
parse_macro_instantiation     : converted_node=[)]
parse_macro_instantiation     : FINAL MACRO INST=[STR_EQUAL(aval,bval);]
parse_EXPR_node               : [OUT][UnaryOperation] STR_EQUAL(aval,bval););
parse_ast_node                : [CursorKind.BINARY_OPERATOR] spelling=[] type=[int] extent=[270:9]->[270:44]
parse_EXPR_node               : [IN] [CursorKind.BINARY_OPERATOR] retval = GRIB_STRING_VALUE_MISMATCH
parse_BINARY_OPERATOR         : BINARY left_operand [CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[270:9]->[270:15]
parse_BINARY_OPERATOR         : BINARY right_operand [CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[270:18]->[270:44]
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[270:9]->[270:15]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] retval
parse_EXPR_node               : [OUT][ValueDeclarationReference] retval
parse_BINARY_OPERATOR         : Right operand tokens don't match: assuming a macro
parse_ast_node                : [CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[270:18]->[270:44]
parse_macro_instantiation     : MACRO macro_node spelling=[GRIB_STRING_VALUE_MISMATCH] kind=[CursorKind.MACRO_INSTANTIATION] extent=[270:18 -> 270:44]
parse_macro_instantiation     : MACRO macro_node dump:
dump_node                     :   [2:CursorKind.MACRO_INSTANTIATION] spelling=[GRIB_STRING_VALUE_MISMATCH] type=[] extent=[270:18]->[270:44]
dump_node                     :    -> tokens[:10]=[['GRIB_STRING_VALUE_MISMATCH']]
parse_macro_instantiation     : MACRO expanded_node spelling=[] kind=[CursorKind.UNARY_OPERATOR] extent=[270:18 -> 270:44]
parse_macro_instantiation     : MACRO expanded_node dump:
dump_node                     :   [2:CursorKind.UNARY_OPERATOR] spelling=[] type=[int] extent=[270:18]->[270:44]
dump_node                     :    -> tokens[:10]=[[]]
dump_node                     :    [3:CursorKind.INTEGER_LITERAL] spelling=[] type=[int] extent=[270:18]->[270:44]
dump_node                     :     -> tokens[:10]=[[]]
parse_macro_instantiation     : Could not find root_expanded_node, treating macro_node contents as a literal
parse_BINARY_OPERATOR         : Create c_binary_op: left_operand_cvalue=[retval] operator_token=[=] right_operand_cvalue=[GRIB_STRING_VALUE_MISMATCH]
parse_EXPR_node               : [OUT][BinaryOperation] retval = GRIB_STRING_VALUE_MISMATCH;
parse_STMT_node               : [OUT][IfStatement] if (STR_EQUAL(aval,bval)))
retval = GRIB_STRING_VALUE_MISMATCH;
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_free] type=[void] extent=[272:5]->[272:40]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_free ( a -> context , aval )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_free] type=[void (*)(const grib_context *, void *)] extent=[272:5]->[272:22]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_free
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_free] type=[void (const grib_context *, void *)] extent=[272:5]->[272:22]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_free
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_free
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_free
parse_CALL_EXPR               : cfunc_name=[grib_context_free] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[272:23]->[272:33]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[272:23]->[272:33]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] a -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[272:23]->[272:33]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] a -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['a', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[a->context]
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_EXPR_node               : [OUT][StructMemberAccess] a->context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[aval] type=[void *] extent=[272:35]->[272:39]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] aval
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[aval] type=[char *] extent=[272:35]->[272:39]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] aval
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[aval] type=[char *] extent=[272:35]->[272:39]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] aval
parse_EXPR_node               : [OUT][ValueDeclarationReference] aval
parse_EXPR_node               : [OUT][ValueDeclarationReference] aval
parse_EXPR_node               : [OUT][ValueDeclarationReference] aval
parse_EXPR_node               : [OUT][FunctionCall] grib_context_free(a->context, aval);
parse_ast_node                : [CursorKind.CALL_EXPR] spelling=[grib_context_free] type=[void] extent=[273:5]->[273:40]
parse_EXPR_node               : [IN] [CursorKind.CALL_EXPR] grib_context_free ( b -> context , bval )
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[grib_context_free] type=[void (*)(const grib_context *, void *)] extent=[273:5]->[273:22]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] grib_context_free
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[grib_context_free] type=[void (const grib_context *, void *)] extent=[273:5]->[273:22]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] grib_context_free
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_free
parse_EXPR_node               : [OUT][ValueDeclarationReference] grib_context_free
parse_CALL_EXPR               : cfunc_name=[grib_context_free] type=[<class 'code_object.value_declaration_reference.ValueDeclarationReference'>]
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[const grib_context *] extent=[273:23]->[273:33]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] b -> context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[context] type=[grib_context *] extent=[273:23]->[273:33]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] b -> context
parse_ast_node                : [CursorKind.MEMBER_REF_EXPR] spelling=[context] type=[grib_context *] extent=[273:23]->[273:33]
parse_EXPR_node               : [IN] [CursorKind.MEMBER_REF_EXPR] b -> context
parse_MEMBER_REF_EXPR         : [IN]  node spelling=[context] type=[grib_context *] tokens=[['b', '->', 'context']]
parse_MEMBER_REF_EXPR         :       remaining tokens=[['->', 'context']]
parse_MEMBER_REF_EXPR         : [OUT] cstruct_member_access=[b->context]
parse_EXPR_node               : [OUT][StructMemberAccess] b->context
parse_EXPR_node               : [OUT][StructMemberAccess] b->context
parse_EXPR_node               : [OUT][StructMemberAccess] b->context
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[bval] type=[void *] extent=[273:35]->[273:39]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] bval
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[bval] type=[char *] extent=[273:35]->[273:39]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] bval
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[bval] type=[char *] extent=[273:35]->[273:39]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] bval
parse_EXPR_node               : [OUT][ValueDeclarationReference] bval
parse_EXPR_node               : [OUT][ValueDeclarationReference] bval
parse_EXPR_node               : [OUT][ValueDeclarationReference] bval
parse_EXPR_node               : [OUT][FunctionCall] grib_context_free(b->context, bval);
parse_ast_node                : [CursorKind.RETURN_STMT] spelling=[] type=[] extent=[275:5]->[275:18]
parse_STMT_node               : [IN] [CursorKind.RETURN_STMT] return retval
parse_ast_node                : [CursorKind.UNEXPOSED_EXPR] spelling=[retval] type=[int] extent=[275:12]->[275:18]
parse_EXPR_node               : [IN] [CursorKind.UNEXPOSED_EXPR] retval
parse_ast_node                : [CursorKind.DECL_REF_EXPR] spelling=[retval] type=[int] extent=[275:12]->[275:18]
parse_EXPR_node               : [IN] [CursorKind.DECL_REF_EXPR] retval
parse_EXPR_node               : [OUT][ValueDeclarationReference] retval
parse_EXPR_node               : [OUT][ValueDeclarationReference] retval
parse_STMT_node               : [OUT][ReturnStatement] return 
retval;
parse_STMT_node               : [OUT][CompoundStatement] {
int retval = 0;
char* aval = 0;
char* bval = 0;
int err = 0;
size_t alen = a->length + 1;
size_t blen = b->length + 1;
if (alen != blen)
return 
GRIB_COUNT_MISMATCH;
// [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
// [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
err = grib_unpack_string(a, aval, &alen;);
if (err)
return 
err;
err = grib_unpack_string(b, bval, &blen;);
if (err)
return 
err;
retval = GRIB_SUCCESS;
if (STR_EQUAL(aval,bval)))
retval = GRIB_STRING_VALUE_MISMATCH;
grib_context_free(a->context, aval);
grib_context_free(b->context, bval);
return 
retval;
}
to_ccode_objects              : [OUT] ==========================================================================================
convert_function_nodes        : int compare(grib_accessor* a, grib_accessor* b)
                                {
                                int retval = 0;
                                char* aval = 0;
                                char* bval = 0;
                                int err = 0;
                                size_t alen = a->length + 1;
                                size_t blen = b->length + 1;
                                if (alen != blen)
                                return 
                                GRIB_COUNT_MISMATCH;
                                // [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
                                // [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
                                err = grib_unpack_string(a, aval, &alen;);
                                if (err)
                                return 
                                err;
                                err = grib_unpack_string(b, bval, &blen;);
                                if (err)
                                return 
                                err;
                                retval = GRIB_SUCCESS;
                                if (STR_EQUAL(aval,bval)))
                                retval = GRIB_STRING_VALUE_MISMATCH;
                                grib_context_free(a->context, aval);
                                grib_context_free(b->context, bval);
                                return 
                                retval;
                                }
convert                       : 

============================== [PHASE 2: Convert AST to C] END   ==============================

convert                       : 

============================== [PHASE 3: Convert C to C++] BEGIN ==============================

create_code_info              : cpp_filename=[AsciiData.cc] cpp_class_name=[AsciiData] cpp_super_class_name=[AccessorData]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_bit_on] -> [gribSetBitOn]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_bits_on] -> [gribSetBitsOn]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_bit_off] -> [gribSetBitOff]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_bit] -> [gribSetBit]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_handle_of_accessor] -> [grib_handle_of_accessor]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_find_accessor] -> [gribFindAccessor]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_size] -> [gribGetSize]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double] -> [gribGetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double_internal] -> [gribGetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_long] -> [gribGetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_long_internal] -> [gribGetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_string] -> [gribGetString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_string_internal] -> [gribGetString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_array<T>] -> [gribGetArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_array_internal<T>] -> [gribGetArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double_array] -> [gribGetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double_array_internal] -> [gribGetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_long_array] -> [gribGetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_long_array_internal] -> [gribGetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_double] -> [gribSetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_double_internal] -> [gribSetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_long] -> [gribSetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_long_internal] -> [gribSetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_string] -> [gribSetString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_string_internal] -> [gribSetString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_array] -> [gribSetArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_array_internal] -> [gribSetArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_double_array] -> [gribSetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_double_array_internal] -> [gribSetDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_long_array] -> [gribSetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_set_long_array_internal] -> [gribSetLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [string_to_long] -> [stringToLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [codes_power<T>] -> [codesPower<T>]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [codes_power<float>] -> [codesPower<float>]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [codes_power<double>] -> [codesPower<double>]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_block_length] -> [gribGetBlockLength]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_factory] -> [gribAccessorFactory]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_push_accessor] -> [gribPushAccessor]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_section_adjust_sizes] -> [gribSectionAdjustSizes]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_inline_strcmp] -> [gribInlineStrcmp]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_missing] -> [gribPackMissing]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_zero] -> [gribPackZero]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_is_missing_internal] -> [gribIsMissingInternal]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_double] -> [gribPackDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_float] -> [gribPackFloat]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_expression] -> [gribPackExpression]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_string] -> [gribPackString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_string_array] -> [gribPackStringArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_long] -> [gribPackLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_pack_bytes] -> [gribPackBytes]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_bytes] -> [gribUnpackBytes]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_double_subarray] -> [gribUnpackDoubleSubarray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_double] -> [gribUnpackDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_float] -> [gribUnpackFloat]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_double_element] -> [gribUnpackDoubleElement]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_float_element] -> [gribUnpackFloatElement]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_double_element_set] -> [gribUnpackDoubleElementSet]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_float_element_set] -> [gribUnpackFloatElementSet]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_string] -> [gribUnpackString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_string_array] -> [gribUnpackStringArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_unpack_long] -> [gribUnpackLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_unpack_long] -> [gribAccessorsListUnpackLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_unpack_double] -> [gribAccessorsListUnpackDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_unpack_float] -> [gribAccessorsListUnpackFloat]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_unpack_string] -> [gribAccessorsListUnpackString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_value_count] -> [gribAccessorsListValueCount]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_create] -> [gribAccessorsListCreate]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_push] -> [gribAccessorsListPush]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_delete] -> [gribAccessorsListDelete]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_get_native_type] -> [gribAccessorGetNativeType]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_next_position_offset] -> [gribGetNextPositionOffset]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_string_length] -> [gribStringLength]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_byte_offset] -> [gribByteOffset]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_byte_count] -> [gribByteCount]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_value_count] -> [gribValueCount]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_notify_change] -> [gribAccessorNotifyChange]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_init_accessor] -> [gribInitAccessor]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_delete] -> [gribAccessorDelete]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_update_size] -> [gribUpdateSize]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_resize] -> [gribResize]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_preferred_size] -> [gribPreferredSize]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_nearest_smaller_value] -> [gribNearestSmallerValue]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_compare_accessors] -> [gribCompareAccessors]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_add_attribute] -> [gribAccessorAddAttribute]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_replace_attribute] -> [gribAccessorReplaceAttribute]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_delete_attribute] -> [gribAccessorDeleteAttribute]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_has_attributes] -> [gribAccessorHasAttributes]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_clone] -> [gribAccessorClone]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessor_get_attribute] -> [gribAccessorGetAttribute]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_accessors_list_last] -> [gribAccessorsListLast]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_decode_unsigned_long] -> [gribDecodeUnsignedLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_encode_unsigned_long] -> [gribEncodeUnsignedLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_encode_unsigned_longb] -> [gribEncodeUnsignedLongb]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_decode_long_array] -> [gribDecodeLongArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_buffer_delete] -> [griBufferDelete]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_buffer_replace] -> [gribBufferReplace]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_buffer_set_ulength_bits] -> [gribBufferSetUlengthBits]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_create_growable_buffer] -> [gribCreateGrowableBuffer]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_date_to_julian] -> [gribDateToJulian]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_datetime_to_julian] -> [gribDatetimeToJulian]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_datetime_to_julian_d] -> [gribDatetimeToJulianD]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_julian_to_date] -> [gribJulianToDate]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_julian_to_datetime] -> [gribJulianToDatetime]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_check_data_values_range] -> [gribCheckDataValuesRange]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_is_earth_oblate] -> [gribIsEarthOblate]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_producing_large_constant_fields] -> [gribProducingLargeConstantFields]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_util_grib_data_quality_check] -> [gribUtilGribDataQualityCheck]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_native_type] -> [gribExpressionNativeType]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_evaluate_long] -> [gribExpressionEvaluateLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_evaluate_double] -> [gribExpressionEvaluateDouble]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_evaluate_string] -> [gribExpressionEvaluateString]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_get_name] -> [gribExpressionGetName]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_print] -> [gribExpressionPrint]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_free] -> [DELETE_THIS_grib_expression_free]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_add_dependency] -> [gribExpressionAddDependency]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_expression_set_value] -> [gribExpressionSetValue]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_recompose_name] -> [gribRecomposeName]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_context_full_defs_path] -> [gribContextFullDefsPath]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_context_get_handle_file_count] -> [gribContextGetHandleFileCount]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_context_get_handle_total_count] -> [gribContextGetHandleTotalCount]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_context_buffer_malloc_clear] -> [gribcontextBufferMallocClear]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double_element] -> [gribGetDoubleElement]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double_element_internal] -> [gribGetDoubleElement]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double_element_set] -> [gribGetDoubleElementSet]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_double_element_set_internal] -> [gribGetDoubleElementSet]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_nearest_smaller_value] -> [gribGetNearestSmallerValue]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_ieee_decode_array<T>] -> [gribIeeeDecodeArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_ieee_encode_array] -> [gribIeeeEncodeArray]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_ieee_to_long] -> [gribIeeeToLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_ieee64_to_long] -> [gribIeee64ToLong]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_optimize_decimal_factor] -> [gribOptimizeDecimalFactor]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_binary_scale_fact] -> [gribGetBinaryScaleFact]
add_all_funcsig_mappings_to_conversion_data: ADDING FUNCIG MAPPING: [grib_get_error_message] -> [gribGetErrorMessage]
add_arg_mapping               : Adding arg: [int err] -> [GribStatus err]
add_funcbody_type_mapping     : Adding decl_spec: [grib_accessor*] -> [AccessorPtr]
add_funcbody_type_mapping     : Adding decl_spec: [grib_handle*] -> [[<NoneValue>]]
add_funcbody_type_mapping     : Adding decl_spec: [grib_context*] -> [[<NoneValue>]]
add_funcbody_type_mapping     : Adding decl_spec: [grib_expression*] -> [GribExpressionPtr]
add_funcbody_type_mapping     : Adding decl_spec: [grib_codetable*] -> [GribCodeTablePtr]
add_funcbody_type_mapping     : Adding decl_spec: [grib_darray*] -> [std::vector<double>]
add_funcbody_type_mapping     : Adding decl_spec: [grib_iarray*] -> [std::vector<long>]
add_funcbody_type_mapping     : Adding decl_spec: [grib_sarray*] -> [std::string]
add_funcbody_type_mapping     : Adding decl_spec: [grib_vdarray*] -> [std::vector<std::vector<double>>]
add_funcbody_type_mapping     : Adding decl_spec: [grib_viarray*] -> [std::vector<std::vector<long>>]
add_funcbody_type_mapping     : Adding decl_spec: [grib_vsarray*] -> [std::vector<std::string>]
add_funcbody_type_mapping     : Adding decl_spec: [char**] -> [std::string&]
add_funcbody_type_mapping     : Adding decl_spec: [char*] -> [std::string]
add_funcbody_type_mapping     : Adding decl_spec: [char[][]] -> [std::string]
add_funcbody_type_mapping     : Adding decl_spec: [FILE*] -> [FILE*]
add_funcsig_type_mapping      : Adding decl_spec: [char*] -> [std::string&]
add_funcsig_type_mapping      : Adding decl_spec: [char[][]] -> [std::string&]
add_literal_mapping           : Adding literal mapping: [GRIB_SUCCESS] -> [GribStatus::SUCCESS]
add_literal_mapping           : Adding literal mapping: [GRIB_END_OF_FILE] -> [GribStatus::END_OF_FILE]
add_literal_mapping           : Adding literal mapping: [GRIB_INTERNAL_ERROR] -> [GribStatus::INTERNAL_ERROR]
add_literal_mapping           : Adding literal mapping: [GRIB_BUFFER_TOO_SMALL] -> [GribStatus::BUFFER_TOO_SMALL]
add_literal_mapping           : Adding literal mapping: [GRIB_NOT_IMPLEMENTED] -> [GribStatus::NOT_IMPLEMENTED]
add_literal_mapping           : Adding literal mapping: [GRIB_7777_NOT_FOUND] -> [GribStatus::VALUE_7777_NOT_FOUND]
add_literal_mapping           : Adding literal mapping: [GRIB_ARRAY_TOO_SMALL] -> [GribStatus::ARRAY_TOO_SMALL]
add_literal_mapping           : Adding literal mapping: [GRIB_FILE_NOT_FOUND] -> [GribStatus::FILE_NOT_FOUND]
add_literal_mapping           : Adding literal mapping: [GRIB_CODE_NOT_FOUND_IN_TABLE] -> [GribStatus::CODE_NOT_FOUND_IN_TABLE]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_ARRAY_SIZE] -> [GribStatus::WRONG_ARRAY_SIZE]
add_literal_mapping           : Adding literal mapping: [GRIB_NOT_FOUND] -> [GribStatus::NOT_FOUND]
add_literal_mapping           : Adding literal mapping: [GRIB_IO_PROBLEM] -> [GribStatus::IO_PROBLEM]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_MESSAGE] -> [GribStatus::INVALID_MESSAGE]
add_literal_mapping           : Adding literal mapping: [GRIB_DECODING_ERROR] -> [GribStatus::DECODING_ERROR]
add_literal_mapping           : Adding literal mapping: [GRIB_ENCODING_ERROR] -> [GribStatus::ENCODING_ERROR]
add_literal_mapping           : Adding literal mapping: [GRIB_NO_MORE_IN_SET] -> [GribStatus::NO_MORE_IN_SET]
add_literal_mapping           : Adding literal mapping: [GRIB_GEOCALCULUS_PROBLEM] -> [GribStatus::GEOCALCULUS_PROBLEM]
add_literal_mapping           : Adding literal mapping: [GRIB_OUT_OF_MEMORY] -> [GribStatus::OUT_OF_MEMORY]
add_literal_mapping           : Adding literal mapping: [GRIB_READ_ONLY] -> [GribStatus::READ_ONLY]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_ARGUMENT] -> [GribStatus::INVALID_ARGUMENT]
add_literal_mapping           : Adding literal mapping: [GRIB_NULL_HANDLE] -> [GribStatus::NULL_HANDLE]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_SECTION_NUMBER] -> [GribStatus::INVALID_SECTION_NUMBER]
add_literal_mapping           : Adding literal mapping: [GRIB_VALUE_CANNOT_BE_MISSING] -> [GribStatus::VALUE_CANNOT_BE_MISSING]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_LENGTH] -> [GribStatus::WRONG_LENGTH]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_TYPE] -> [GribStatus::INVALID_TYPE]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_STEP] -> [GribStatus::WRONG_STEP]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_STEP_UNIT] -> [GribStatus::WRONG_STEP_UNIT]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_FILE] -> [GribStatus::INVALID_FILE]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_GRIB] -> [GribStatus::INVALID_GRIB]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_INDEX] -> [GribStatus::INVALID_INDEX]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_ITERATOR] -> [GribStatus::INVALID_ITERATOR]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_KEYS_ITERATOR] -> [GribStatus::INVALID_KEYS_ITERATOR]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_NEAREST] -> [GribStatus::INVALID_NEAREST]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_ORDERBY] -> [GribStatus::INVALID_ORDERBY]
add_literal_mapping           : Adding literal mapping: [GRIB_MISSING_KEY] -> [GribStatus::MISSING_KEY]
add_literal_mapping           : Adding literal mapping: [GRIB_OUT_OF_AREA] -> [GribStatus::OUT_OF_AREA]
add_literal_mapping           : Adding literal mapping: [GRIB_CONCEPT_NO_MATCH] -> [GribStatus::CONCEPT_NO_MATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_HASH_ARRAY_NO_MATCH] -> [GribStatus::HASH_ARRAY_NO_MATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_NO_DEFINITIONS] -> [GribStatus::NO_DEFINITIONS]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_TYPE] -> [GribStatus::WRONG_TYPE]
add_literal_mapping           : Adding literal mapping: [GRIB_END] -> [GribStatus::END]
add_literal_mapping           : Adding literal mapping: [GRIB_NO_VALUES] -> [GribStatus::NO_VALUES]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_GRID] -> [GribStatus::WRONG_GRID]
add_literal_mapping           : Adding literal mapping: [GRIB_END_OF_INDEX] -> [GribStatus::END_OF_INDEX]
add_literal_mapping           : Adding literal mapping: [GRIB_NULL_INDEX] -> [GribStatus::NULL_INDEX]
add_literal_mapping           : Adding literal mapping: [GRIB_PREMATURE_END_OF_FILE] -> [GribStatus::PREMATURE_END_OF_FILE]
add_literal_mapping           : Adding literal mapping: [GRIB_INTERNAL_ARRAY_TOO_SMALL] -> [GribStatus::INTERNAL_ARRAY_TOO_SMALL]
add_literal_mapping           : Adding literal mapping: [GRIB_MESSAGE_TOO_LARGE] -> [GribStatus::MESSAGE_TOO_LARGE]
add_literal_mapping           : Adding literal mapping: [GRIB_CONSTANT_FIELD] -> [GribStatus::CONSTANT_FIELD]
add_literal_mapping           : Adding literal mapping: [GRIB_SWITCH_NO_MATCH] -> [GribStatus::SWITCH_NO_MATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_UNDERFLOW] -> [GribStatus::UNDERFLOW]
add_literal_mapping           : Adding literal mapping: [GRIB_MESSAGE_MALFORMED] -> [GribStatus::MESSAGE_MALFORMED]
add_literal_mapping           : Adding literal mapping: [GRIB_CORRUPTED_INDEX] -> [GribStatus::CORRUPTED_INDEX]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_BPV] -> [GribStatus::INVALID_BPV]
add_literal_mapping           : Adding literal mapping: [GRIB_DIFFERENT_EDITION] -> [GribStatus::DIFFERENT_EDITION]
add_literal_mapping           : Adding literal mapping: [GRIB_VALUE_DIFFERENT] -> [GribStatus::VALUE_DIFFERENT]
add_literal_mapping           : Adding literal mapping: [GRIB_INVALID_KEY_VALUE] -> [GribStatus::INVALID_KEY_VALUE]
add_literal_mapping           : Adding literal mapping: [GRIB_STRING_TOO_SMALL] -> [GribStatus::STRING_TOO_SMALL]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_CONVERSION] -> [GribStatus::WRONG_CONVERSION]
add_literal_mapping           : Adding literal mapping: [GRIB_MISSING_BUFR_ENTRY] -> [GribStatus::MISSING_BUFR_ENTRY]
add_literal_mapping           : Adding literal mapping: [GRIB_NULL_POINTER] -> [GribStatus::NULL_POINTER]
add_literal_mapping           : Adding literal mapping: [GRIB_ATTRIBUTE_CLASH] -> [GribStatus::ATTRIBUTE_CLASH]
add_literal_mapping           : Adding literal mapping: [GRIB_TOO_MANY_ATTRIBUTES] -> [GribStatus::TOO_MANY_ATTRIBUTES]
add_literal_mapping           : Adding literal mapping: [GRIB_ATTRIBUTE_NOT_FOUND] -> [GribStatus::ATTRIBUTE_NOT_FOUND]
add_literal_mapping           : Adding literal mapping: [GRIB_UNSUPPORTED_EDITION] -> [GribStatus::UNSUPPORTED_EDITION]
add_literal_mapping           : Adding literal mapping: [GRIB_OUT_OF_RANGE] -> [GribStatus::OUT_OF_RANGE]
add_literal_mapping           : Adding literal mapping: [GRIB_WRONG_BITMAP_SIZE] -> [GribStatus::WRONG_BITMAP_SIZE]
add_literal_mapping           : Adding literal mapping: [GRIB_FUNCTIONALITY_NOT_ENABLED] -> [GribStatus::FUNCTIONALITY_NOT_ENABLED]
add_literal_mapping           : Adding literal mapping: [GRIB_VALUE_MISMATCH] -> [GribStatus::VALUE_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_DOUBLE_VALUE_MISMATCH] -> [GribStatus::DOUBLE_VALUE_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_LONG_VALUE_MISMATCH] -> [GribStatus::LONG_VALUE_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_BYTE_VALUE_MISMATCH] -> [GribStatus::BYTE_VALUE_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_STRING_VALUE_MISMATCH] -> [GribStatus::STRING_VALUE_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_OFFSET_MISMATCH] -> [GribStatus::OFFSET_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_COUNT_MISMATCH] -> [GribStatus::COUNT_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_NAME_MISMATCH] -> [GribStatus::NAME_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_MISMATCH] -> [GribStatus::TYPE_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_AND_VALUE_MISMATCH] -> [GribStatus::TYPE_AND_VALUE_MISMATCH]
add_literal_mapping           : Adding literal mapping: [GRIB_UNABLE_TO_COMPARE_ACCESSORS] -> [GribStatus::UNABLE_TO_COMPARE_ACCESSORS]
add_literal_mapping           : Adding literal mapping: [GRIB_ASSERTION_FAILURE] -> [GribStatus::ASSERTION_FAILURE]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_UNDEFINED] -> [GribType::UNDEFINED]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_LONG] -> [GribType::LONG]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_DOUBLE] -> [GribType::DOUBLE]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_STRING] -> [GribType::STRING]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_BYTES] -> [GribType::BYTES]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_SECTION] -> [GribType::SECTION]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_LABEL] -> [GribType::LABEL]
add_literal_mapping           : Adding literal mapping: [GRIB_TYPE_MISSING] -> [GribType::MISSING]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_READ_ONLY] -> [GribAccessorFlag::READ_ONLY]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_DUMP] -> [GribAccessorFlag::DUMP]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_EDITION_SPECIFIC] -> [GribAccessorFlag::EDITION_SPECIFIC]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_CAN_BE_MISSING] -> [GribAccessorFlag::CAN_BE_MISSING]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_HIDDEN] -> [GribAccessorFlag::HIDDEN]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_CONSTRAINT] -> [GribAccessorFlag::CONSTRAINT]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_BUFR_DATA] -> [GribAccessorFlag::BUFR_DATA]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_NO_COPY] -> [GribAccessorFlag::NO_COPY]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_COPY_OK] -> [GribAccessorFlag::COPY_OK]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_FUNCTION] -> [GribAccessorFlag::FUNCTION]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_DATA] -> [GribAccessorFlag::DATA]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_NO_FAIL] -> [GribAccessorFlag::NO_FAIL]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_TRANSIENT] -> [GribAccessorFlag::TRANSIENT]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_STRING_TYPE] -> [GribAccessorFlag::STRING_TYPE]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_LONG_TYPE] -> [GribAccessorFlag::LONG_TYPE]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_DOUBLE_TYPE] -> [GribAccessorFlag::DOUBLE_TYPE]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_LOWERCASE] -> [GribAccessorFlag::LOWERCASE]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_BUFR_COORD] -> [GribAccessorFlag::BUFR_COORD]
add_literal_mapping           : Adding literal mapping: [GRIB_ACCESSOR_FLAG_COPY_IF_CHANGING_EDITION] -> [GribAccessorFlag::COPY_IF_CHANGING_EDITION]
add_data_member_mapping       : Adding data member: [long length] -> [long length_]
add_data_member_mapping       : Adding data member: [long offset] -> [long offset_]
add_data_member_mapping       : Adding data member: [unsigned long flags] -> [unsigned long flags_]
add_data_member_mapping       : Adding data member: [int dirty] -> [mutable int dirty_]
add_data_member_mapping       : Adding data member: [grib_virtual_value* vvalue] -> [GribVirtualValuePtr vvalue_]
add_data_member_mapping       : Adding data member: [const char* set] -> [std::string set_]
initialise_conversion_data    : Adding funcbody mapping for Accessor name=[grib_accessor_ascii]
add_funcbody_type_mapping     : Adding decl_spec: [grib_accessor_ascii*] -> [[<NoneValue>]]
create_conversion_validation  : Could not find accessor_validator lib name=[grib_accessor.grib_accessor_conversion_pack.validators.ascii_validation] - using default
convert_ccode_object          : [IN] [GlobalFunction] int get_native_type(grib_accessor* );
int pack_double(grib_accessor* , const double* val, size_t* len);
int pack_long(grib_accessor* , const long* val, size_t* len);
int pack_string(grib_accessor* , const char* , size_t* len);
int unpack_double(grib_accessor* , double* val, size_t* len);
int unpack_long(grib_accessor* , long* val, size_t* len);
int unpack_string(grib_accessor* , char* , size_t* len);
size_t string_length(grib_accessor* );
int value_count(grib_accessor* , long* );
void dump(grib_accessor* , grib_dumper* );
void init(grib_accessor* , const long , grib_arguments* );
int compare(grib_accessor* , grib_accessor* );
void init(grib_accessor* a, const long len, grib_arguments* arg);
int value_count(grib_accessor* a, long* count);
size_t string_length(grib_accessor* a);
void dump(grib_accessor* a, grib_dumper* dumper);
int get_native_type(grib_accessor* a);
int unpack_string(grib_accessor* a, char* val, size_t* len);
int pack_string(grib_accessor* a, const char* val, size_t* len);
int pack_long(grib_accessor* a, const long* v, size_t* len);
int pack_double(grib_accessor* a, const double* v, size_t* len);
int unpack_long(grib_accessor* a, long* v, size_t* len);
int unpack_double(grib_accessor* a, double* v, size_t* len);
int compare(grib_accessor* a, grib_accessor* b);
create_cpp_code_object        : Ignoring member function name=[get_native_type]
create_cpp_code_object        : Ignoring member function name=[pack_double]
create_cpp_code_object        : Ignoring member function name=[pack_long]
create_cpp_code_object        : Ignoring member function name=[pack_string]
create_cpp_code_object        : Ignoring member function name=[unpack_double]
create_cpp_code_object        : Ignoring member function name=[unpack_long]
create_cpp_code_object        : Ignoring member function name=[unpack_string]
create_cpp_code_object        : Ignoring member function name=[string_length]
create_cpp_code_object        : Ignoring member function name=[value_count]
create_cpp_code_object        : Ignoring member function name=[dump]
create_cpp_code_object        : Ignoring member function name=[init]
create_cpp_code_object        : Ignoring member function name=[compare]
create_cpp_code_object        : Ignoring member function name=[init]
create_cpp_code_object        : Ignoring member function name=[value_count]
create_cpp_code_object        : Ignoring member function name=[string_length]
create_cpp_code_object        : Ignoring member function name=[dump]
create_cpp_code_object        : Ignoring member function name=[get_native_type]
create_cpp_code_object        : Ignoring member function name=[unpack_string]
create_cpp_code_object        : Ignoring member function name=[pack_string]
create_cpp_code_object        : Ignoring member function name=[pack_long]
create_cpp_code_object        : Ignoring member function name=[pack_double]
create_cpp_code_object        : Ignoring member function name=[unpack_long]
create_cpp_code_object        : Ignoring member function name=[unpack_double]
create_cpp_code_object        : Ignoring member function name=[compare]
convert_ccode_object          : [OUT][GlobalFunction] 
convert_global_function       : Converted C++ code [as_lines]...
convert_global_function       : *** ERROR - CAN'T PRINT DEBUG TEXT, SUPPLIED LIST IS EMPTY ***
convert_ccode_object          : [IN] [ConstructorFunction] grib_accessor_class_ascii::grib_accessor_class_ascii(grib_accessor* a, const long len, grib_arguments* arg): (a,len,arg)
{
a->length = len;
Assert(a->length >= 0);
}
convert_ccode_object          : [IN] [FuncSig] void init(grib_accessor* a, const long len, grib_arguments* arg)
add_funcsig_buffer_mapping    : Adding [cbuffer=[grib_arguments* arg] , clength=[const long len] -> cpp_container=[AccessorInitData const& initData]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[const long len] mapping.cppfuncsig.args[1]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [const long len] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[2]=[grib_arguments* arg] mapping.cppfuncsig.args[2]=[AccessorInitData const& initData]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_arguments* arg] -> [AccessorInitData const& initData]
convert_ccode_object          : [OUT][FuncSig] void Constructor(AccessorInitData const& initData)
convert_ccode_object          : [IN] [CompoundStatement] {
a->length = len;
Assert(a->length >= 0);
}
convert_ccode_object          : [IN] [BinaryOperation] a->length = len;
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[initData]
create_cpp_container_length_arg: cpp_member=[initData.size();]
create_cpp_container_length_arg: Updated initData length access: cpp_member=[initData.args.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[initData.args.size();]
convert_ccode_object          : [OUT][StructMemberAccess] initData.args.size();
convert_ccode_object          : [OUT][BinaryOperation] length_ = initData.args.size();
convert_ccode_object          : [IN] [MacroInstantation] Assert(a->length >= 0);
convert_ccode_object          : [IN] [CodeObjects] (
a->length >= 0
)
convert_ccode_object          : [IN] [Literal] (
convert_ccode_object          : [OUT][Literal] (
convert_ccode_object          : [IN] [BinaryOperation] a->length >= 0
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] length_ >= 0
convert_ccode_object          : [IN] [Literal] )
convert_ccode_object          : [OUT][Literal] )
convert_ccode_object          : [OUT][CodeObjects] (
length_ >= 0
)
convert_ccode_object          : [OUT][MacroInstantation] Assert(length_ >= 0);
convert_ccode_object          : [OUT][CompoundStatement] {
length_ = initData.args.size();
Assert(length_ >= 0);
}
convert_ccode_object          : [OUT][ConstructorFunction] AsciiData::AsciiData(AccessorInitData const& initData): AccessorData(initData)
{
length_ = initData.args.size();
Assert(length_ >= 0);
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_constructor_function]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : void Constructor(AccessorInitData const& initData)
dump_function                 : {
                                length_ = initData.args.size();
                                Assert(length_ >= 0);
                                }
dump_function                 : ================================================================================
convert_member_functions      : Converting member functions...
convert_virtual_member_functions: Converting virtual member functions...
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::value_count(grib_accessor* a, long* count)
{
*count = 1;
return 
0;
}
convert_ccode_object          : [IN] [FuncSig] int value_count(grib_accessor* a, long* count)
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[long* count] mapping.cppfuncsig.args[1]=[long& count]
add_funcsig_arg_mapping       : Adding funcsig arg: [long* count] -> [long& count]
convert_ccode_object          : [OUT][FuncSig] GribStatus valueCount(long& count)
convert_ccode_object          : [IN] [CompoundStatement] {
*count = 1;
return 
0;
}
convert_ccode_object          : [IN] [BinaryOperation] *count = 1;
convert_ccode_object          : [IN] [UnaryOperation] *count;
convert_ccode_object          : [IN] [Operation] *
convert_ccode_object          : [OUT][Operation] *
convert_ccode_object          : [IN] [ValueDeclarationReference] count
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[count] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[count] cpparg=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[count] cpp_container_arg=[None]
convert_ccode_object          : [IN] [str] count
convert_ccode_object          : [OUT][str] count
create_cpp_code_object        : ValueDeclarationReferenceConverter [4] cdecl_ref_expr_value=[count] cppdecl_ref_expr_value=[count]
convert_ccode_object          : [OUT][ValueDeclarationReference] count
validate_unary_operation      : cppunary_operation.operand string=[count] type=[ValueDeclarationReference]
to_cpparg                     : cpp_obj=[count] -> cpparg=[long& count]
validate_unary_operation      : cpparg=[long& count]
validate_unary_operation      : Stripping [*] from ref type: current cppunary_operation=[*count;]
convert_ccode_object          : [OUT][ValueDeclarationReference] count
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] count = 1;
convert_ccode_object          : [IN] [ReturnStatement] return 
0;
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ReturnStatement] return 
0;
convert_ccode_object          : [OUT][CompoundStatement] {
count = 1;
return 
0;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribStatus ::valueCount(long& count)
{
count = 1;
return 
0;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribStatus valueCount(long& count) const
dump_function                 : {
                                count = 1;
                                return 
                                0;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] size_t grib_accessor_class_ascii::string_length(grib_accessor* a)
{
return 
a->length;
}
convert_ccode_object          : [IN] [FuncSig] size_t string_length(grib_accessor* a)
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] std::size_t stringLength()
convert_ccode_object          : [IN] [CompoundStatement] {
return 
a->length;
}
convert_ccode_object          : [IN] [ReturnStatement] return 
a->length;
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [OUT][ReturnStatement] return 
length_;
convert_ccode_object          : [OUT][CompoundStatement] {
return 
length_;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] std::size_t ::stringLength()
{
return 
length_;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : std::size_t stringLength() const
dump_function                 : {
                                return 
                                length_;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] void grib_accessor_class_ascii::dump(grib_accessor* a, grib_dumper* dumper)
{
grib_dump_string(dumper, a, NULL);
}
convert_ccode_object          : [IN] [FuncSig] void dump(grib_accessor* a, grib_dumper* dumper)
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[grib_dumper* dumper] mapping.cppfuncsig.args[1]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_dumper* dumper] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] void dump()
convert_ccode_object          : [IN] [CompoundStatement] {
grib_dump_string(dumper, a, NULL);
}
convert_ccode_object          : [IN] [FunctionCall] grib_dump_string(dumper, a, NULL);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_dump_string
convert_ccode_object          : [OUT][str] gribDumpString
convert_ccode_object          : [IN] [ValueDeclarationReference] dumper
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[dumper] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[dumper] cpparg=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[dumper] cpp_container_arg=[None]
convert_ccode_object          : [IN] [str] dumper
convert_ccode_object          : [OUT][str] dumper
create_cpp_code_object        : ValueDeclarationReferenceConverter [4] cdecl_ref_expr_value=[dumper] cppdecl_ref_expr_value=[dumper]
convert_ccode_object          : [OUT][ValueDeclarationReference] dumper
convert_ccode_object          : [IN] [ValueDeclarationReference] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[a] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[a] cpparg=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[a] cpp_container_arg=[None]
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [4] cdecl_ref_expr_value=[a] cppdecl_ref_expr_value=[a]
convert_ccode_object          : [OUT][ValueDeclarationReference] a
convert_ccode_object          : [IN] [Literal] NULL
convert_ccode_object          : [OUT][Literal] NULL
convert_ccode_object          : [OUT][FunctionCall] gribDumpString(dumper, a, NULL);
convert_ccode_object          : [OUT][CompoundStatement] {
gribDumpString(dumper, a, NULL);
}
convert_ccode_object          : [OUT][VirtualMemberFunction] void ::dump()
{
gribDumpString(dumper, a, NULL);
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : void dump() const
dump_function                 : {
                                gribDumpString(dumper, a, NULL);
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::get_native_type(grib_accessor* a)
{
return 
GRIB_TYPE_STRING;
}
convert_ccode_object          : [IN] [FuncSig] int get_native_type(grib_accessor* a)
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] GribType nativeType()
convert_ccode_object          : [IN] [CompoundStatement] {
return 
GRIB_TYPE_STRING;
}
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_TYPE_STRING;
convert_ccode_object          : [IN] [Literal] GRIB_TYPE_STRING
convert_ccode_object          : [OUT][Literal] GribType::STRING
convert_ccode_object          : [OUT][ReturnStatement] return 
GribType::STRING;
convert_ccode_object          : [OUT][CompoundStatement] {
return 
GribType::STRING;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribType ::nativeType()
{
return 
GribType::STRING;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribType nativeType() const
dump_function                 : {
                                return 
                                GribType::STRING;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::unpack_string(grib_accessor* a, char* val, size_t* len)
{
size_t i = 0;
grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = a->length;
if (len[0] < (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_ARRAY_TOO_SMALL;
}
for(i = 0;i < alen;i++)
val[i] = hand->buffer->data[a->offset + i];
val[i] = 0;
len[0] = i;
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [FuncSig] int unpack_string(grib_accessor* a, char* val, size_t* len)
add_funcsig_buffer_mapping    : Adding [cbuffer=[char* val] , clength=[size_t* len] -> cpp_container=[std::string& stringValue]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[char* val] mapping.cppfuncsig.args[1]=[std::string& stringValue]
add_funcsig_arg_mapping       : Adding funcsig arg: [char* val] -> [std::string& stringValue]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[2]=[size_t* len] mapping.cppfuncsig.args[2]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [size_t* len] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] GribStatus unpack(std::string& stringValue)
convert_ccode_object          : [IN] [CompoundStatement] {
size_t i = 0;
grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = a->length;
if (len[0] < (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_ARRAY_TOO_SMALL;
}
for(i = 0;i < alen;i++)
val[i] = hand->buffer->data[a->offset + i];
val[i] = 0;
len[0] = i;
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [CodeObjects] size_t i = 0;
convert_ccode_object          : [IN] [VariableDeclaration] size_t i = 0;
convert_ccode_object          : [IN] [Arg] size_t i
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[size_t i] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[size_t i]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[None] match_type=[DeclSpecMatchType.NONE]
convert_ccode_object          : [IN] [DeclSpec] size_t
create_cpp_code_object        : DeclSpecConverter [IN] [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab531219f0>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
add_funcbody_type_mapping     : Adding decl_spec: [size_t] -> [size_t]
create_cpp_code_object        : DeclSpecConverter [OUT] DeclSpec conversion: [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab531219f0>] -> [size_t]
convert_ccode_object          : [OUT][DeclSpec] size_t
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.NONE]
add_arg_mapping               : Adding arg: [size_t i] -> [size_t i]
create_funcbody_cpparg        : Arg conversion arg mapping: [size_t i] -> [size_t i]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[size_t] cpp_arg=[size_t i]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[size_t] cpp_decl_spec=[size_t]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[size_t i]
convert_ccode_object          : [OUT][Arg] size_t i
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][VariableDeclaration] size_t i = 0;
convert_ccode_object          : [OUT][CodeObjects] size_t i = 0;
convert_ccode_object          : [IN] [CodeObjects] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [IN] [VariableDeclaration] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [IN] [Arg] grib_handle* hand
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[grib_handle* hand] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[grib_handle* hand]
funcbody_cpparg_for_carg      : key=[size_t i] value=[size_t i]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[grib_handle*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4bfe86d0>] value=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[grib_handle*]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[[<NoneValue>]] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[[<NoneValue>]] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[[<NoneValue>]] cpp_arg=[[<NoneValue>]]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[[<NoneValue>]]
convert_ccode_object          : [OUT][_NoneValue] [<NoneValue>]
convert_ccode_object          : [OUT][Literal] // [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [OUT][CodeObjects] // [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [IN] [CodeObjects] const size_t alen = a->length;
convert_ccode_object          : [IN] [VariableDeclaration] const size_t alen = a->length;
convert_ccode_object          : [IN] [Arg] const size_t alen
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[const size_t alen] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[const size_t alen]
funcbody_cpparg_for_carg      : key=[size_t i] value=[size_t i]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[const size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4bfe86d0>] value=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[const size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[1]
create_best_matching_cdecl_spec:  Match key=[size_t] value=[size_t]
create_best_matching_cdecl_spec:  Pointer Match: entry key=[size_t] score=[2]
create_best_matching_cdecl_spec:  Scored Match: key=[size_t] score=[2]
create_best_matching_cdecl_spec:  Result: key=[size_t] value=[size_t] match=[2]
create_best_matching_cdecl_spec:  new_decl_spec=[const size_t] match=[2]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[const size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[const size_t] match_type=[DeclSpecMatchType.POINTER]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[const size_t] match_type=[DeclSpecMatchType.POINTER]
add_arg_mapping               : Adding arg: [const size_t alen] -> [const size_t alen]
create_funcbody_cpparg        : Arg conversion arg mapping: [const size_t alen] -> [const size_t alen]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[const size_t] cpp_arg=[const size_t alen]
add_funcbody_type_mapping     : Adding decl_spec: [const size_t] -> [const size_t]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[const size_t] cpp_decl_spec=[const size_t]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[const size_t alen]
convert_ccode_object          : [OUT][Arg] const size_t alen
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [OUT][VariableDeclaration] const size_t alen = length_;
convert_ccode_object          : [OUT][CodeObjects] const size_t alen = length_;
convert_ccode_object          : [IN] [IfStatement] if (len[0] < (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_ARRAY_TOO_SMALL;
}
convert_ccode_object          : [IN] [BinaryOperation] len[0] < (alen + 1)
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [IN] [ParenExpression] (alen + 1)
convert_ccode_object          : [IN] [BinaryOperation] alen + 1
convert_ccode_object          : [IN] [ValueDeclarationReference] alen
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[alen] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[alen] cpparg=[const size_t alen]
convert_ccode_object          : [OUT][ValueDeclarationReference] alen
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] alen + 1
convert_ccode_object          : [OUT][ParenExpression] (alen + 1)
convert_ccode_object          : [OUT][BinaryOperation] stringValue.size();[0] < (alen + 1)
convert_ccode_object          : [IN] [CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_ARRAY_TOO_SMALL;
}
convert_ccode_object          : [IN] [FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_log
convert_ccode_object          : [OUT][str] gribContextLog
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [Literal] GRIB_LOG_ERROR
convert_ccode_object          : [OUT][Literal] GRIB_LOG_ERROR
convert_ccode_object          : [IN] [Literal] "unpack_string: Wrong size (%zu) for %s, it contains %ld values"
convert_ccode_object          : [OUT][Literal] "unpack_string: Wrong size (%zu) for %s, it contains %ld values"
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [IN] [StructMemberAccess] a->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->name]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->name]
is_class_pointer_name         : Testing name=[name]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] name
convert_ccode_object          : [OUT][str] name
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->name
convert_ccode_object          : [OUT][StructMemberAccess] a->name
convert_ccode_object          : [IN] [BinaryOperation] a->length + 1
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] length_ + 1
convert_ccode_object          : [OUT][FunctionCall] gribContextLog(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
convert_ccode_object          : [IN] [BinaryOperation] len[0] = 0;
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] stringValue.size();[0] = 0;
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_ARRAY_TOO_SMALL;
convert_ccode_object          : [IN] [Literal] GRIB_ARRAY_TOO_SMALL
convert_ccode_object          : [OUT][Literal] GribStatus::ARRAY_TOO_SMALL
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::ARRAY_TOO_SMALL;
convert_ccode_object          : [OUT][CompoundStatement] {
gribContextLog(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::ARRAY_TOO_SMALL;
}
convert_ccode_object          : [OUT][IfStatement] if (stringValue.size()[0] < (alen + 1))
{
gribContextLog(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::ARRAY_TOO_SMALL;
}
convert_ccode_object          : [IN] [ForStatement] for(i = 0;i < alen;i++)
val[i] = hand->buffer->data[a->offset + i];
convert_ccode_object          : [IN] [BinaryOperation] i = 0;
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] i = 0;
convert_ccode_object          : [IN] [BinaryOperation] i < alen
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [ValueDeclarationReference] alen
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[alen] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[alen] cpparg=[const size_t alen]
convert_ccode_object          : [OUT][ValueDeclarationReference] alen
convert_ccode_object          : [OUT][BinaryOperation] i < alen
convert_ccode_object          : [IN] [UnaryOperation] i++;
convert_ccode_object          : [IN] [Operation] ++
convert_ccode_object          : [OUT][Operation] ++
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
validate_unary_operation      : cppunary_operation.operand string=[i] type=[ValueDeclarationReference]
to_cpparg                     : cpp_obj=[i] -> cpparg=[size_t i]
validate_unary_operation      : cpparg=[size_t i]
convert_ccode_object          : [OUT][UnaryOperation] i++;
convert_ccode_object          : [IN] [BinaryOperation] val[i] = hand->buffer->data[a->offset + i];
convert_ccode_object          : [IN] [ArrayAccess] val[i]
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[val] cpp_container_arg=[stringValue]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][ArrayAccess] stringValue[i]
convert_ccode_object          : [IN] [ArrayAccess] hand->buffer->data[a->offset + i]
convert_ccode_object          : [IN] [StructMemberAccess] hand->buffer->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[hand->buffer->data]
is_class_pointer_name         : Testing name=[hand]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] hand
convert_ccode_object          : [OUT][str] hand
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->buffer->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->buffer->data]
is_class_pointer_name         : Testing name=[buffer]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] buffer
convert_ccode_object          : [OUT][str] buffer
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->data]
is_class_pointer_name         : Testing name=[data]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] data
convert_ccode_object          : [OUT][str] data
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->data
convert_ccode_object          : [OUT][StructMemberAccess] ->buffer->data
convert_ccode_object          : [OUT][StructMemberAccess] hand->buffer->data
convert_ccode_object          : [IN] [BinaryOperation] a->offset + i
convert_ccode_object          : [IN] [StructMemberAccess] a->offset
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->offset]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] offset_
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][BinaryOperation] offset_ + i
convert_ccode_object          : [OUT][ArrayAccess] hand->buffer->data[offset_ + i]
convert_ccode_object          : [OUT][BinaryOperation] stringValue[i] = hand->buffer->data[offset_ + i];
convert_ccode_object          : [OUT][ForStatement] for(i = 0;i < alen;i++)
stringValue[i] = hand->buffer->data[offset_ + i];
convert_ccode_object          : [IN] [BinaryOperation] val[i] = 0;
convert_ccode_object          : [IN] [ArrayAccess] val[i]
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[val] cpp_container_arg=[stringValue]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][ArrayAccess] stringValue[i]
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] stringValue[i] = 0;
convert_ccode_object          : [IN] [BinaryOperation] len[0] = i;
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][BinaryOperation] stringValue.size();[0] = i;
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_SUCCESS;
convert_ccode_object          : [IN] [Literal] GRIB_SUCCESS
convert_ccode_object          : [OUT][Literal] GribStatus::SUCCESS
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::SUCCESS;
convert_ccode_object          : [OUT][CompoundStatement] {
size_t i = 0;
// [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = length_;
if (stringValue.size()[0] < (alen + 1))
{
gribContextLog(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::ARRAY_TOO_SMALL;
}
for(i = 0;i < alen;i++)
stringValue[i] = hand->buffer->data[offset_ + i];
stringValue[i] = 0;
stringValue.size();[0] = i;
return 
GribStatus::SUCCESS;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribStatus ::unpack(std::string& stringValue)
{
size_t i = 0;
// [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = length_;
if (stringValue.size()[0] < (alen + 1))
{
gribContextLog(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::ARRAY_TOO_SMALL;
}
for(i = 0;i < alen;i++)
stringValue[i] = hand->buffer->data[offset_ + i];
stringValue[i] = 0;
stringValue.size();[0] = i;
return 
GribStatus::SUCCESS;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribStatus unpack(std::string& stringValue) const
dump_function                 : {
                                size_t i = 0;
                                // [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
                                const size_t alen = length_;
                                if (stringValue.size()[0] < (alen + 1))
                                {
                                gribContextLog(a->context, GRIB_LOG_ERROR, "unpack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
                                stringValue.size();[0] = 0;
                                return 
                                GribStatus::ARRAY_TOO_SMALL;
                                }
                                for(i = 0;i < alen;i++)
                                stringValue[i] = hand->buffer->data[offset_ + i];
                                stringValue[i] = 0;
                                stringValue.size();[0] = i;
                                return 
                                GribStatus::SUCCESS;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::pack_string(grib_accessor* a, const char* val, size_t* len)
{
size_t i = 0;
grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = a->length;
if (len[0] > (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_BUFFER_TOO_SMALL;
}
for(i = 0;i < alen;i++)
{
if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
}
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [FuncSig] int pack_string(grib_accessor* a, const char* val, size_t* len)
add_funcsig_buffer_mapping    : Adding [cbuffer=[const char* val] , clength=[size_t* len] -> cpp_container=[std::string const& stringValue]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[const char* val] mapping.cppfuncsig.args[1]=[std::string const& stringValue]
add_funcsig_arg_mapping       : Adding funcsig arg: [const char* val] -> [std::string const& stringValue]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[2]=[size_t* len] mapping.cppfuncsig.args[2]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [size_t* len] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] GribStatus pack(std::string const& stringValue)
convert_ccode_object          : [IN] [CompoundStatement] {
size_t i = 0;
grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = a->length;
if (len[0] > (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_BUFFER_TOO_SMALL;
}
for(i = 0;i < alen;i++)
{
if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
}
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [CodeObjects] size_t i = 0;
convert_ccode_object          : [IN] [VariableDeclaration] size_t i = 0;
convert_ccode_object          : [IN] [Arg] size_t i
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[size_t i] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[size_t i]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[None] match_type=[DeclSpecMatchType.NONE]
convert_ccode_object          : [IN] [DeclSpec] size_t
create_cpp_code_object        : DeclSpecConverter [IN] [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab5018c190>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
add_funcbody_type_mapping     : Adding decl_spec: [size_t] -> [size_t]
create_cpp_code_object        : DeclSpecConverter [OUT] DeclSpec conversion: [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab5018c190>] -> [size_t]
convert_ccode_object          : [OUT][DeclSpec] size_t
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.NONE]
add_arg_mapping               : Adding arg: [size_t i] -> [size_t i]
create_funcbody_cpparg        : Arg conversion arg mapping: [size_t i] -> [size_t i]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[size_t] cpp_arg=[size_t i]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[size_t] cpp_decl_spec=[size_t]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[size_t i]
convert_ccode_object          : [OUT][Arg] size_t i
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][VariableDeclaration] size_t i = 0;
convert_ccode_object          : [OUT][CodeObjects] size_t i = 0;
convert_ccode_object          : [IN] [CodeObjects] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [IN] [VariableDeclaration] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [IN] [Arg] grib_handle* hand
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[grib_handle* hand] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[grib_handle* hand]
funcbody_cpparg_for_carg      : key=[size_t i] value=[size_t i]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[grib_handle*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4bea8fa0>] value=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[grib_handle*]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[[<NoneValue>]] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[[<NoneValue>]] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[[<NoneValue>]] cpp_arg=[[<NoneValue>]]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[[<NoneValue>]]
convert_ccode_object          : [OUT][_NoneValue] [<NoneValue>]
convert_ccode_object          : [OUT][Literal] // [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [OUT][CodeObjects] // [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
convert_ccode_object          : [IN] [CodeObjects] const size_t alen = a->length;
convert_ccode_object          : [IN] [VariableDeclaration] const size_t alen = a->length;
convert_ccode_object          : [IN] [Arg] const size_t alen
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[const size_t alen] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[const size_t alen]
funcbody_cpparg_for_carg      : key=[size_t i] value=[size_t i]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[const size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4bea8fa0>] value=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[const size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[1]
create_best_matching_cdecl_spec:  Match key=[size_t] value=[size_t]
create_best_matching_cdecl_spec:  Pointer Match: entry key=[size_t] score=[2]
create_best_matching_cdecl_spec:  Scored Match: key=[size_t] score=[2]
create_best_matching_cdecl_spec:  Result: key=[size_t] value=[size_t] match=[2]
create_best_matching_cdecl_spec:  new_decl_spec=[const size_t] match=[2]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[const size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[const size_t] match_type=[DeclSpecMatchType.POINTER]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[const size_t] match_type=[DeclSpecMatchType.POINTER]
add_arg_mapping               : Adding arg: [const size_t alen] -> [const size_t alen]
create_funcbody_cpparg        : Arg conversion arg mapping: [const size_t alen] -> [const size_t alen]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[const size_t] cpp_arg=[const size_t alen]
add_funcbody_type_mapping     : Adding decl_spec: [const size_t] -> [const size_t]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[const size_t] cpp_decl_spec=[const size_t]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[const size_t alen]
convert_ccode_object          : [OUT][Arg] const size_t alen
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [OUT][VariableDeclaration] const size_t alen = length_;
convert_ccode_object          : [OUT][CodeObjects] const size_t alen = length_;
convert_ccode_object          : [IN] [IfStatement] if (len[0] > (alen + 1))
{
grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_BUFFER_TOO_SMALL;
}
convert_ccode_object          : [IN] [BinaryOperation] len[0] > (alen + 1)
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [IN] [ParenExpression] (alen + 1)
convert_ccode_object          : [IN] [BinaryOperation] alen + 1
convert_ccode_object          : [IN] [ValueDeclarationReference] alen
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[alen] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[alen] cpparg=[const size_t alen]
convert_ccode_object          : [OUT][ValueDeclarationReference] alen
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] alen + 1
convert_ccode_object          : [OUT][ParenExpression] (alen + 1)
convert_ccode_object          : [OUT][BinaryOperation] stringValue.size();[0] > (alen + 1)
convert_ccode_object          : [IN] [CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
len[0] = 0;
return 
GRIB_BUFFER_TOO_SMALL;
}
convert_ccode_object          : [IN] [FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", len[0], a->name, a->length + 1);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_log
convert_ccode_object          : [OUT][str] gribContextLog
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [Literal] GRIB_LOG_ERROR
convert_ccode_object          : [OUT][Literal] GRIB_LOG_ERROR
convert_ccode_object          : [IN] [Literal] "pack_string: Wrong size (%zu) for %s, it contains %ld values"
convert_ccode_object          : [OUT][Literal] "pack_string: Wrong size (%zu) for %s, it contains %ld values"
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [IN] [StructMemberAccess] a->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->name]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->name]
is_class_pointer_name         : Testing name=[name]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] name
convert_ccode_object          : [OUT][str] name
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->name
convert_ccode_object          : [OUT][StructMemberAccess] a->name
convert_ccode_object          : [IN] [BinaryOperation] a->length + 1
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] length_ + 1
convert_ccode_object          : [OUT][FunctionCall] gribContextLog(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
convert_ccode_object          : [IN] [BinaryOperation] len[0] = 0;
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] stringValue.size();[0] = 0;
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_BUFFER_TOO_SMALL;
convert_ccode_object          : [IN] [Literal] GRIB_BUFFER_TOO_SMALL
convert_ccode_object          : [OUT][Literal] GribStatus::BUFFER_TOO_SMALL
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::BUFFER_TOO_SMALL;
convert_ccode_object          : [OUT][CompoundStatement] {
gribContextLog(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::BUFFER_TOO_SMALL;
}
convert_ccode_object          : [OUT][IfStatement] if (stringValue.size()[0] > (alen + 1))
{
gribContextLog(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::BUFFER_TOO_SMALL;
}
convert_ccode_object          : [IN] [ForStatement] for(i = 0;i < alen;i++)
{
if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
}
convert_ccode_object          : [IN] [BinaryOperation] i = 0;
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] i = 0;
convert_ccode_object          : [IN] [BinaryOperation] i < alen
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [ValueDeclarationReference] alen
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[alen] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[alen] cpparg=[const size_t alen]
convert_ccode_object          : [OUT][ValueDeclarationReference] alen
convert_ccode_object          : [OUT][BinaryOperation] i < alen
convert_ccode_object          : [IN] [UnaryOperation] i++;
convert_ccode_object          : [IN] [Operation] ++
convert_ccode_object          : [OUT][Operation] ++
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
validate_unary_operation      : cppunary_operation.operand string=[i] type=[ValueDeclarationReference]
to_cpparg                     : cpp_obj=[i] -> cpparg=[size_t i]
validate_unary_operation      : cpparg=[size_t i]
convert_ccode_object          : [OUT][UnaryOperation] i++;
convert_ccode_object          : [IN] [CompoundStatement] {
if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
}
convert_ccode_object          : [IN] [IfStatement] if (i < len[0])
hand->buffer->data[a->offset + i] = val[i];
else hand->buffer->data[a->offset + i] = 0;
convert_ccode_object          : [IN] [BinaryOperation] i < len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [ArrayAccess] len[0]
convert_ccode_object          : [IN] [ValueDeclarationReference] len
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[len] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[len] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_container_length_arg: cpp_member=[stringValue.size();]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[len] cpp_container_arg=[stringValue.size();]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue.size();
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ArrayAccess] stringValue.size();[0]
convert_ccode_object          : [OUT][BinaryOperation] i < stringValue.size();[0]
convert_ccode_object          : [IN] [BinaryOperation] hand->buffer->data[a->offset + i] = val[i];
convert_ccode_object          : [IN] [ArrayAccess] hand->buffer->data[a->offset + i]
convert_ccode_object          : [IN] [StructMemberAccess] hand->buffer->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[hand->buffer->data]
is_class_pointer_name         : Testing name=[hand]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] hand
convert_ccode_object          : [OUT][str] hand
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->buffer->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->buffer->data]
is_class_pointer_name         : Testing name=[buffer]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] buffer
convert_ccode_object          : [OUT][str] buffer
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->data]
is_class_pointer_name         : Testing name=[data]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] data
convert_ccode_object          : [OUT][str] data
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->data
convert_ccode_object          : [OUT][StructMemberAccess] ->buffer->data
convert_ccode_object          : [OUT][StructMemberAccess] hand->buffer->data
convert_ccode_object          : [IN] [BinaryOperation] a->offset + i
convert_ccode_object          : [IN] [StructMemberAccess] a->offset
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->offset]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] offset_
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][BinaryOperation] offset_ + i
convert_ccode_object          : [OUT][ArrayAccess] hand->buffer->data[offset_ + i]
convert_ccode_object          : [IN] [ArrayAccess] val[i]
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[stringValue]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[val] cpp_container_arg=[stringValue]
convert_ccode_object          : [OUT][StructMemberAccess] stringValue
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][ArrayAccess] stringValue[i]
convert_ccode_object          : [OUT][BinaryOperation] hand->buffer->data[offset_ + i] = stringValue[i];
convert_ccode_object          : [IN] [BinaryOperation] hand->buffer->data[a->offset + i] = 0;
convert_ccode_object          : [IN] [ArrayAccess] hand->buffer->data[a->offset + i]
convert_ccode_object          : [IN] [StructMemberAccess] hand->buffer->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[hand->buffer->data]
is_class_pointer_name         : Testing name=[hand]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] hand
convert_ccode_object          : [OUT][str] hand
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->buffer->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->buffer->data]
is_class_pointer_name         : Testing name=[buffer]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] buffer
convert_ccode_object          : [OUT][str] buffer
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->data
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->data]
is_class_pointer_name         : Testing name=[data]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] data
convert_ccode_object          : [OUT][str] data
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->data
convert_ccode_object          : [OUT][StructMemberAccess] ->buffer->data
convert_ccode_object          : [OUT][StructMemberAccess] hand->buffer->data
convert_ccode_object          : [IN] [BinaryOperation] a->offset + i
convert_ccode_object          : [IN] [StructMemberAccess] a->offset
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->offset]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] offset_
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][BinaryOperation] offset_ + i
convert_ccode_object          : [OUT][ArrayAccess] hand->buffer->data[offset_ + i]
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] hand->buffer->data[offset_ + i] = 0;
convert_ccode_object          : [OUT][IfStatement] if (i < stringValue.size()[0])
hand->buffer->data[offset_ + i] = stringValue[i];
else hand->buffer->data[offset_ + i] = 0;
convert_ccode_object          : [OUT][CompoundStatement] {
if (i < stringValue.size()[0])
hand->buffer->data[offset_ + i] = stringValue[i];
else hand->buffer->data[offset_ + i] = 0;
}
convert_ccode_object          : [OUT][ForStatement] for(i = 0;i < alen;i++)
{
if (i < stringValue.size()[0])
hand->buffer->data[offset_ + i] = stringValue[i];
else hand->buffer->data[offset_ + i] = 0;
}
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_SUCCESS;
convert_ccode_object          : [IN] [Literal] GRIB_SUCCESS
convert_ccode_object          : [OUT][Literal] GribStatus::SUCCESS
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::SUCCESS;
convert_ccode_object          : [OUT][CompoundStatement] {
size_t i = 0;
// [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = length_;
if (stringValue.size()[0] > (alen + 1))
{
gribContextLog(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::BUFFER_TOO_SMALL;
}
for(i = 0;i < alen;i++)
{
if (i < stringValue.size()[0])
hand->buffer->data[offset_ + i] = stringValue[i];
else hand->buffer->data[offset_ + i] = 0;
}
return 
GribStatus::SUCCESS;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribStatus ::pack(std::string const& stringValue)
{
size_t i = 0;
// [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
const size_t alen = length_;
if (stringValue.size()[0] > (alen + 1))
{
gribContextLog(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
stringValue.size();[0] = 0;
return 
GribStatus::BUFFER_TOO_SMALL;
}
for(i = 0;i < alen;i++)
{
if (i < stringValue.size()[0])
hand->buffer->data[offset_ + i] = stringValue[i];
else hand->buffer->data[offset_ + i] = 0;
}
return 
GribStatus::SUCCESS;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribStatus pack(std::string const& stringValue)
dump_function                 : {
                                size_t i = 0;
                                // [Removed invalid variable] grib_handle* hand = grib_handle_of_accessor(a);
                                const size_t alen = length_;
                                if (stringValue.size()[0] > (alen + 1))
                                {
                                gribContextLog(a->context, GRIB_LOG_ERROR, "pack_string: Wrong size (%zu) for %s, it contains %ld values", stringValue.size();[0], a->name, length_ + 1);
                                stringValue.size();[0] = 0;
                                return 
                                GribStatus::BUFFER_TOO_SMALL;
                                }
                                for(i = 0;i < alen;i++)
                                {
                                if (i < stringValue.size()[0])
                                hand->buffer->data[offset_ + i] = stringValue[i];
                                else hand->buffer->data[offset_ + i] = 0;
                                }
                                return 
                                GribStatus::SUCCESS;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::pack_long(grib_accessor* a, const long* v, size_t* len)
{
grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
convert_ccode_object          : [IN] [FuncSig] int pack_long(grib_accessor* a, const long* v, size_t* len)
add_funcsig_buffer_mapping    : Adding [cbuffer=[const long* v] , clength=[size_t* len] -> cpp_container=[std::vector<long> const& longValues]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[const long* v] mapping.cppfuncsig.args[1]=[std::vector<long> const& longValues]
add_funcsig_arg_mapping       : Adding funcsig arg: [const long* v] -> [std::vector<long> const& longValues]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[2]=[size_t* len] mapping.cppfuncsig.args[2]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [size_t* len] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] GribStatus pack(std::vector<long> const& longValues)
convert_ccode_object          : [IN] [CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
convert_ccode_object          : [IN] [FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_log
convert_ccode_object          : [OUT][str] gribContextLog
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [Literal] GRIB_LOG_ERROR
convert_ccode_object          : [OUT][Literal] GRIB_LOG_ERROR
convert_ccode_object          : [IN] [Literal] "Should not pack %s as long (It's a string)"
convert_ccode_object          : [OUT][Literal] "Should not pack %s as long (It's a string)"
convert_ccode_object          : [IN] [StructMemberAccess] a->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->name]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->name]
is_class_pointer_name         : Testing name=[name]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] name
convert_ccode_object          : [OUT][str] name
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->name
convert_ccode_object          : [OUT][StructMemberAccess] a->name
convert_ccode_object          : [OUT][FunctionCall] gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_NOT_IMPLEMENTED;
convert_ccode_object          : [IN] [Literal] GRIB_NOT_IMPLEMENTED
convert_ccode_object          : [OUT][Literal] GribStatus::NOT_IMPLEMENTED
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::NOT_IMPLEMENTED;
convert_ccode_object          : [OUT][CompoundStatement] {
gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
return 
GribStatus::NOT_IMPLEMENTED;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribStatus ::pack(std::vector<long> const& longValues)
{
gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
return 
GribStatus::NOT_IMPLEMENTED;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribStatus pack(std::vector<long> const& longValues)
dump_function                 : {
                                gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as long (It's a string)", a->name);
                                return 
                                GribStatus::NOT_IMPLEMENTED;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::pack_double(grib_accessor* a, const double* v, size_t* len)
{
grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
convert_ccode_object          : [IN] [FuncSig] int pack_double(grib_accessor* a, const double* v, size_t* len)
add_funcsig_buffer_mapping    : Adding [cbuffer=[const double* v] , clength=[size_t* len] -> cpp_container=[std::vector<double> const& doubleValues]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[const double* v] mapping.cppfuncsig.args[1]=[std::vector<double> const& doubleValues]
add_funcsig_arg_mapping       : Adding funcsig arg: [const double* v] -> [std::vector<double> const& doubleValues]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[2]=[size_t* len] mapping.cppfuncsig.args[2]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [size_t* len] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] GribStatus pack(std::vector<double> const& doubleValues)
convert_ccode_object          : [IN] [CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
convert_ccode_object          : [IN] [FunctionCall] grib_context_log(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_log
convert_ccode_object          : [OUT][str] gribContextLog
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [Literal] GRIB_LOG_ERROR
convert_ccode_object          : [OUT][Literal] GRIB_LOG_ERROR
convert_ccode_object          : [IN] [Literal] "Should not pack %s as double (It's a string)"
convert_ccode_object          : [OUT][Literal] "Should not pack %s as double (It's a string)"
convert_ccode_object          : [IN] [StructMemberAccess] a->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->name]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->name]
is_class_pointer_name         : Testing name=[name]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] name
convert_ccode_object          : [OUT][str] name
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->name
convert_ccode_object          : [OUT][StructMemberAccess] a->name
convert_ccode_object          : [OUT][FunctionCall] gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_NOT_IMPLEMENTED;
convert_ccode_object          : [IN] [Literal] GRIB_NOT_IMPLEMENTED
convert_ccode_object          : [OUT][Literal] GribStatus::NOT_IMPLEMENTED
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::NOT_IMPLEMENTED;
convert_ccode_object          : [OUT][CompoundStatement] {
gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
return 
GribStatus::NOT_IMPLEMENTED;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribStatus ::pack(std::vector<double> const& doubleValues)
{
gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
return 
GribStatus::NOT_IMPLEMENTED;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribStatus pack(std::vector<double> const& doubleValues)
dump_function                 : {
                                gribContextLog(a->context, GRIB_LOG_ERROR, "Should not pack %s as double (It's a string)", a->name);
                                return 
                                GribStatus::NOT_IMPLEMENTED;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::unpack_long(grib_accessor* a, long* v, size_t* len)
{
char val[] = {0};
size_t l = sizeof(val);
size_t i = 0;
char* last = NULL;
int err = grib_unpack_string(a, val, &l;);
if (err)
return 
err;
i = 0;
while (i < l - 1 && val[i] == ' ')
i++;
if (val[i] == 0)
{
*v = 0;
return 
0;
}
if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
*v = strtol(val, &last;, 10);
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [FuncSig] int unpack_long(grib_accessor* a, long* v, size_t* len)
add_funcsig_buffer_mapping    : Adding [cbuffer=[long* v] , clength=[size_t* len] -> cpp_container=[std::vector<long>& longValues]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[long* v] mapping.cppfuncsig.args[1]=[std::vector<long>& longValues]
add_funcsig_arg_mapping       : Adding funcsig arg: [long* v] -> [std::vector<long>& longValues]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[2]=[size_t* len] mapping.cppfuncsig.args[2]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [size_t* len] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] GribStatus unpack(std::vector<long>& longValues)
convert_ccode_object          : [IN] [CompoundStatement] {
char val[] = {0};
size_t l = sizeof(val);
size_t i = 0;
char* last = NULL;
int err = grib_unpack_string(a, val, &l;);
if (err)
return 
err;
i = 0;
while (i < l - 1 && val[i] == ' ')
i++;
if (val[i] == 0)
{
*v = 0;
return 
0;
}
if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
*v = strtol(val, &last;, 10);
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [CodeObjects] char val[] = {0};
convert_ccode_object          : [IN] [VariableDeclaration] char val[] = {0};
convert_ccode_object          : [IN] [Arg] char val[]
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[char val[]] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[char val[]]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[char[]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[char[]] cdecl_spec.type=[char] cdecl_spec.pointer=[[]] 
create_best_matching_cdecl_spec: matches_count=[2]
create_best_matching_cdecl_spec:  Match key=[char**] value=[std::string&]
create_best_matching_cdecl_spec:  Match key=[char*] value=[std::string]
create_best_matching_cdecl_spec:  Const Match: entry key=[char**] score=[4]
create_best_matching_cdecl_spec:  Pointer Match: entry key=[char*] score=[2]
create_best_matching_cdecl_spec:  Const Match: entry key=[char*] score=[6]
create_best_matching_cdecl_spec:  Scored Match: key=[char**] score=[4]
create_best_matching_cdecl_spec:  Scored Match: key=[char*] score=[6]
create_best_matching_cdecl_spec:  Result: key=[char*] value=[std::string] match=[6]
create_best_matching_cdecl_spec:  new_decl_spec=[std::string] match=[6]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[char[]]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.POINTER_AND_CONST]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.POINTER_AND_CONST]
add_arg_mapping               : Adding arg: [char val[]] -> [std::string val]
create_funcbody_cpparg        : Arg conversion arg mapping: [char val[]] -> [std::string val]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[std::string] cpp_arg=[std::string val]
add_funcbody_type_mapping     : Adding decl_spec: [char[]] -> [std::string]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[char[]] cpp_decl_spec=[std::string]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[std::string val]
convert_ccode_object          : [OUT][Arg] std::string val
convert_ccode_object          : [IN] [InitList] {0}
convert_ccode_object          : [IN] [DeclSpec] char[]
create_cpp_code_object        : DeclSpecConverter [IN] [char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab53178190>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be547c0>] value=[std::string]
convert_ccode_object          : [OUT][DeclSpec] std::string
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][InitList] {0}
convert_ccode_object          : [OUT][VariableDeclaration] std::string val = {0};
convert_ccode_object          : [OUT][CodeObjects] std::string val = {0};
convert_ccode_object          : [IN] [CodeObjects] size_t l = sizeof(val);
convert_ccode_object          : [IN] [VariableDeclaration] size_t l = sizeof(val);
convert_ccode_object          : [IN] [Arg] size_t l
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[size_t l] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[size_t l]
funcbody_cpparg_for_carg      : key=[char val[]] value=[std::string val]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be547c0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[None] match_type=[DeclSpecMatchType.NONE]
convert_ccode_object          : [IN] [DeclSpec] size_t
create_cpp_code_object        : DeclSpecConverter [IN] [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab531782b0>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be547c0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
add_funcbody_type_mapping     : Adding decl_spec: [size_t] -> [size_t]
create_cpp_code_object        : DeclSpecConverter [OUT] DeclSpec conversion: [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab531782b0>] -> [size_t]
convert_ccode_object          : [OUT][DeclSpec] size_t
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.NONE]
add_arg_mapping               : Adding arg: [size_t l] -> [size_t l]
create_funcbody_cpparg        : Arg conversion arg mapping: [size_t l] -> [size_t l]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[size_t] cpp_arg=[size_t l]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[size_t] cpp_decl_spec=[size_t]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[size_t l]
convert_ccode_object          : [OUT][Arg] size_t l
convert_ccode_object          : [IN] [UnaryExpression] sizeof(val)
convert_ccode_object          : [IN] [str] sizeof
convert_ccode_object          : [OUT][str] sizeof
convert_ccode_object          : [IN] [ParenExpression] (val)
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [OUT][ParenExpression] (val)
convert_ccode_object          : [OUT][UnaryExpression] sizeof(val)
convert_ccode_object          : [OUT][VariableDeclaration] size_t l = sizeof(val);
convert_ccode_object          : [OUT][CodeObjects] size_t l = sizeof(val);
convert_ccode_object          : [IN] [CodeObjects] size_t i = 0;
convert_ccode_object          : [IN] [VariableDeclaration] size_t i = 0;
convert_ccode_object          : [IN] [Arg] size_t i
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[size_t i] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[size_t i]
funcbody_cpparg_for_carg      : key=[char val[]] value=[std::string val]
funcbody_cpparg_for_carg      : key=[size_t l] value=[size_t l]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be547c0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be54dc0>] value=[size_t]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.FULL]
add_arg_mapping               : Adding arg: [size_t i] -> [size_t i]
create_funcbody_cpparg        : Arg conversion arg mapping: [size_t i] -> [size_t i]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[size_t] cpp_arg=[size_t i]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[size_t i]
convert_ccode_object          : [OUT][Arg] size_t i
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][VariableDeclaration] size_t i = 0;
convert_ccode_object          : [OUT][CodeObjects] size_t i = 0;
convert_ccode_object          : [IN] [CodeObjects] char* last = NULL;
convert_ccode_object          : [IN] [VariableDeclaration] char* last = NULL;
convert_ccode_object          : [IN] [Arg] char* last
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[char* last] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[char* last]
funcbody_cpparg_for_carg      : key=[char val[]] value=[std::string val]
funcbody_cpparg_for_carg      : key=[size_t l] value=[size_t l]
funcbody_cpparg_for_carg      : key=[size_t i] value=[size_t i]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[char*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be547c0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be54dc0>] value=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[char*]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
add_arg_mapping               : Adding arg: [char* last] -> [std::string last]
create_funcbody_cpparg        : Arg conversion arg mapping: [char* last] -> [std::string last]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[std::string] cpp_arg=[std::string last]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[std::string last]
convert_ccode_object          : [OUT][Arg] std::string last
convert_ccode_object          : [IN] [Literal] NULL
convert_ccode_object          : [OUT][Literal] NULL
convert_ccode_object          : [OUT][VariableDeclaration] std::string last = NULL;
convert_ccode_object          : [OUT][CodeObjects] std::string last = NULL;
convert_ccode_object          : [IN] [CodeObjects] int err = grib_unpack_string(a, val, &l;);
convert_ccode_object          : [IN] [VariableDeclaration] int err = grib_unpack_string(a, val, &l;);
convert_ccode_object          : [IN] [Arg] int err
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[int err] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[int err]
funcbody_cpparg_for_carg      : key=[char val[]] value=[std::string val]
funcbody_cpparg_for_carg      : key=[size_t l] value=[size_t l]
funcbody_cpparg_for_carg      : key=[size_t i] value=[size_t i]
funcbody_cpparg_for_carg      : key=[char* last] value=[std::string last]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[GribStatus err]
convert_ccode_object          : [OUT][Arg] GribStatus err
convert_ccode_object          : [IN] [FunctionCall] grib_unpack_string(a, val, &l;);
create_cpp_code_object        : FunctionCallConverter [1]
convert_ccode_object          : [IN] [ValueDeclarationReference] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[a] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[a] cpparg=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[a] cpp_container_arg=[None]
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [4] cdecl_ref_expr_value=[a] cppdecl_ref_expr_value=[a]
convert_ccode_object          : [OUT][ValueDeclarationReference] a
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [OUT][FunctionCall] gribUnpackString(a, val);
convert_ccode_object          : [OUT][VariableDeclaration] GribStatus err = GribStatus{gribUnpackString(a, val);};
convert_ccode_object          : [OUT][CodeObjects] GribStatus err = GribStatus{gribUnpackString(a, val);};
convert_ccode_object          : [IN] [IfStatement] if (err)
return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [IN] [ReturnStatement] return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [OUT][ReturnStatement] return 
err;
validate_if_statement         : updated_cppif_statement=[if (isError(err))
return 
err;]
convert_ccode_object          : [OUT][IfStatement] if (isError(err))
return 
err;
convert_ccode_object          : [IN] [BinaryOperation] i = 0;
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] i = 0;
convert_ccode_object          : [IN] [WhileStatement] while (i < l - 1 && val[i] == ' ')
i++;
convert_ccode_object          : [IN] [BinaryOperation] i < l - 1 && val[i] == ' '
convert_ccode_object          : [IN] [BinaryOperation] i < l - 1
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [BinaryOperation] l - 1
convert_ccode_object          : [IN] [ValueDeclarationReference] l
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[l] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[l] cpparg=[size_t l]
convert_ccode_object          : [OUT][ValueDeclarationReference] l
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] l - 1
convert_ccode_object          : [OUT][BinaryOperation] i < l - 1
convert_ccode_object          : [IN] [BinaryOperation] val[i] == ' '
convert_ccode_object          : [IN] [ArrayAccess] val[i]
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][ArrayAccess] val[i]
convert_ccode_object          : [IN] [Literal] ' '
convert_ccode_object          : [OUT][Literal] ' '
convert_ccode_object          : [OUT][BinaryOperation] val[i] == ' '
convert_ccode_object          : [OUT][BinaryOperation] i < l - 1 && val[i] == ' '
convert_ccode_object          : [IN] [UnaryOperation] i++;
convert_ccode_object          : [IN] [Operation] ++
convert_ccode_object          : [OUT][Operation] ++
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
validate_unary_operation      : cppunary_operation.operand string=[i] type=[ValueDeclarationReference]
to_cpparg                     : cpp_obj=[i] -> cpparg=[size_t i]
validate_unary_operation      : cpparg=[size_t i]
convert_ccode_object          : [OUT][UnaryOperation] i++;
convert_ccode_object          : [OUT][WhileStatement] while (i < l - 1 && val[i] == ' ')
i++;
convert_ccode_object          : [IN] [IfStatement] if (val[i] == 0)
{
*v = 0;
return 
0;
}
convert_ccode_object          : [IN] [BinaryOperation] val[i] == 0
convert_ccode_object          : [IN] [ArrayAccess] val[i]
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [OUT][ArrayAccess] val[i]
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] val[i] == 0
convert_ccode_object          : [IN] [CompoundStatement] {
*v = 0;
return 
0;
}
convert_ccode_object          : [IN] [BinaryOperation] *v = 0;
convert_ccode_object          : [IN] [UnaryOperation] *v;
convert_ccode_object          : [IN] [Operation] *
convert_ccode_object          : [OUT][Operation] *
convert_ccode_object          : [IN] [ValueDeclarationReference] v
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[v] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[v] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[longValues]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[v] cpp_container_arg=[longValues]
convert_ccode_object          : [OUT][StructMemberAccess] longValues
validate_unary_operation      : cppunary_operation.operand string=[longValues] type=[StructMemberAccess]
to_cpparg                     : cpp_obj=[longValues] -> cpparg=[std::vector<long>& longValues]
validate_unary_operation      : cpparg=[std::vector<long>& longValues]
validate_unary_operation      : Stripping [*] from cppunary_operation=[*longValues;]
convert_ccode_object          : [OUT][StructMemberAccess] longValues
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] longValues = 0;
convert_ccode_object          : [IN] [ReturnStatement] return 
0;
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][ReturnStatement] return 
0;
convert_ccode_object          : [OUT][CompoundStatement] {
longValues = 0;
return 
0;
}
convert_ccode_object          : [OUT][IfStatement] if (val[i] == 0)
{
longValues = 0;
return 
0;
}
convert_ccode_object          : [IN] [IfStatement] if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
convert_ccode_object          : [IN] [BinaryOperation] val[i + 1] == ' ' && i < l - 2
convert_ccode_object          : [IN] [BinaryOperation] val[i + 1] == ' '
convert_ccode_object          : [IN] [ArrayAccess] val[i + 1]
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [IN] [BinaryOperation] i + 1
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] i + 1
convert_ccode_object          : [OUT][ArrayAccess] val[i + 1]
convert_ccode_object          : [IN] [Literal] ' '
convert_ccode_object          : [OUT][Literal] ' '
convert_ccode_object          : [OUT][BinaryOperation] val[i + 1] == ' '
convert_ccode_object          : [IN] [BinaryOperation] i < l - 2
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [BinaryOperation] l - 2
convert_ccode_object          : [IN] [ValueDeclarationReference] l
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[l] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[l] cpparg=[size_t l]
convert_ccode_object          : [OUT][ValueDeclarationReference] l
convert_ccode_object          : [IN] [Literal] 2
convert_ccode_object          : [OUT][Literal] 2
convert_ccode_object          : [OUT][BinaryOperation] l - 2
convert_ccode_object          : [OUT][BinaryOperation] i < l - 2
convert_ccode_object          : [OUT][BinaryOperation] val[i + 1] == ' ' && i < l - 2
convert_ccode_object          : [IN] [BinaryOperation] val[i + 1] = 0;
convert_ccode_object          : [IN] [ArrayAccess] val[i + 1]
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [IN] [BinaryOperation] i + 1
convert_ccode_object          : [IN] [ValueDeclarationReference] i
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[i] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[i] cpparg=[size_t i]
convert_ccode_object          : [OUT][ValueDeclarationReference] i
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] i + 1
convert_ccode_object          : [OUT][ArrayAccess] val[i + 1]
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] val[i + 1] = 0;
convert_ccode_object          : [OUT][IfStatement] if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
convert_ccode_object          : [IN] [BinaryOperation] *v = strtol(val, &last;, 10);
convert_ccode_object          : [IN] [UnaryOperation] *v;
convert_ccode_object          : [IN] [Operation] *
convert_ccode_object          : [OUT][Operation] *
convert_ccode_object          : [IN] [ValueDeclarationReference] v
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[v] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[v] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[longValues]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[v] cpp_container_arg=[longValues]
convert_ccode_object          : [OUT][StructMemberAccess] longValues
validate_unary_operation      : cppunary_operation.operand string=[longValues] type=[StructMemberAccess]
to_cpparg                     : cpp_obj=[longValues] -> cpparg=[std::vector<long>& longValues]
validate_unary_operation      : cpparg=[std::vector<long>& longValues]
validate_unary_operation      : Stripping [*] from cppunary_operation=[*longValues;]
convert_ccode_object          : [OUT][StructMemberAccess] longValues
convert_ccode_object          : [IN] [FunctionCall] strtol(val, &last;, 10);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] strtol
convert_ccode_object          : [OUT][str] strtol
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [IN] [UnaryOperation] &last;
convert_ccode_object          : [IN] [Operation] &
convert_ccode_object          : [OUT][Operation] &
convert_ccode_object          : [IN] [ValueDeclarationReference] last
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[last] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[last] cpparg=[std::string last]
convert_ccode_object          : [OUT][ValueDeclarationReference] last
validate_unary_operation      : cppunary_operation.operand string=[last] type=[ValueDeclarationReference]
to_cpparg                     : cpp_obj=[last] -> cpparg=[std::string last]
validate_unary_operation      : cpparg=[std::string last]
validate_unary_operation      : Stripping [*] from cppunary_operation=[&last;]
convert_ccode_object          : [OUT][ValueDeclarationReference] last
convert_ccode_object          : [IN] [Literal] 10
convert_ccode_object          : [OUT][Literal] 10
convert_ccode_object          : [OUT][FunctionCall] strtol(val, last, 10);
convert_ccode_object          : [OUT][BinaryOperation] longValues = strtol(val, last, 10);
convert_ccode_object          : [IN] [FunctionCall] grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_log
convert_ccode_object          : [OUT][str] gribContextLog
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [Literal] GRIB_LOG_DEBUG
convert_ccode_object          : [OUT][Literal] GRIB_LOG_DEBUG
convert_ccode_object          : [IN] [Literal] " Casting string %s to long"
convert_ccode_object          : [OUT][Literal] " Casting string %s to long"
convert_ccode_object          : [IN] [StructMemberAccess] a->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->name]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->name]
is_class_pointer_name         : Testing name=[name]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] name
convert_ccode_object          : [OUT][str] name
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->name
convert_ccode_object          : [OUT][StructMemberAccess] a->name
convert_ccode_object          : [OUT][FunctionCall] gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_SUCCESS;
convert_ccode_object          : [IN] [Literal] GRIB_SUCCESS
convert_ccode_object          : [OUT][Literal] GribStatus::SUCCESS
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::SUCCESS;
convert_ccode_object          : [OUT][CompoundStatement] {
std::string val = {0};
size_t l = sizeof(val);
size_t i = 0;
std::string last = NULL;
GribStatus err = GribStatus{gribUnpackString(a, val);};
if (isError(err))
return 
err;
i = 0;
while (i < l - 1 && val[i] == ' ')
i++;
if (val[i] == 0)
{
longValues = 0;
return 
0;
}
if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
longValues = strtol(val, last, 10);
gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GribStatus::SUCCESS;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribStatus ::unpack(std::vector<long>& longValues)
{
std::string val = {0};
size_t l = sizeof(val);
size_t i = 0;
std::string last = NULL;
GribStatus err = GribStatus{gribUnpackString(a, val);};
if (isError(err))
return 
err;
i = 0;
while (i < l - 1 && val[i] == ' ')
i++;
if (val[i] == 0)
{
longValues = 0;
return 
0;
}
if (val[i + 1] == ' ' && i < l - 2)
val[i + 1] = 0;
longValues = strtol(val, last, 10);
gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GribStatus::SUCCESS;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribStatus unpack(std::vector<long>& longValues) const
dump_function                 : {
                                std::string val = {0};
                                size_t l = sizeof(val);
                                size_t i = 0;
                                std::string last = NULL;
                                GribStatus err = GribStatus{gribUnpackString(a, val);};
                                if (isError(err))
                                return 
                                err;
                                i = 0;
                                while (i < l - 1 && val[i] == ' ')
                                i++;
                                if (val[i] == 0)
                                {
                                longValues = 0;
                                return 
                                0;
                                }
                                if (val[i + 1] == ' ' && i < l - 2)
                                val[i + 1] = 0;
                                longValues = strtol(val, last, 10);
                                gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
                                return 
                                GribStatus::SUCCESS;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::unpack_double(grib_accessor* a, double* v, size_t* len)
{
char val[] = 1024;
size_t l = sizeof(val);
char* last = NULL;
int err = grib_unpack_string(a, val, &l;);
if (err)
return 
err;
*v = strtod(val, &last;);
if (*last == 0)
{
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
grib_context_log(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
convert_ccode_object          : [IN] [FuncSig] int unpack_double(grib_accessor* a, double* v, size_t* len)
add_funcsig_buffer_mapping    : Adding [cbuffer=[double* v] , clength=[size_t* len] -> cpp_container=[std::vector<double>& doubleValues]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[double* v] mapping.cppfuncsig.args[1]=[std::vector<double>& doubleValues]
add_funcsig_arg_mapping       : Adding funcsig arg: [double* v] -> [std::vector<double>& doubleValues]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[2]=[size_t* len] mapping.cppfuncsig.args[2]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [size_t* len] -> [[<NoneValue>]]
convert_ccode_object          : [OUT][FuncSig] GribStatus unpack(std::vector<double>& doubleValues)
convert_ccode_object          : [IN] [CompoundStatement] {
char val[] = 1024;
size_t l = sizeof(val);
char* last = NULL;
int err = grib_unpack_string(a, val, &l;);
if (err)
return 
err;
*v = strtod(val, &last;);
if (*last == 0)
{
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
grib_context_log(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
return 
GRIB_NOT_IMPLEMENTED;
}
convert_ccode_object          : [IN] [CodeObjects] char val[] = 1024;
convert_ccode_object          : [IN] [VariableDeclaration] char val[] = 1024;
convert_ccode_object          : [IN] [Arg] char val[]
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[char val[]] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[char val[]]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[char[]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[char[]] cdecl_spec.type=[char] cdecl_spec.pointer=[[]] 
create_best_matching_cdecl_spec: matches_count=[2]
create_best_matching_cdecl_spec:  Match key=[char**] value=[std::string&]
create_best_matching_cdecl_spec:  Match key=[char*] value=[std::string]
create_best_matching_cdecl_spec:  Const Match: entry key=[char**] score=[4]
create_best_matching_cdecl_spec:  Pointer Match: entry key=[char*] score=[2]
create_best_matching_cdecl_spec:  Const Match: entry key=[char*] score=[6]
create_best_matching_cdecl_spec:  Scored Match: key=[char**] score=[4]
create_best_matching_cdecl_spec:  Scored Match: key=[char*] score=[6]
create_best_matching_cdecl_spec:  Result: key=[char*] value=[std::string] match=[6]
create_best_matching_cdecl_spec:  new_decl_spec=[std::string] match=[6]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[char[]]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.POINTER_AND_CONST]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.POINTER_AND_CONST]
add_arg_mapping               : Adding arg: [char val[]] -> [std::string val]
create_funcbody_cpparg        : Arg conversion arg mapping: [char val[]] -> [std::string val]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[std::string] cpp_arg=[std::string val]
add_funcbody_type_mapping     : Adding decl_spec: [char[]] -> [std::string]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[char[]] cpp_decl_spec=[std::string]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[std::string val]
convert_ccode_object          : [OUT][Arg] std::string val
convert_ccode_object          : [IN] [Literal] 1024
convert_ccode_object          : [OUT][Literal] 1024
convert_ccode_object          : [OUT][VariableDeclaration] std::string val = 1024;
convert_ccode_object          : [OUT][CodeObjects] std::string val = 1024;
convert_ccode_object          : [IN] [CodeObjects] size_t l = sizeof(val);
convert_ccode_object          : [IN] [VariableDeclaration] size_t l = sizeof(val);
convert_ccode_object          : [IN] [Arg] size_t l
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[size_t l] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[size_t l]
funcbody_cpparg_for_carg      : key=[char val[]] value=[std::string val]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a320>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[None] match_type=[DeclSpecMatchType.NONE]
convert_ccode_object          : [IN] [DeclSpec] size_t
create_cpp_code_object        : DeclSpecConverter [IN] [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab5317b7f0>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a320>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
add_funcbody_type_mapping     : Adding decl_spec: [size_t] -> [size_t]
create_cpp_code_object        : DeclSpecConverter [OUT] DeclSpec conversion: [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab5317b7f0>] -> [size_t]
convert_ccode_object          : [OUT][DeclSpec] size_t
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.NONE]
add_arg_mapping               : Adding arg: [size_t l] -> [size_t l]
create_funcbody_cpparg        : Arg conversion arg mapping: [size_t l] -> [size_t l]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[size_t] cpp_arg=[size_t l]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[size_t] cpp_decl_spec=[size_t]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[size_t l]
convert_ccode_object          : [OUT][Arg] size_t l
convert_ccode_object          : [IN] [UnaryExpression] sizeof(val)
convert_ccode_object          : [IN] [str] sizeof
convert_ccode_object          : [OUT][str] sizeof
convert_ccode_object          : [IN] [ParenExpression] (val)
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [OUT][ParenExpression] (val)
convert_ccode_object          : [OUT][UnaryExpression] sizeof(val)
convert_ccode_object          : [OUT][VariableDeclaration] size_t l = sizeof(val);
convert_ccode_object          : [OUT][CodeObjects] size_t l = sizeof(val);
convert_ccode_object          : [IN] [CodeObjects] char* last = NULL;
convert_ccode_object          : [IN] [VariableDeclaration] char* last = NULL;
convert_ccode_object          : [IN] [Arg] char* last
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[char* last] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[char* last]
funcbody_cpparg_for_carg      : key=[char val[]] value=[std::string val]
funcbody_cpparg_for_carg      : key=[size_t l] value=[size_t l]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[char*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a320>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a530>] value=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[char*]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
add_arg_mapping               : Adding arg: [char* last] -> [std::string last]
create_funcbody_cpparg        : Arg conversion arg mapping: [char* last] -> [std::string last]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[std::string] cpp_arg=[std::string last]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[std::string last]
convert_ccode_object          : [OUT][Arg] std::string last
convert_ccode_object          : [IN] [Literal] NULL
convert_ccode_object          : [OUT][Literal] NULL
convert_ccode_object          : [OUT][VariableDeclaration] std::string last = NULL;
convert_ccode_object          : [OUT][CodeObjects] std::string last = NULL;
convert_ccode_object          : [IN] [CodeObjects] int err = grib_unpack_string(a, val, &l;);
convert_ccode_object          : [IN] [VariableDeclaration] int err = grib_unpack_string(a, val, &l;);
convert_ccode_object          : [IN] [Arg] int err
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[int err] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[int err]
funcbody_cpparg_for_carg      : key=[char val[]] value=[std::string val]
funcbody_cpparg_for_carg      : key=[size_t l] value=[size_t l]
funcbody_cpparg_for_carg      : key=[char* last] value=[std::string last]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[GribStatus err]
convert_ccode_object          : [OUT][Arg] GribStatus err
convert_ccode_object          : [IN] [FunctionCall] grib_unpack_string(a, val, &l;);
create_cpp_code_object        : FunctionCallConverter [1]
convert_ccode_object          : [IN] [ValueDeclarationReference] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[a] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[a] cpparg=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[a] cpp_container_arg=[None]
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [4] cdecl_ref_expr_value=[a] cppdecl_ref_expr_value=[a]
convert_ccode_object          : [OUT][ValueDeclarationReference] a
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [OUT][FunctionCall] gribUnpackString(a, val);
convert_ccode_object          : [OUT][VariableDeclaration] GribStatus err = GribStatus{gribUnpackString(a, val);};
convert_ccode_object          : [OUT][CodeObjects] GribStatus err = GribStatus{gribUnpackString(a, val);};
convert_ccode_object          : [IN] [IfStatement] if (err)
return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [IN] [ReturnStatement] return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [OUT][ReturnStatement] return 
err;
validate_if_statement         : updated_cppif_statement=[if (isError(err))
return 
err;]
convert_ccode_object          : [OUT][IfStatement] if (isError(err))
return 
err;
convert_ccode_object          : [IN] [BinaryOperation] *v = strtod(val, &last;);
convert_ccode_object          : [IN] [UnaryOperation] *v;
convert_ccode_object          : [IN] [Operation] *
convert_ccode_object          : [OUT][Operation] *
convert_ccode_object          : [IN] [ValueDeclarationReference] v
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[v] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[v] cpparg=[None]
create_cpp_container_buffer_arg: cpp_member=[doubleValues]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[v] cpp_container_arg=[doubleValues]
convert_ccode_object          : [OUT][StructMemberAccess] doubleValues
validate_unary_operation      : cppunary_operation.operand string=[doubleValues] type=[StructMemberAccess]
to_cpparg                     : cpp_obj=[doubleValues] -> cpparg=[std::vector<double>& doubleValues]
validate_unary_operation      : cpparg=[std::vector<double>& doubleValues]
validate_unary_operation      : Stripping [*] from cppunary_operation=[*doubleValues;]
convert_ccode_object          : [OUT][StructMemberAccess] doubleValues
convert_ccode_object          : [IN] [FunctionCall] strtod(val, &last;);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] strtod
convert_ccode_object          : [OUT][str] strtod
convert_ccode_object          : [IN] [ValueDeclarationReference] val
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[val] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[val] cpparg=[std::string val]
convert_ccode_object          : [OUT][ValueDeclarationReference] val
convert_ccode_object          : [IN] [UnaryOperation] &last;
convert_ccode_object          : [IN] [Operation] &
convert_ccode_object          : [OUT][Operation] &
convert_ccode_object          : [IN] [ValueDeclarationReference] last
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[last] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[last] cpparg=[std::string last]
convert_ccode_object          : [OUT][ValueDeclarationReference] last
validate_unary_operation      : cppunary_operation.operand string=[last] type=[ValueDeclarationReference]
to_cpparg                     : cpp_obj=[last] -> cpparg=[std::string last]
validate_unary_operation      : cpparg=[std::string last]
validate_unary_operation      : Stripping [*] from cppunary_operation=[&last;]
convert_ccode_object          : [OUT][ValueDeclarationReference] last
convert_ccode_object          : [OUT][FunctionCall] strtod(val, last);
convert_ccode_object          : [OUT][BinaryOperation] doubleValues = strtod(val, last);
convert_ccode_object          : [IN] [IfStatement] if (*last == 0)
{
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [BinaryOperation] *last == 0
convert_ccode_object          : [IN] [UnaryOperation] *last;
convert_ccode_object          : [IN] [Operation] *
convert_ccode_object          : [OUT][Operation] *
convert_ccode_object          : [IN] [ValueDeclarationReference] last
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[last] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[last] cpparg=[std::string last]
convert_ccode_object          : [OUT][ValueDeclarationReference] last
validate_unary_operation      : cppunary_operation.operand string=[last] type=[ValueDeclarationReference]
to_cpparg                     : cpp_obj=[last] -> cpparg=[std::string last]
validate_unary_operation      : cpparg=[std::string last]
validate_unary_operation      : Stripping [*] from cppunary_operation=[*last;]
convert_ccode_object          : [OUT][ValueDeclarationReference] last
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][BinaryOperation] last == 0
convert_ccode_object          : [IN] [CompoundStatement] {
grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GRIB_SUCCESS;
}
convert_ccode_object          : [IN] [FunctionCall] grib_context_log(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_log
convert_ccode_object          : [OUT][str] gribContextLog
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [Literal] GRIB_LOG_DEBUG
convert_ccode_object          : [OUT][Literal] GRIB_LOG_DEBUG
convert_ccode_object          : [IN] [Literal] " Casting string %s to long"
convert_ccode_object          : [OUT][Literal] " Casting string %s to long"
convert_ccode_object          : [IN] [StructMemberAccess] a->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->name]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->name]
is_class_pointer_name         : Testing name=[name]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] name
convert_ccode_object          : [OUT][str] name
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->name
convert_ccode_object          : [OUT][StructMemberAccess] a->name
convert_ccode_object          : [OUT][FunctionCall] gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_SUCCESS;
convert_ccode_object          : [IN] [Literal] GRIB_SUCCESS
convert_ccode_object          : [OUT][Literal] GribStatus::SUCCESS
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::SUCCESS;
convert_ccode_object          : [OUT][CompoundStatement] {
gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GribStatus::SUCCESS;
}
convert_ccode_object          : [OUT][IfStatement] if (last == 0)
{
gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GribStatus::SUCCESS;
}
convert_ccode_object          : [IN] [FunctionCall] grib_context_log(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_log
convert_ccode_object          : [OUT][str] gribContextLog
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [Literal] GRIB_LOG_WARNING
convert_ccode_object          : [OUT][Literal] GRIB_LOG_WARNING
convert_ccode_object          : [IN] [Literal] "Cannot unpack %s as double. Hint: Try unpacking as string"
convert_ccode_object          : [OUT][Literal] "Cannot unpack %s as double. Hint: Try unpacking as string"
convert_ccode_object          : [IN] [StructMemberAccess] a->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->name]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->name
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->name]
is_class_pointer_name         : Testing name=[name]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] name
convert_ccode_object          : [OUT][str] name
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->name
convert_ccode_object          : [OUT][StructMemberAccess] a->name
convert_ccode_object          : [OUT][FunctionCall] gribContextLog(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_NOT_IMPLEMENTED;
convert_ccode_object          : [IN] [Literal] GRIB_NOT_IMPLEMENTED
convert_ccode_object          : [OUT][Literal] GribStatus::NOT_IMPLEMENTED
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::NOT_IMPLEMENTED;
convert_ccode_object          : [OUT][CompoundStatement] {
std::string val = 1024;
size_t l = sizeof(val);
std::string last = NULL;
GribStatus err = GribStatus{gribUnpackString(a, val);};
if (isError(err))
return 
err;
doubleValues = strtod(val, last);
if (last == 0)
{
gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GribStatus::SUCCESS;
}
gribContextLog(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
return 
GribStatus::NOT_IMPLEMENTED;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] GribStatus ::unpack(std::vector<double>& doubleValues)
{
std::string val = 1024;
size_t l = sizeof(val);
std::string last = NULL;
GribStatus err = GribStatus{gribUnpackString(a, val);};
if (isError(err))
return 
err;
doubleValues = strtod(val, last);
if (last == 0)
{
gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
return 
GribStatus::SUCCESS;
}
gribContextLog(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
return 
GribStatus::NOT_IMPLEMENTED;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : GribStatus unpack(std::vector<double>& doubleValues) const
dump_function                 : {
                                std::string val = 1024;
                                size_t l = sizeof(val);
                                std::string last = NULL;
                                GribStatus err = GribStatus{gribUnpackString(a, val);};
                                if (isError(err))
                                return 
                                err;
                                doubleValues = strtod(val, last);
                                if (last == 0)
                                {
                                gribContextLog(a->context, GRIB_LOG_DEBUG, " Casting string %s to long", a->name);
                                return 
                                GribStatus::SUCCESS;
                                }
                                gribContextLog(a->context, GRIB_LOG_WARNING, "Cannot unpack %s as double. Hint: Try unpacking as string", a->name);
                                return 
                                GribStatus::NOT_IMPLEMENTED;
                                }
dump_function                 : ================================================================================
convert_ccode_object          : [IN] [VirtualMemberFunction] int grib_accessor_class_ascii::compare(grib_accessor* a, grib_accessor* b)
{
int retval = 0;
char* aval = 0;
char* bval = 0;
int err = 0;
size_t alen = a->length + 1;
size_t blen = b->length + 1;
if (alen != blen)
return 
GRIB_COUNT_MISMATCH;
// [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
// [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
err = grib_unpack_string(a, aval, &alen;);
if (err)
return 
err;
err = grib_unpack_string(b, bval, &blen;);
if (err)
return 
err;
retval = GRIB_SUCCESS;
if (STR_EQUAL(aval,bval)))
retval = GRIB_STRING_VALUE_MISMATCH;
grib_context_free(a->context, aval);
grib_context_free(b->context, bval);
return 
retval;
}
convert_ccode_object          : [IN] [FuncSig] int compare(grib_accessor* a, grib_accessor* b)
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[0]=[grib_accessor* a] mapping.cppfuncsig.args[0]=[[<NoneValue>]]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* a] -> [[<NoneValue>]]
create_cpp_code_object        : DEBUG FUNCSIG MAPPING: cfuncsig.args[1]=[grib_accessor* b] mapping.cppfuncsig.args[1]=[AccessorData const& rhs]
add_funcsig_arg_mapping       : Adding funcsig arg: [grib_accessor* b] -> [AccessorData const& rhs]
convert_ccode_object          : [OUT][FuncSig] bool compare(AccessorData const& rhs)
convert_ccode_object          : [IN] [CompoundStatement] {
int retval = 0;
char* aval = 0;
char* bval = 0;
int err = 0;
size_t alen = a->length + 1;
size_t blen = b->length + 1;
if (alen != blen)
return 
GRIB_COUNT_MISMATCH;
// [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
// [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
err = grib_unpack_string(a, aval, &alen;);
if (err)
return 
err;
err = grib_unpack_string(b, bval, &blen;);
if (err)
return 
err;
retval = GRIB_SUCCESS;
if (STR_EQUAL(aval,bval)))
retval = GRIB_STRING_VALUE_MISMATCH;
grib_context_free(a->context, aval);
grib_context_free(b->context, bval);
return 
retval;
}
convert_ccode_object          : [IN] [CodeObjects] int retval = 0;
convert_ccode_object          : [IN] [VariableDeclaration] int retval = 0;
convert_ccode_object          : [IN] [Arg] int retval
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[int retval] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[int retval]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[int]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[int] cdecl_spec.type=[int] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[int]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[None] match_type=[DeclSpecMatchType.NONE]
convert_ccode_object          : [IN] [DeclSpec] int
create_cpp_code_object        : DeclSpecConverter [IN] [int] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50111360>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[int] cdecl_spec.type=[int] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
add_funcbody_type_mapping     : Adding decl_spec: [int] -> [int]
create_cpp_code_object        : DeclSpecConverter [OUT] DeclSpec conversion: [int] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50111360>] -> [int]
convert_ccode_object          : [OUT][DeclSpec] int
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[int] match_type=[DeclSpecMatchType.NONE]
add_arg_mapping               : Adding arg: [int retval] -> [int retval]
create_funcbody_cpparg        : Arg conversion arg mapping: [int retval] -> [int retval]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[int] cpp_arg=[int retval]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[int] cpp_decl_spec=[int]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[int retval]
convert_ccode_object          : [OUT][Arg] int retval
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][VariableDeclaration] int retval = 0;
convert_ccode_object          : [OUT][CodeObjects] int retval = 0;
convert_ccode_object          : [IN] [CodeObjects] char* aval = 0;
convert_ccode_object          : [IN] [VariableDeclaration] char* aval = 0;
convert_ccode_object          : [IN] [Arg] char* aval
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[char* aval] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[char* aval]
funcbody_cpparg_for_carg      : key=[int retval] value=[int retval]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[char*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[int] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a410>] value=[int]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[char*]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
add_arg_mapping               : Adding arg: [char* aval] -> [std::string aval]
create_funcbody_cpparg        : Arg conversion arg mapping: [char* aval] -> [std::string aval]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[std::string] cpp_arg=[std::string aval]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[std::string aval]
convert_ccode_object          : [OUT][Arg] std::string aval
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][VariableDeclaration] std::string aval = 0;
convert_ccode_object          : [OUT][CodeObjects] std::string aval = 0;
convert_ccode_object          : [IN] [CodeObjects] char* bval = 0;
convert_ccode_object          : [IN] [VariableDeclaration] char* bval = 0;
convert_ccode_object          : [IN] [Arg] char* bval
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[char* bval] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[char* bval]
funcbody_cpparg_for_carg      : key=[int retval] value=[int retval]
funcbody_cpparg_for_carg      : key=[char* aval] value=[std::string aval]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[char*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[int] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a410>] value=[int]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[char*]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[std::string] match_type=[DeclSpecMatchType.FULL]
add_arg_mapping               : Adding arg: [char* bval] -> [std::string bval]
create_funcbody_cpparg        : Arg conversion arg mapping: [char* bval] -> [std::string bval]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[std::string] cpp_arg=[std::string bval]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[std::string bval]
convert_ccode_object          : [OUT][Arg] std::string bval
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][VariableDeclaration] std::string bval = 0;
convert_ccode_object          : [OUT][CodeObjects] std::string bval = 0;
convert_ccode_object          : [IN] [CodeObjects] int err = 0;
convert_ccode_object          : [IN] [VariableDeclaration] int err = 0;
convert_ccode_object          : [IN] [Arg] int err
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[int err] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[int err]
funcbody_cpparg_for_carg      : key=[int retval] value=[int retval]
funcbody_cpparg_for_carg      : key=[char* aval] value=[std::string aval]
funcbody_cpparg_for_carg      : key=[char* bval] value=[std::string bval]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[GribStatus err]
convert_ccode_object          : [OUT][Arg] GribStatus err
convert_ccode_object          : [IN] [Literal] 0
convert_ccode_object          : [OUT][Literal] 0
convert_ccode_object          : [OUT][VariableDeclaration] GribStatus err = GribStatus{0};
convert_ccode_object          : [OUT][CodeObjects] GribStatus err = GribStatus{0};
convert_ccode_object          : [IN] [CodeObjects] size_t alen = a->length + 1;
convert_ccode_object          : [IN] [VariableDeclaration] size_t alen = a->length + 1;
convert_ccode_object          : [IN] [Arg] size_t alen
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[size_t alen] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[size_t alen]
funcbody_cpparg_for_carg      : key=[int retval] value=[int retval]
funcbody_cpparg_for_carg      : key=[char* aval] value=[std::string aval]
funcbody_cpparg_for_carg      : key=[char* bval] value=[std::string bval]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[int] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a410>] value=[int]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[None] match_type=[DeclSpecMatchType.NONE]
convert_ccode_object          : [IN] [DeclSpec] size_t
create_cpp_code_object        : DeclSpecConverter [IN] [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50111ae0>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[int] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a410>] value=[int]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab501124a0>] value=[AccessorPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_handle*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50112a70>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_context*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50113fa0>] value=[[<NoneValue>]]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_expression*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398370>] value=[GribExpressionPtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_codetable*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398430>] value=[GribCodeTablePtr]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_darray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503984f0>] value=[std::vector<double>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_iarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503985b0>] value=[std::vector<long>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_sarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398670>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vdarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398730>] value=[std::vector<std::vector<double>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_viarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503987f0>] value=[std::vector<std::vector<long>>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_vsarray*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab503988b0>] value=[std::vector<std::string>]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char**] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398970>] value=[std::string&]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398a30>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[char[][]] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398af0>] value=[std::string]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[FILE*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398bb0>] value=[FILE*]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[grib_accessor_ascii*] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50398d60>] value=[[<NoneValue>]]
create_best_matching_cdecl_spec: cdecl_spec=[size_t] cdecl_spec.type=[size_t] cdecl_spec.pointer=[] 
create_best_matching_cdecl_spec: matches_count=[0]
add_funcbody_type_mapping     : Adding decl_spec: [size_t] -> [size_t]
create_cpp_code_object        : DeclSpecConverter [OUT] DeclSpec conversion: [size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab50111ae0>] -> [size_t]
convert_ccode_object          : [OUT][DeclSpec] size_t
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.NONE]
add_arg_mapping               : Adding arg: [size_t alen] -> [size_t alen]
create_funcbody_cpparg        : Arg conversion arg mapping: [size_t alen] -> [size_t alen]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[size_t] cpp_arg=[size_t alen]
convert_funcbody_arg          : Arg conversion type mapping: carg.decl_spec=[size_t] cpp_decl_spec=[size_t]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[size_t alen]
convert_ccode_object          : [OUT][Arg] size_t alen
convert_ccode_object          : [IN] [BinaryOperation] a->length + 1
convert_ccode_object          : [IN] [StructMemberAccess] a->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->length]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] length_
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] length_ + 1
convert_ccode_object          : [OUT][VariableDeclaration] size_t alen = length_ + 1;
convert_ccode_object          : [OUT][CodeObjects] size_t alen = length_ + 1;
convert_ccode_object          : [IN] [CodeObjects] size_t blen = b->length + 1;
convert_ccode_object          : [IN] [VariableDeclaration] size_t blen = b->length + 1;
convert_ccode_object          : [IN] [Arg] size_t blen
create_cpp_code_object        : ArgConverter [IN] self._ccode_object=[size_t blen] is_func_arg=[False]
convert_funcbody_arg          : ==[1]== carg=[size_t blen]
funcbody_cpparg_for_carg      : key=[int retval] value=[int retval]
funcbody_cpparg_for_carg      : key=[char* aval] value=[std::string aval]
funcbody_cpparg_for_carg      : key=[char* bval] value=[std::string bval]
funcbody_cpparg_for_carg      : key=[size_t alen] value=[size_t alen]
funcbody_cpparg_for_carg      : key=[int err] value=[GribStatus err]
convert_funcbody_arg          : ==[2]== carg=[None]
convert_funcbody_decl_spec    : [1] test_decl_spec=[size_t]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[int] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be5a410>] value=[int]
closest_funcbody_cppdecl_spec_for_cdecl_spec:  Entry: key=[size_t] [<code_object.declaration_specifier.DeclSpec object at 0x7fab4be64670>] value=[size_t]
convert_funcbody_decl_spec    : [2.1] test_decl_spec=[size_t]
convert_funcbody_decl_spec    : [2.2] cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.FULL]
convert_funcbody_arg          : ==[3]== cpp_decl_spec=[size_t] match_type=[DeclSpecMatchType.FULL]
add_arg_mapping               : Adding arg: [size_t blen] -> [size_t blen]
create_funcbody_cpparg        : Arg conversion arg mapping: [size_t blen] -> [size_t blen]
convert_funcbody_arg          : ==[4]== cpp_decl_spec=[size_t] cpp_arg=[size_t blen]
create_cpp_code_object        : ArgConverter [OUT] cpp_arg=[size_t blen]
convert_ccode_object          : [OUT][Arg] size_t blen
convert_ccode_object          : [IN] [BinaryOperation] b->length + 1
convert_ccode_object          : [IN] [StructMemberAccess] b->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[b->length]
is_class_pointer_name         : Testing name=[b]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] b
convert_ccode_object          : [OUT][str] b
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->length
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->length]
is_class_pointer_name         : Testing name=[length]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] length
convert_ccode_object          : [OUT][str] length
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->length
convert_ccode_object          : [OUT][StructMemberAccess] b->length
convert_ccode_object          : [IN] [Literal] 1
convert_ccode_object          : [OUT][Literal] 1
convert_ccode_object          : [OUT][BinaryOperation] b->length + 1
convert_ccode_object          : [OUT][VariableDeclaration] size_t blen = b->length + 1;
convert_ccode_object          : [OUT][CodeObjects] size_t blen = b->length + 1;
convert_ccode_object          : [IN] [IfStatement] if (alen != blen)
return 
GRIB_COUNT_MISMATCH;
convert_ccode_object          : [IN] [BinaryOperation] alen != blen
convert_ccode_object          : [IN] [ValueDeclarationReference] alen
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[alen] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[alen] cpparg=[size_t alen]
convert_ccode_object          : [OUT][ValueDeclarationReference] alen
convert_ccode_object          : [IN] [ValueDeclarationReference] blen
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[blen] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[blen] cpparg=[size_t blen]
convert_ccode_object          : [OUT][ValueDeclarationReference] blen
convert_ccode_object          : [OUT][BinaryOperation] alen != blen
convert_ccode_object          : [IN] [ReturnStatement] return 
GRIB_COUNT_MISMATCH;
convert_ccode_object          : [IN] [Literal] GRIB_COUNT_MISMATCH
convert_ccode_object          : [OUT][Literal] GribStatus::COUNT_MISMATCH
convert_ccode_object          : [OUT][ReturnStatement] return 
GribStatus::COUNT_MISMATCH;
convert_ccode_object          : [OUT][IfStatement] if (alen != blen)
return 
GribStatus::COUNT_MISMATCH;
convert_ccode_object          : [IN] [Literal] // [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
convert_ccode_object          : [OUT][Literal] // [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
convert_ccode_object          : [IN] [Literal] // [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
convert_ccode_object          : [OUT][Literal] // [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
convert_ccode_object          : [IN] [BinaryOperation] err = grib_unpack_string(a, aval, &alen;);
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [IN] [FunctionCall] grib_unpack_string(a, aval, &alen;);
create_cpp_code_object        : FunctionCallConverter [1]
convert_ccode_object          : [IN] [ValueDeclarationReference] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[a] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[a] cpparg=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[a] cpp_container_arg=[None]
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
create_cpp_code_object        : ValueDeclarationReferenceConverter [4] cdecl_ref_expr_value=[a] cppdecl_ref_expr_value=[a]
convert_ccode_object          : [OUT][ValueDeclarationReference] a
convert_ccode_object          : [IN] [ValueDeclarationReference] aval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[aval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[aval] cpparg=[std::string aval]
convert_ccode_object          : [OUT][ValueDeclarationReference] aval
convert_ccode_object          : [OUT][FunctionCall] gribUnpackString(a, aval);
convert_ccode_object          : [OUT][BinaryOperation] err = gribUnpackString(a, aval);
convert_ccode_object          : [IN] [IfStatement] if (err)
return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [IN] [ReturnStatement] return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [OUT][ReturnStatement] return 
err;
validate_if_statement         : updated_cppif_statement=[if (isError(err))
return 
err;]
convert_ccode_object          : [OUT][IfStatement] if (isError(err))
return 
err;
convert_ccode_object          : [IN] [BinaryOperation] err = grib_unpack_string(b, bval, &blen;);
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [IN] [FunctionCall] grib_unpack_string(b, bval, &blen;);
create_cpp_code_object        : FunctionCallConverter [1]
convert_ccode_object          : [IN] [ValueDeclarationReference] b
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[b] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[b] cpparg=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [3] cdecl_ref_expr_value=[b] cpp_container_arg=[None]
convert_ccode_object          : [IN] [str] b
convert_ccode_object          : [OUT][str] b
create_cpp_code_object        : ValueDeclarationReferenceConverter [4] cdecl_ref_expr_value=[b] cppdecl_ref_expr_value=[b]
convert_ccode_object          : [OUT][ValueDeclarationReference] b
convert_ccode_object          : [IN] [ValueDeclarationReference] bval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[bval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[bval] cpparg=[std::string bval]
convert_ccode_object          : [OUT][ValueDeclarationReference] bval
convert_ccode_object          : [OUT][FunctionCall] gribUnpackString(b, bval);
convert_ccode_object          : [OUT][BinaryOperation] err = gribUnpackString(b, bval);
convert_ccode_object          : [IN] [IfStatement] if (err)
return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [IN] [ReturnStatement] return 
err;
convert_ccode_object          : [IN] [ValueDeclarationReference] err
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[err] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[err] cpparg=[GribStatus err]
convert_ccode_object          : [OUT][ValueDeclarationReference] err
convert_ccode_object          : [OUT][ReturnStatement] return 
err;
validate_if_statement         : updated_cppif_statement=[if (isError(err))
return 
err;]
convert_ccode_object          : [OUT][IfStatement] if (isError(err))
return 
err;
convert_ccode_object          : [IN] [BinaryOperation] retval = GRIB_SUCCESS;
convert_ccode_object          : [IN] [ValueDeclarationReference] retval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[retval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[retval] cpparg=[int retval]
convert_ccode_object          : [OUT][ValueDeclarationReference] retval
convert_ccode_object          : [IN] [Literal] GRIB_SUCCESS
convert_ccode_object          : [OUT][Literal] GribStatus::SUCCESS
convert_ccode_object          : [OUT][BinaryOperation] retval = GribStatus::SUCCESS;
convert_ccode_object          : [IN] [IfStatement] if (STR_EQUAL(aval,bval)))
retval = GRIB_STRING_VALUE_MISMATCH;
convert_ccode_object          : [IN] [UnaryOperation] STR_EQUAL(aval,bval););
convert_ccode_object          : [IN] [Operation] )
convert_ccode_object          : [OUT][Operation] )
convert_ccode_object          : [IN] [MacroInstantation] STR_EQUAL(aval,bval);
convert_ccode_object          : [IN] [CodeObjects] (
aval
,
bval
)
convert_ccode_object          : [IN] [Literal] (
convert_ccode_object          : [OUT][Literal] (
convert_ccode_object          : [IN] [ValueDeclarationReference] aval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[aval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[aval] cpparg=[std::string aval]
convert_ccode_object          : [OUT][ValueDeclarationReference] aval
convert_ccode_object          : [IN] [Literal] ,
convert_ccode_object          : [OUT][Literal] ,
convert_ccode_object          : [IN] [Literal] bval
convert_ccode_object          : [OUT][Literal] bval
convert_ccode_object          : [IN] [Literal] )
convert_ccode_object          : [OUT][Literal] )
convert_ccode_object          : [OUT][CodeObjects] (
aval
,
bval
)
convert_ccode_object          : [OUT][MacroInstantation] STR_EQUAL(aval,bval);
validate_unary_operation      : cppunary_operation.operand string=[STR_EQUAL(aval,bval);] type=[MacroInstantation]
to_cpparg                     : cpp_obj=[STR_EQUAL(aval,bval);] -> cpparg=[None]
validate_unary_operation      : cpparg=[None]
convert_ccode_object          : [OUT][UnaryOperation] STR_EQUAL(aval,bval););
convert_ccode_object          : [IN] [BinaryOperation] retval = GRIB_STRING_VALUE_MISMATCH;
convert_ccode_object          : [IN] [ValueDeclarationReference] retval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[retval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[retval] cpparg=[int retval]
convert_ccode_object          : [OUT][ValueDeclarationReference] retval
convert_ccode_object          : [IN] [Literal] GRIB_STRING_VALUE_MISMATCH
convert_ccode_object          : [OUT][Literal] GribStatus::STRING_VALUE_MISMATCH
convert_ccode_object          : [OUT][BinaryOperation] retval = GribStatus::STRING_VALUE_MISMATCH;
convert_ccode_object          : [OUT][IfStatement] if (STR_EQUAL(aval,bval)))
retval = GribStatus::STRING_VALUE_MISMATCH;
convert_ccode_object          : [IN] [FunctionCall] grib_context_free(a->context, aval);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_free
convert_ccode_object          : [OUT][str] gribContextFree
convert_ccode_object          : [IN] [StructMemberAccess] a->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[a->context]
is_class_pointer_name         : Testing name=[a]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: TRUE
cppdata_member_for_cdata_member_name: key=[long length] value=[long length_]
cppdata_member_for_cdata_member_name: key=[long offset] value=[long offset_]
cppdata_member_for_cdata_member_name: key=[unsigned long flags] value=[unsigned long flags_]
cppdata_member_for_cdata_member_name: key=[int dirty] value=[mutable int dirty_]
cppdata_member_for_cdata_member_name: key=[grib_virtual_value* vvalue] value=[GribVirtualValuePtr vvalue_]
cppdata_member_for_cdata_member_name: key=[const char* set] value=[std::string set_]
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] a
convert_ccode_object          : [OUT][str] a
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] a->context
convert_ccode_object          : [IN] [ValueDeclarationReference] aval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[aval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[aval] cpparg=[std::string aval]
convert_ccode_object          : [OUT][ValueDeclarationReference] aval
convert_ccode_object          : [OUT][FunctionCall] gribContextFree(a->context, aval);
convert_ccode_object          : [IN] [FunctionCall] grib_context_free(b->context, bval);
create_cpp_code_object        : FunctionCallConverter [2]
convert_ccode_object          : [IN] [str] grib_context_free
convert_ccode_object          : [OUT][str] gribContextFree
convert_ccode_object          : [IN] [StructMemberAccess] b->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[b->context]
is_class_pointer_name         : Testing name=[b]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [str] b
convert_ccode_object          : [OUT][str] b
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [StructMemberAccess] ->context
create_cpp_code_object        :  StructMemberAccessConverter [IN] cstruct_member_access=[->context]
is_class_pointer_name         : Testing name=[context]
is_class_pointer_name         :  > Testing entry=[self]
is_class_pointer_name         :  > Testing entry=[this]
is_class_pointer_name         :  > Testing entry=[a]
is_class_pointer_name         :  RESULT: FALSE
convert_ccode_object          : [IN] [str] ->
convert_ccode_object          : [OUT][str] ->
convert_ccode_object          : [IN] [str] context
convert_ccode_object          : [OUT][str] context
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [IN] [NoneType] None
convert_ccode_object          : [OUT][NoneType] None
convert_ccode_object          : [OUT][StructMemberAccess] ->context
convert_ccode_object          : [OUT][StructMemberAccess] b->context
convert_ccode_object          : [IN] [ValueDeclarationReference] bval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[bval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[bval] cpparg=[std::string bval]
convert_ccode_object          : [OUT][ValueDeclarationReference] bval
convert_ccode_object          : [OUT][FunctionCall] gribContextFree(b->context, bval);
convert_ccode_object          : [IN] [ReturnStatement] return 
retval;
convert_ccode_object          : [IN] [ValueDeclarationReference] retval
create_cpp_code_object        : ValueDeclarationReferenceConverter [1] cdecl_ref_expr_value=[retval] cppfuncsig=[None]
create_cpp_code_object        : ValueDeclarationReferenceConverter [2] cdecl_ref_expr_value=[retval] cpparg=[int retval]
convert_ccode_object          : [OUT][ValueDeclarationReference] retval
convert_ccode_object          : [OUT][ReturnStatement] return 
retval;
convert_ccode_object          : [OUT][CompoundStatement] {
int retval = 0;
std::string aval = 0;
std::string bval = 0;
GribStatus err = GribStatus{0};
size_t alen = length_ + 1;
size_t blen = b->length + 1;
if (alen != blen)
return 
GribStatus::COUNT_MISMATCH;
// [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
// [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
err = gribUnpackString(a, aval);
if (isError(err))
return 
err;
err = gribUnpackString(b, bval);
if (isError(err))
return 
err;
retval = GribStatus::SUCCESS;
if (STR_EQUAL(aval,bval)))
retval = GribStatus::STRING_VALUE_MISMATCH;
gribContextFree(a->context, aval);
gribContextFree(b->context, bval);
return 
retval;
}
convert_ccode_object          : [OUT][VirtualMemberFunction] bool ::compare(AccessorData const& rhs)
{
int retval = 0;
std::string aval = 0;
std::string bval = 0;
GribStatus err = GribStatus{0};
size_t alen = length_ + 1;
size_t blen = b->length + 1;
if (alen != blen)
return 
GribStatus::COUNT_MISMATCH;
// [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
// [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
err = gribUnpackString(a, aval);
if (isError(err))
return 
err;
err = gribUnpackString(b, bval);
if (isError(err))
return 
err;
retval = GribStatus::SUCCESS;
if (STR_EQUAL(aval,bval)))
retval = GribStatus::STRING_VALUE_MISMATCH;
gribContextFree(a->context, aval);
gribContextFree(b->context, bval);
return 
retval;
}
dump_function                 : ================================================================================
dump_function                 : Source=[convert_virtual_member_functions]
dump_function                 : --------------------------------------------------------------------------------
dump_function                 : bool compare(AccessorData const& rhs) const
dump_function                 : {
                                int retval = 0;
                                std::string aval = 0;
                                std::string bval = 0;
                                GribStatus err = GribStatus{0};
                                size_t alen = length_ + 1;
                                size_t blen = b->length + 1;
                                if (alen != blen)
                                return 
                                GribStatus::COUNT_MISMATCH;
                                // [Ignoring C Code] aval = ( char * ) grib_context_malloc ( a -> context , alen * sizeof ( char ) )
                                // [Ignoring C Code] bval = ( char * ) grib_context_malloc ( b -> context , blen * sizeof ( char ) )
                                err = gribUnpackString(a, aval);
                                if (isError(err))
                                return 
                                err;
                                err = gribUnpackString(b, bval);
                                if (isError(err))
                                return 
                                err;
                                retval = GribStatus::SUCCESS;
                                if (STR_EQUAL(aval,bval)))
                                retval = GribStatus::STRING_VALUE_MISMATCH;
                                gribContextFree(a->context, aval);
                                gribContextFree(b->context, bval);
                                return 
                                retval;
                                }
dump_function                 : ================================================================================
convert                       : 

============================== [PHASE 3: Convert C to C++] END   ==============================

convert                       : 

============================== [PHASE 4: Write C++ files ] BEGIN ==============================

__init__                      : j2 template path=[/home/kev/git/ecmwf/eccodes.convertion-inherit/src/clang_convert/grib_accessor/j2]
write_header_file             : file_stem = AsciiData
write_source_file             : file_stem = AsciiData
convert                       : 

============================== [PHASE 4: Write C++ files ] END   ==============================

