
import utils.debug as debug
import code_object.global_function as global_function
import os

# Represents the C++ conversion of a CCode instance
#
# Create from code_info and code_elements objects generated by the conversion process
#
# Note: Most data is stored as CodeInterface objects
class CppCode:
    def __init__(self, code_info, code_elements) -> None:
        self._code_info = code_info
        self._code_elements = code_elements

    # ============================== CodeInfo properties: start ==============================

    @property
    def file_name(self):
        return self._code_info.file_name

    @property
    def file_stem(self):
        return os.path.splitext(os.path.basename(self._code_info.file_name))[0]

    @property
    def class_name(self):
        return self._code_info.class_name

    @property
    def super_class_name(self):
        return self._code_info.super_class_name

    @property 
    def nested_namespaces(self):
        return "::".join(self._code_info.namespaces)

    @property 
    def forward_declarations(self):
        return self._code_info.forward_declarations

    @property
    def base_function_names(self):
        return self._code_info.base_function_names

    @property
    def header_file_includes(self):
        return self._code_info.header_includes

    @property
    def source_file_includes(self):
        return self._code_info.source_includes

    # ============================== CodeInfo properties: end   ==============================

    # ============================== CodeElements properties: start ==============================

    @property
    def global_function(self):
        return self._code_elements.global_function

    @property
    def functions(self):
        return self._code_elements.functions

    @property
    def constructor(self):
        return self._code_elements.constructor

    @property
    def destructor(self):
        return self._code_elements.destructor

    @property
    def member_functions(self):
        return self._code_elements.member_functions

    @property
    def template_member_functions(self):
        return self._code_elements.member_functions

    @property
    def virtual_member_functions(self):
        return self._code_elements.virtual_member_functions

    @property
    def data_members(self):
        return self._code_elements.data_members

    # ============================== CodeElements properties: end   ==============================
