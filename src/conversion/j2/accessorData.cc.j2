/*
 * (C) Copyright 2005- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
 * virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
 */

{%- for i in c.source_includes %}
#include "{{ i }}"
{%- endfor %}

namespace {{ c.nested_namespaces }} {

// Global section - START
{{ c.global_function.body }}
// Global section - END

{% for m in c.static_functions %}
static {{ m.return_type }} {{ m.name }}({{ m.arg_string }}) {
        {{ m.body }}
}
{% endfor %}

{{ c.name }}::{{ c.name }}({{c.constructor.arg_string}}) : {{ c.super }}({{ c.constructor.parent_call_arg_string }}){
       {{ c.constructor.body }}
}

// {{ c.name }}::~{{ c.name }}() { {{ c.destructor.body }} }

{% for m in c.inherited_methods %}
{{ m.template }}
{{ m.return_type }} {{ c.name }}::{{ m.name }}({{ m.arg_string }}) {{ m.const }} {
        {{ m.body }}
 }
 {% endfor %}

{% for m in c.private_methods %}
{{ m.template }}
{{ m.return_type }} {{ c.name }}::{{ m.name }}({{ m.arg_string }}) {{ m.const }} {
        {{ m.body }}
 }
 {% endfor %}

namespace {
AccessorBuilder<{{ c.name }}> {{ c.camel_case_name }}Builder(AccessorType("{{ c.factory_name }}"));
}

} // namespace {{ c.nested_namespaces }}
