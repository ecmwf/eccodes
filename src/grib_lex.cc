#line 1 "gribl.cc"

#line 3 "gribl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define grib_yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define grib_yynoreturn __attribute__((__noreturn__))
#else
#define grib_yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (grib_yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((grib_yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE grib_yyrestart( grib_yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(grib_yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct grib_yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t grib_yy_size_t;
#endif

extern grib_yy_size_t grib_yyleng;

extern FILE *grib_yyin, *grib_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define grib_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up grib_yytext. */ \
        int grib_yyless_macro_arg = (n); \
        YY_LESS_LINENO(grib_yyless_macro_arg);\
		*grib_yy_cp = (grib_yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(grib_yy_c_buf_p) = grib_yy_cp = grib_yy_bp + grib_yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up grib_yytext again */ \
		} \
	while ( 0 )
#define unput(c) grib_yyunput( c, (grib_yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct grib_yy_buffer_state
	{
	FILE *grib_yy_input_file;

	char *grib_yy_ch_buf;		/* input buffer */
	char *grib_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int grib_yy_buf_size;

	/* Number of characters read into grib_yy_ch_buf, not including EOB
	 * characters.
	 */
	grib_yy_size_t grib_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int grib_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int grib_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int grib_yy_at_bol;

    int grib_yy_bs_lineno; /**< The line count. */
    int grib_yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int grib_yy_fill_buffer;

	int grib_yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via grib_yyrestart()), so that the user can continue scanning by
	 * just pointing grib_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t grib_yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t grib_yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * grib_yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (grib_yy_buffer_stack) \
                          ? (grib_yy_buffer_stack)[(grib_yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (grib_yy_buffer_stack)[(grib_yy_buffer_stack_top)]

/* grib_yy_hold_char holds the character lost when grib_yytext is formed. */
static char grib_yy_hold_char;
static grib_yy_size_t grib_yy_n_chars;		/* number of characters read into grib_yy_ch_buf */
grib_yy_size_t grib_yyleng;

/* Points to current character in buffer. */
static char *grib_yy_c_buf_p = NULL;
static int grib_yy_init = 0;		/* whether we need to initialize */
static int grib_yy_start = 0;	/* start state number */

/* Flag which is used to allow grib_yywrap()'s to do buffer switches
 * instead of setting up a fresh grib_yyin.  A bit of a hack ...
 */
static int grib_yy_did_buffer_switch_on_eof;

void grib_yyrestart ( FILE *input_file  );
void grib_yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE grib_yy_create_buffer ( FILE *file, int size  );
void grib_yy_delete_buffer ( YY_BUFFER_STATE b  );
void grib_yy_flush_buffer ( YY_BUFFER_STATE b  );
void grib_yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void grib_yypop_buffer_state ( void );

static void grib_yyensure_buffer_stack ( void );
static void grib_yy_load_buffer_state ( void );
static void grib_yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER grib_yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE grib_yy_scan_buffer ( char *base, grib_yy_size_t size  );
YY_BUFFER_STATE grib_yy_scan_string ( const char *grib_yy_str  );
YY_BUFFER_STATE grib_yy_scan_bytes ( const char *bytes, grib_yy_size_t len  );

void *grib_yyalloc ( grib_yy_size_t  );
void *grib_yyrealloc ( void *, grib_yy_size_t  );
void grib_yyfree ( void *  );

#define grib_yy_new_buffer grib_yy_create_buffer
#define grib_yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        grib_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->grib_yy_is_interactive = is_interactive; \
	}
#define grib_yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        grib_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->grib_yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->grib_yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *grib_yyin = NULL, *grib_yyout = NULL;

typedef int grib_yy_state_type;

extern int grib_yylineno;
int grib_yylineno = 1;

extern char *grib_yytext;
#ifdef grib_yytext_ptr
#undef grib_yytext_ptr
#endif
#define grib_yytext_ptr grib_yytext

static grib_yy_state_type grib_yy_get_previous_state ( void );
static grib_yy_state_type grib_yy_try_NUL_trans ( grib_yy_state_type current_state  );
static int grib_yy_get_next_buffer ( void );
static void grib_yynoreturn grib_yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up grib_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(grib_yytext_ptr) = grib_yy_bp; \
	grib_yyleng = (grib_yy_size_t) (grib_yy_cp - grib_yy_bp); \
	(grib_yy_hold_char) = *grib_yy_cp; \
	*grib_yy_cp = '\0'; \
	(grib_yy_c_buf_p) = grib_yy_cp;
#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct grib_yy_trans_info
	{
	flex_int32_t grib_yy_verify;
	flex_int32_t grib_yy_nxt;
	};
static const flex_int16_t grib_yy_accept[820] =
    {   0,
      137,  137,  141,  139,  137,  138,   13,  128,  136,  139,
      139,  139,  139,  131,    5,  139,    3,  130,  130,  130,
      129,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  139,   19,  137,    6,    0,   15,  132,  134,    0,
        0,  133,  131,  130,  130,    4,    7,    1,    2,    0,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,   24,  130,   10,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,   16,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   17,    0,    0,    0,    0,
        0,    0,  135,  133,    0,  130,  130,    0,    0,  130,
        0,  130,   25,  130,   14,  130,  130,  130,    8,  130,
       67,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   36,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  100,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   12,  130,  130,   53,  130,  130,  130,

      130,  130,  130,  114,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  135,    0,  134,    0,    0,    0,    0,    0,
      133,  130,  130,  130,  130,  130,  130,  113,   29,  130,
      117,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       90,  130,   26,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,   68,  130,  130,   31,  130,  130,  130,  130,
       49,  130,  130,  130,  130,  130,  130,   18,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  126,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  116,  130,  130,  130,  130,    0,    0,    0,
        0,    0,    0,  133,  130,  130,  130,   57,  130,   28,
      130,  130,   21,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,   45,  130,  130,  130,  130,   47,
      130,  130,  130,  130,  130,  102,  106,  110,  130,  130,
       11,  130,  130,   30,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   51,  130,  125,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   99,  130,

      130,   32,  123,    0,    0,    0,    0,  130,    0,    0,
      130,  124,   86,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   75,  130,  130,  130,  130,
       41,  130,   92,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,   22,  130,   46,  130,  130,   71,
      130,  130,  130,  130,    9,  130,  130,  130,  130,  130,
       76,   77,  130,  130,  130,   39,  130,  130,   20,  118,
      130,  130,  130,  130,  130,  101,  105,  109,  130,  130,
        0,    0,    0,    0,    0,  130,  130,   94,  130,  130,
      130,  120,  130,  130,  130,   97,  119,  130,  130,  130,

       69,  130,  130,  130,  130,  130,  130,  127,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,   55,
       66,   88,   91,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   35,  130,
      130,  130,   58,  130,    0,    0,  130,  130,  130,  130,
       60,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       37,  130,  130,  130,  130,  130,  130,  130,  130,   65,
      130,  130,  130,  130,  130,   96,  130,  130,   59,  130,
      130,  130,  130,  130,  130,   33,  130,  130,  130,  130,
      130,  130,   27,  130,   40,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,   38,  130,  130,  130,
      130,  130,  130,   84,  130,   63,   23,  130,   48,   50,
      130,   87,  130,  130,  130,  130,  130,  130,  130,  130,
       81,   61,  130,  130,  130,  130,  130,  130,   95,  130,
      130,  130,  130,  130,  130,  130,  122,  130,  130,  130,
       79,   78,   83,  130,  130,  130,  130,  130,  115,  130,
      130,  130,  130,   80,  130,  130,  130,  130,  130,  130,
      130,   43,   64,  130,  130,  130,  130,  130,  130,  130,
       70,  130,  130,  130,  130,  130,   42,   62,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,   56,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   52,  130,  130,  130,  130,  130,  130,
      130,   93,  130,  121,  130,  130,  130,  130,  130,  130,
      130,  130,   85,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   54,  130,
       34,  130,  130,  130,  130,  130,   89,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   44,  130,  130,
       73,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,   74,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  104,  108,  112,   82,  130,  130,  130,  130,  130,
      103,  107,  111,  130,   72,  130,  130,   98,    0
    } ;

static const YY_CHAR grib_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    1,
        1,    1,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   13,   18,   13,   19,   13,    1,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   24,   23,
       25,   23,   26,   23,   23,   23,   27,   28,   23,   23,
       23,   23,   29,   23,   23,   23,   23,   23,   23,   23,
        1,    1,    1,    1,   30,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   23,   41,   42,   43,   44,
       45,   46,   23,   47,   48,   49,   50,   51,   52,   53,
       54,   23,    1,   55,    1,   56,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR grib_yy_meta[57] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    6,    6,    6,    6,    6,    6,    1,
        7,    1,    8,    9,    8,    8,    8,    8,    8,    8,
        1,    8,    8,    8,    8,    9,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1,    1
    } ;

static const flex_int16_t grib_yy_base[850] =
    {   0,
        0,    0, 1988, 1989, 1985, 1989, 1965, 1989,   44, 1978,
       51,   58,    0,   69,   68, 1963, 1962,   81,   96,   76,
     1989,   75,   92,   94,  102,  109,   66,  119,  117,  128,
       55,  142,  105,  134,   78,  141,  104,  149,  155,  167,
      157, 1927, 1989, 1979, 1989,  199, 1989,  210,  135,  222,
      234,  170,  245,  257,  273, 1989, 1989, 1989, 1989, 1958,
     1969, 1952,   98,  132,  169,  196,  184,  231,  154,  240,
      242,  251,  254,  252,  268,  171,  122,  258,  267,  273,
      270,  207,  275,  283,  294,  279,  280,  281,  291,  290,
      294, 1951,  293,  305,  296,  308,  310,  297,  311,  312,

      313,  319,  314,  321,  324, 1950,  322,  334,  326,  327,
      345,  329,  206,  346,  347,  349,  350,  354,  342,  361,
      358,  355,  369,  366,  367, 1989,    0,  394,  399, 1954,
      401,  405,  418,  389,  405, 1964,  430,  442,  449,  459,
        0,  371, 1947,  453, 1946,  415,  390,  444, 1945,  455,
     1944,  456,  457,  458,  460,  463,  464,  467,  465,  470,
      469,  471,  474,  472,  477, 1943,  479,  412,  496,  481,
      483,  413,  488,  485,  490,  486,  511,  505,  506,  508,
      504,  510,  514,  515,  516,  517,  521,  522,  524,  527,
      533,  534,  535,  536,  537,  540,  546,  548,  547,  549,

      551,  550,  552,  555,  557,  560,  564,  566,  567,  568,
      571,  572,  574,  573,  577,  576,  579,  583,  580,  585,
      582,  619,  626,  633,  640,  647,  654,  665,  669,  667,
      677,  689, 1942,  661,  586,  671,  672, 1941, 1940,  593,
     1939,  674,  686,  687,  688,  689,  690,  691,  692,  695,
     1938,  699, 1937,  697,  700,  717,  718,  720,  706,  705,
      710,  716,  717,  708,  720,  737,  743,  747,  734,  735,
      737,  736,  751,  740,  741, 1936,  743,  745,  746,  748,
     1935,  750,  753,  749,  765,  766,  762, 1934,  757,  755,
      758,  770,  773,  775,  779,  780,  783,  785,  782, 1933,

      784,  786,  787,  790,  789,  788,  791,  795,  799,  828,
      808,  803, 1932,  802,  809, 1947,  842,  827,  851,  838,
        0,  862,  862,  869, 1946,  879,  873, 1929,  865, 1928,
      864,  876, 1927,  877,  878,  827,  879,  880,  881,  882,
      891,  884,  889,  892, 1926,  906,  909,  911,  896, 1925,
      902,  898,  905,  907,  909,  926,  929,  930,  925,  911,
     1924,  915,  933, 1923,  926,  927,  920,  936,  935,  932,
      937,  941,  942,  946,  945,  949,  954,  951, 1920,  953,
      957,  966,  955,  958,  969,  973,  980,  975,  970,  981,
      983,  978,  985,  986,  988, 1011, 1008, 1018, 1933,  990,

      993, 1916, 1911, 1021, 1029, 1037, 1024, 1041, 1053, 1062,
     1025, 1908, 1907, 1056, 1057,  999, 1036, 1058, 1061, 1062,
     1063, 1065, 1069, 1066, 1068, 1903, 1071, 1026, 1088, 1054,
     1902, 1074, 1897, 1075, 1080, 1082, 1099, 1100, 1101, 1087,
     1090, 1091, 1089, 1109, 1895, 1097, 1894, 1101, 1102, 1891,
     1104, 1105, 1106, 1109, 1890, 1111, 1113, 1118, 1121, 1114,
     1884, 1883, 1119, 1123, 1124, 1879, 1126, 1131, 1878, 1873,
     1128, 1143, 1130, 1145, 1139, 1157, 1163, 1164, 1150, 1152,
     1186, 1194, 1173, 1201, 1209,    0, 1216, 1871, 1154, 1210,
     1159, 1165, 1211, 1213, 1166, 1870, 1866, 1158, 1212, 1214,

     1864, 1232, 1231, 1233, 1219, 1220, 1222, 1863, 1237, 1239,
     1240, 1225, 1230, 1229, 1232, 1231, 1249, 1238, 1245, 1246,
     1860, 1859, 1854, 1248, 1249, 1255, 1256, 1257, 1260, 1262,
     1264, 1263, 1268, 1271, 1273, 1278, 1279, 1280, 1852, 1297,
     1298, 1300, 1851, 1286, 1312, 1331, 1292, 1315, 1285, 1289,
     1845, 1291, 1288, 1287, 1310, 1311, 1328, 1342, 1343, 1328,
     1843, 1329, 1346, 1347, 1348, 1336, 1337, 1339, 1340, 1842,
     1357, 1343, 1345, 1342, 1351, 1839, 1346, 1356, 1838, 1347,
     1358, 1363, 1348, 1360, 1366, 1368, 1373, 1376, 1380, 1397,
     1400, 1401, 1834, 1386, 1825, 1387, 1390, 1389, 1391, 1392,

     1393, 1396, 1411, 1413, 1414, 1399, 1824, 1417, 1418, 1421,
     1407, 1410, 1417, 1820, 1435, 1819, 1812, 1418, 1810, 1809,
     1420, 1805, 1421, 1422, 1426, 1429, 1436, 1443, 1446, 1447,
     1803, 1802, 1464, 1465, 1466, 1451, 1453, 1454, 1799, 1455,
     1456, 1457, 1460, 1474, 1475, 1487, 1798, 1482, 1488, 1490,
     1791, 1790, 1786, 1491, 1476, 1480, 1477, 1481, 1784, 1483,
     1482, 1484, 1486, 1783, 1501, 1507, 1509, 1501, 1503, 1502,
     1507, 1779, 1777, 1509, 1526, 1527, 1530, 1532, 1534, 1535,
     1786, 1520, 1521, 1523, 1522, 1538, 1769, 1765, 1528, 1542,
     1545, 1549, 1541, 1540, 1546, 1550, 1552, 1563, 1565, 1567,

     1569, 1570, 1572, 1764, 1568, 1557, 1555, 1580, 1571, 1586,
     1588, 1595, 1581, 1582, 1584, 1585, 1586, 1603, 1606, 1607,
     1608, 1610, 1611, 1763, 1601, 1604, 1618, 1609, 1622, 1623,
     1626, 1762, 1608, 1759, 1613, 1619, 1619, 1628, 1632, 1641,
     1645, 1648, 1750, 1634, 1652, 1635, 1655, 1657, 1658, 1637,
     1643, 1644, 1661, 1663, 1664, 1665, 1670, 1672, 1748, 1673,
     1747, 1674, 1677, 1678, 1672, 1669, 1746, 1680, 1687, 1691,
     1693, 1694, 1696, 1699, 1700, 1704, 1709, 1744, 1689, 1701,
     1441, 1707, 1713, 1717, 1718, 1719, 1714, 1720, 1721, 1706,
     1710, 1440, 1727, 1733, 1737, 1738, 1743, 1746, 1747, 1729,

     1752,  968,  839,  678,  618, 1748, 1749, 1753, 1738, 1756,
      443,  395,  235, 1742,  153, 1741, 1739,   81, 1989, 1790,
     1798, 1805, 1809, 1813, 1817, 1824, 1831, 1833, 1841, 1846,
     1847, 1855, 1860, 1864, 1866, 1873, 1881, 1885, 1892, 1897,
     1902, 1904, 1912, 1916, 1924, 1929, 1930, 1938, 1939
    } ;

static const flex_int16_t grib_yy_def[850] =
    {   0,
      819,    1,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  820,  821,  819,  819,  819,  822,  822,   19,
      819,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,  819,  819,  819,  819,  819,  819,  819,  823,  824,
      819,  825,  821,  826,  826,  819,  819,  819,  819,  819,
      827,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  827,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  819,  828,  829,  830,  831,
      832,  824,  819,  825,  833,  834,  826,  819,  819,  834,
      835,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,  827,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,  836,  819,  819,  819,  819,  819,  832,  837,  819,
      819,  838,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  827,  827,  827,   19,   19,
       19,   19,   19,   19,   19,  827,  827,  827,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  839,  836,  840,  819,  841,
      842,  843,  819,  819,  844,  838,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  827,  827,  827,   19,   19,
       19,   19,   19,   19,   19,  827,  827,  827,   19,   19,
       19,   19,  827,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  827,  827,  827,  827,   19,

       19,   19,   19,  845,  819,  841,  846,  847,  819,  819,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,  827,  827,  827,
       19,   19,   19,   19,   19,   19,  827,  827,  827,   19,
       19,   19,   19,  827,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  827,  827,  827,   19,   19,
      819,  819,  848,  819,  819,  849,  847,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,  827,  827,  827,   19,   19,   19,   19,  827,  827,
      827,   19,   19,   19,   19,   19,  827,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,  827,
      827,  827,   19,   19,  819,  819,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,  827,  827,  827,   19,
       19,   19,  827,  827,  827,   19,   19,   19,   19,   19,
      827,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,  827,
      827,  827,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,  827,  827,  827,   19,   19,  827,  827,  827,
       19,   19,   19,   19,  827,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,  827,  827,  827,   19,   19,   19,   19,   19,
       19,   19,   19,  827,  827,  827,   19,  827,  827,  827,
       19,   19,   19,  827,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  827,  827,  827,   19,   19,   19,
       19,   19,   19,   19,  827,  827,  827,  827,  827,  827,
      827,   19,   19,   19,   19,   19,   19,   19,   19,  827,
      827,  827,   19,   19,   19,   19,   19,  827,  827,  827,

      827,  827,  827,   19,   19,   19,   19,  827,   19,  827,
      827,  827,   19,   19,   19,   19,   19,  827,  827,  827,
      827,  827,  827,   19,   19,   19,  827,   19,  827,  827,
      827,   19,   19,   19,   19,   19,  827,  827,  827,  827,
      827,  827,   19,   19,  827,   19,  827,  827,  827,   19,
       19,   19,  827,  827,  827,  827,  827,  827,   19,  827,
       19,  827,  827,  827,   19,   19,   19,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,   19,   19,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,   19,
      827,  827,  827,  827,  827,  827,  827,  827,  827,   19,

      827,  827,  827,  827,  827,  827,  827,  827,   19,  827,
      827,  827,  827,   19,  827,   19,   19,   19,    0,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819
    } ;

static const flex_int16_t grib_yy_nxt[2046] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    8,   11,   11,
       12,   13,   14,   14,   14,   14,   14,   14,   14,   15,
       16,   17,   18,   18,   18,   18,   19,   18,   18,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       18,   41,   18,   18,   42,   43,   46,   46,   46,   46,
       46,   46,   46,   48,   48,   48,   48,   48,   48,   48,
       49,   49,   49,   49,   49,   49,   49,   51,   51,   52,
       62,   53,   53,   53,   53,   53,   53,   53,   56,   57,
       60,   62,   55,   61,   61,   61,   61,   61,   61,   61,

       62,   62,   96,   62,   55,   60,   62,   84,   61,   61,
       61,   61,   61,   61,   61,   64,   65,   62,   66,   62,
       67,   63,   68,   62,  106,   73,  142,   62,  107,   62,
       62,   69,   85,   70,   62,   74,   71,   76,   75,  111,
      101,   77,   62,   80,   62,   72,   78,   62,   88,  102,
       81,   79,   82,   62,   86,  161,   89,   62,  129,   62,
       90,   83,   60,   91,   92,   87,   62,   62,  143,  103,
      129,   93,  108,   97,   62,   94,   95,   98,  104,   62,
       62,   99,   62,  105,  112,  109,  100,  110,  113,  114,
      119,  115,   62,  135,   62,  124,   62,  116,  117,  120,

      118,  121,  149,  125,  127,  135,  122,  160,  144,   62,
      123,   46,   46,   46,   46,   46,   46,   46,   51,   51,
       52,   62,   48,   48,   48,   48,   48,   48,   48,  146,
      145,   62,   62,  128,  130,  130,  130,  130,  130,  130,
      130,  166,  131,  206,   60,  128,  133,  133,  133,  133,
      133,  133,  133,   51,   51,   52,   62,   53,   53,   53,
       53,   53,   53,   53,  147,   62,   60,   62,   55,  136,
      136,  136,  136,  136,  136,  136,   62,   62,  148,   62,
       55,  138,  139,   62,  150,  140,  140,  140,  140,  140,
      140,  140,   62,   62,  151,   62,  155,  153,   62,  152,

       62,  154,  156,   60,   62,   62,   62,  162,   62,  163,
      157,  158,  164,  159,  168,   62,   62,  165,   62,   62,
      167,   62,   62,  169,  171,  173,  176,  170,  172,  175,
       62,  180,  174,   62,  178,   62,   62,   62,   62,   62,
      183,  177,  182,  181,   62,  191,   62,   62,  179,   62,
      192,   62,   62,  190,   62,  185,  186,  196,  184,   62,
      188,  189,  203,  187,  193,  195,  199,   62,  197,  194,
       62,   62,   62,  198,   62,   62,  200,  204,  208,   62,
       62,  205,  210,   62,  212,  207,   62,  201,  202,  214,
      213,   62,   62,  211,   62,  209,   62,  215,  216,  233,

      217,  219,  138,  138,   60,  220,  221,  224,  224,  226,
      226,  227,  229,  230,  230,   62,  218,  130,  130,  130,
      130,  130,  130,  130,  229,  131,   51,   51,   52,  236,
      133,  133,  133,  133,  133,  133,  133,   62,   62,   60,
       62,  128,  136,  136,  136,  136,  136,  136,  136,  255,
      235,  261,   60,  128,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,   60,   62,
      141,  140,  140,  140,  140,  140,  140,  140,   62,  237,
       62,   62,   62,   62,  234,   62,  240,  238,   62,   62,
       62,  239,   62,  241,   62,   62,   62,   62,  243,   62,

      245,  248,   62,  250,   62,   60,   62,  242,   62,  244,
       62,   62,  253,   62,  246,   62,  259,  249,  247,  251,
      252,  263,  262,  254,  266,  264,  267,  265,  268,   62,
       62,   62,  260,   62,  256,   62,   62,  273,  257,   62,
       62,   62,   62,  258,  269,  274,   62,   62,  270,   62,
      271,  275,   62,  277,  272,  281,  279,  278,   62,   62,
       62,   62,   62,  276,  286,   62,  282,  284,  287,  280,
      285,   62,   62,   62,   62,   62,   62,   62,  288,  283,
       62,  295,   62,  293,  297,   62,  289,  291,  298,   62,
      292,   62,   62,   62,  290,  294,   62,   62,   62,   62,

      296,   62,   62,  299,   62,   62,  302,   62,   62,  300,
       62,   62,  301,  306,  309,  303,  308,  305,   62,  304,
      311,  307,  312,  313,  310,  332,  314,   60,   60,  329,
      315,  316,  316,  316,  316,  316,  316,  316,  223,  223,
      223,  223,  223,  223,  223,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  228,
      228,  228,  228,  228,  228,  228,  318,  318,  318,  318,
      318,  318,  318,  319,  319,  320,  321,  323,  323,  231,
      231,  231,  231,  231,  231,  231,   62,   60,  322,  231,
      231,  231,  231,  231,  231,  231,   62,   62,   60,   62,

      322,  325,  325,  325,  325,  325,  325,  325,  328,  333,
      330,   62,   62,   62,   62,   62,   62,   62,  331,  338,
       62,  340,   62,  336,   62,   62,   60,   60,  335,   60,
       62,   62,  344,   62,  334,   62,  341,  337,  342,  351,
      339,   62,   62,  343,  354,   62,   60,  345,  346,  349,
      350,  352,   60,  347,  356,  348,   60,  357,  353,   62,
       62,   62,   62,  358,  363,   62,   62,  362,   62,  355,
       62,   62,  366,   62,   62,   62,   62,  359,   62,  369,
       62,  364,   62,   62,  360,  361,  370,   62,  371,  365,
       62,   62,  368,  372,  367,   62,  373,  374,   62,  377,

       62,  375,  380,  376,   62,   62,  378,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,  386,  379,  383,
       62,  382,  385,  390,   62,  381,  384,   62,   62,  388,
      391,  392,  387,   62,   62,  389,  395,  402,  321,  393,
      401,  396,  394,  397,  403,  398,  399,  400,   60,  321,
      404,   60,   62,   62,  316,  316,  316,  316,  316,  316,
      316,  407,  404,  405,  405,  405,  405,  405,  405,  405,
      409,  409,  417,  407,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,   60,   62,
       62,  325,  325,  325,  325,  325,  325,  325,   62,  412,

      411,   62,   62,   62,   62,   62,   62,   62,  415,   62,
      418,  414,  413,  416,   62,   60,   62,   62,   60,  420,
       60,   62,  422,   62,  421,  419,  424,   62,  425,  423,
       62,  427,   62,  432,   62,   60,   62,  426,   60,   60,
       62,  433,   60,  436,  430,   62,  431,  428,  435,  434,
       62,   62,   62,  442,  440,  437,  429,   62,  438,  439,
       62,   62,   62,  443,  445,  447,   62,   62,  444,  448,
       62,   62,  449,  441,   62,  446,   62,   60,   62,   62,
       62,  453,   62,   62,  451,  450,  452,  454,  456,  457,
      459,   62,  461,  455,   62,   62,  458,  460,   62,  463,

       62,  462,  464,   62,  465,   62,   62,  466,   62,  467,
       62,   62,  468,   62,  471,   62,  469,   60,   62,  470,
       60,  479,  477,  475,   62,  474,  472,   60,  476,  481,
      481,  473,  484,  484,  478,   60,  480,  319,  319,  320,
      321,  405,  405,  405,  405,  405,  405,  405,  321,  488,
       62,  491,  322,  486,  486,  486,  486,  486,  486,  486,
      483,   62,  502,   60,  322,  410,  410,  410,  410,  410,
      410,  410,  483,  321,  410,  410,  410,  410,  410,  410,
      410,   62,   62,   62,  492,  489,   62,   62,   62,  490,
       62,   62,  494,   62,   62,  499,   62,   60,  495,   62,

       62,  493,  504,  496,  498,   62,  506,   62,   60,   60,
       60,  500,   62,  497,   62,   62,   62,  508,   60,  501,
      505,  512,   62,  515,  507,  514,   62,   62,  513,   62,
       62,   62,  519,  516,   62,  503,   62,  520,   62,   62,
      509,  510,  511,   62,   62,  525,   62,  523,   62,   62,
      518,   62,  521,   62,  524,   62,   62,  529,  522,  531,
      534,  517,  530,  526,   62,  528,   60,  527,   62,  537,
       62,  532,   60,   60,  533,   62,  535,   62,  536,   62,
      538,  545,  545,   62,   62,  539,  540,  544,  549,  554,
       62,   62,  541,  542,  550,  553,  547,  543,  482,  482,

      482,  482,  482,  482,  482,  321,  482,  482,  482,  482,
      482,  482,  482,  485,  485,  485,  485,  485,  485,  485,
      321,  485,  485,  485,  485,  485,  485,  485,  486,  486,
      486,  486,  486,  486,  486,   62,   62,   62,   62,   62,
       60,   60,   60,  556,   62,   62,   60,   62,   60,   60,
       62,  548,  552,  562,   62,   62,   62,   62,   60,  551,
      555,  557,  558,   62,  566,  560,  568,  569,  561,  567,
       62,   62,  559,   62,   62,  574,  563,  570,  564,  565,
       62,   62,   62,  572,  576,   62,  575,   62,   62,   62,
      577,  581,  573,   62,  571,  582,   62,  578,   62,  584,

      579,  580,  583,   62,   62,   62,   60,   60,  586,   60,
       62,   62,   62,   62,   62,  587,   62,   62,  596,  585,
      593,  599,  588,  589,  546,  546,  546,  546,  546,  546,
      546,  594,  597,  600,  598,   62,   62,   60,  590,  591,
       62,  592,  321,  546,  546,  546,  546,  546,  546,  546,
      595,   60,   60,   62,   62,   60,   60,   60,  602,  606,
      603,   62,   62,  601,   62,   62,   60,   62,   62,  611,
       62,   62,   62,   62,  613,  618,   62,  607,  616,  604,
      617,   62,  619,   62,  612,   62,  614,  605,   62,  620,
      626,   62,  627,   62,  608,  609,  610,  629,   62,  623,

      622,   62,  625,  624,  621,   62,   60,  615,  630,   60,
       60,   62,   62,  631,   62,   62,   62,   62,   62,  628,
       60,   62,   60,   60,   62,  641,   60,   60,  632,  640,
       60,  637,   62,  636,  638,   62,  633,  639,  642,  634,
      635,  643,   62,   62,   60,   62,   62,   62,  645,   60,
       60,   62,  647,  658,   62,  651,  657,  646,  652,  656,
      660,   62,  655,  653,  644,  648,  649,  659,   62,  650,
      654,   62,   62,   60,   60,   60,   62,  661,   62,   62,
       62,   62,   62,   60,   60,   62,  671,  669,  662,  663,
      670,   60,  673,  664,  672,  674,   60,   60,  668,   60,

       60,   62,   62,  677,  676,   62,   62,   62,   62,   62,
       60,   62,  665,  666,  667,  685,   60,  687,   60,  688,
      684,  682,  675,  678,  686,  683,   62,   62,   62,  679,
      689,  680,   62,  695,   62,   60,   60,  681,  694,   60,
      693,   60,  697,   60,   60,   62,   62,   62,   62,  690,
      696,   60,  708,   62,   60,  691,  707,  692,   60,  700,
      706,  698,  705,   62,  709,   62,   62,  701,  699,  702,
      703,   62,   60,  704,   60,   62,   60,   62,   60,   60,
       62,   60,   62,  710,  713,  715,  711,  716,  714,   60,
      712,  717,  718,   62,  726,   60,   62,   60,  721,  722,

      719,  723,  728,  724,   60,  725,   62,   62,  720,   62,
       62,   62,   60,  733,  727,   60,   60,   60,  732,   60,
       60,  729,  736,  730,  735,  734,   62,   60,   60,   62,
      731,   60,   60,   62,   62,   60,  737,   60,   62,  743,
      750,   60,  739,  740,   62,  741,  742,  744,  746,  738,
       60,  747,  748,  745,   60,  749,  751,   60,  752,   62,
       62,   60,   62,  753,   60,  754,   60,   60,   62,   62,
       60,  759,   60,   60,   60,  755,  761,  767,  765,   60,
      766,   60,   60,   60,  756,  760,   60,   60,  757,   60,
      762,  758,  763,  764,   62,  768,   60,   62,  779,  771,

       60,  770,   60,   60,  772,   60,  773,  778,   60,   60,
       60,  769,  774,   60,   62,  780,   60,  775,   60,   60,
      776,  777,   60,   60,  790,  781,   60,   60,   60,   60,
       60,   62,  783,  784,  787,  785,   60,  791,  788,  782,
      800,  786,   60,  789,  793,  792,   60,   60,  794,  795,
      796,  801,   60,  797,   62,   60,   60,   60,   60,  798,
      799,   60,   60,   62,   62,   60,   62,   62,  809,   62,
      802,   62,   62,   62,  806,   62,  803,  807,  808,  805,
      804,  816,  818,  810,   62,  817,  814,   62,   62,   62,
       62,  811,  812,  815,   62,   60,  813,   50,   50,   54,

       54,   54,   62,   54,   62,   54,   54,   62,   62,   62,
       62,   62,   62,   62,   49,   62,   62,   49,  132,  132,
      132,  132,  134,   62,   62,  134,  137,   62,   62,  137,
       62,  137,  137,   61,   62,   62,   61,   62,   61,   61,
      222,  222,  223,  223,   62,   62,  223,  225,  225,   62,
       62,  225,  130,  130,  130,  130,  228,  228,  228,   62,
      228,  231,  231,   62,   62,  231,  136,   62,   62,  136,
       62,  136,  136,  232,  232,  317,   62,   62,  317,   62,
      317,  317,  324,  324,   62,   62,  324,  326,   62,   62,
      326,   62,  326,  326,  316,   62,   62,  316,   62,  316,

      316,  318,  318,   62,   62,  318,  406,  406,   62,   62,
      406,  408,  408,  410,  410,   62,   62,  410,  325,   62,
       62,  325,   62,  325,  325,  482,  482,   62,   62,  482,
      485,  485,   62,   62,  485,  487,   62,  487,  487,  546,
      546,   62,   60,  546,  486,   62,  486,  486,   62,   62,
       62,   62,   62,   62,   62,   60,   60,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,  327,   62,   62,
       62,   62,   62,   60,  131,   62,   62,   62,   60,  141,
       44,  126,   59,   58,   47,   45,   44,  819,    3,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819
    } ;

static const flex_int16_t grib_yy_chk[2046] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,    9,    9,    9,
        9,    9,    9,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   12,   12,   14,   14,   14,
       31,   14,   14,   14,   14,   14,   14,   14,   15,   15,
       18,   27,   14,   18,   18,   18,   18,   18,   18,   18,

       22,   20,   31,   35,   14,   19,  818,   27,   19,   19,
       19,   19,   19,   19,   19,   20,   22,   23,   22,   24,
       22,   19,   22,   63,   35,   24,   63,   25,   35,   37,
       33,   23,   28,   23,   26,   24,   23,   25,   24,   37,
       33,   25,   29,   26,   28,   23,   25,   77,   29,   33,
       26,   25,   26,   30,   28,   77,   29,   64,   49,   34,
       30,   26,  815,   30,   30,   28,   36,   32,   64,   34,
       49,   30,   36,   32,   38,   30,   30,   32,   34,   69,
       39,   32,   41,   34,   38,   36,   32,   36,   38,   38,
       39,   38,   40,   52,   65,   41,   76,   38,   38,   39,

       38,   39,   69,   41,   46,   52,   40,   76,   65,   67,
       40,   46,   46,   46,   46,   46,   46,   46,   48,   48,
       48,   66,   48,   48,   48,   48,   48,   48,   48,   67,
       66,  113,   82,   48,   50,   50,   50,   50,   50,   50,
       50,   82,   50,  113,  813,   48,   51,   51,   51,   51,
       51,   51,   51,   53,   53,   53,   68,   53,   53,   53,
       53,   53,   53,   53,   68,   70,   54,   71,   53,   54,
       54,   54,   54,   54,   54,   54,   72,   74,   68,   73,
       53,   55,   55,   78,   70,   55,   55,   55,   55,   55,
       55,   55,   79,   75,   71,   81,   74,   73,   80,   72,

       83,   73,   75,   85,   86,   87,   88,   78,   84,   79,
       75,   75,   80,   75,   84,   90,   89,   81,   93,   91,
       83,   95,   98,   85,   87,   89,   93,   86,   88,   91,
       94,   95,   90,   96,   94,   97,   99,  100,  101,  103,
       98,   93,   97,   96,  102,  103,  104,  107,   94,  105,
      104,  109,  110,  102,  112,  100,  100,  107,   99,  108,
      101,  101,  112,  100,  104,  105,  110,  119,  108,  104,
      111,  114,  115,  109,  116,  117,  111,  112,  115,  118,
      122,  112,  117,  121,  119,  114,  120,  111,  111,  121,
      120,  124,  125,  118,  123,  116,  142,  121,  122,  142,

      123,  124,  128,  128,  812,  124,  125,  129,  129,  131,
      131,  131,  134,  135,  135,  147,  123,  132,  132,  132,
      132,  132,  132,  132,  134,  132,  133,  133,  133,  147,
      133,  133,  133,  133,  133,  133,  133,  168,  172,  137,
      146,  133,  137,  137,  137,  137,  137,  137,  137,  168,
      146,  172,  811,  133,  138,  138,  138,  138,  138,  138,
      138,  139,  139,  139,  139,  139,  139,  139,  140,  148,
      139,  140,  140,  140,  140,  140,  140,  140,  144,  148,
      150,  152,  153,  154,  144,  155,  153,  150,  156,  157,
      159,  152,  158,  154,  161,  160,  162,  164,  156,  163,

      158,  160,  165,  162,  167,  169,  170,  155,  171,  157,
      174,  176,  165,  173,  158,  175,  170,  161,  159,  163,
      164,  174,  173,  167,  177,  175,  177,  176,  177,  181,
      178,  179,  171,  180,  169,  182,  177,  181,  169,  183,
      184,  185,  186,  169,  178,  182,  187,  188,  178,  189,
      179,  183,  190,  185,  180,  189,  187,  186,  191,  192,
      193,  194,  195,  184,  193,  196,  190,  192,  194,  188,
      192,  197,  199,  198,  200,  202,  201,  203,  195,  191,
      204,  202,  205,  200,  204,  206,  196,  198,  205,  207,
      199,  208,  209,  210,  197,  201,  211,  212,  214,  213,

      203,  216,  215,  206,  217,  219,  209,  221,  218,  207,
      220,  235,  208,  213,  215,  210,  214,  212,  240,  211,
      217,  213,  218,  219,  216,  240,  220,  805,  222,  235,
      221,  222,  222,  222,  222,  222,  222,  222,  223,  223,
      223,  223,  223,  223,  223,  224,  224,  224,  224,  224,
      224,  224,  225,  225,  225,  225,  225,  225,  225,  226,
      226,  226,  226,  226,  226,  226,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228,  228,  229,  229,  230,
      230,  230,  230,  230,  230,  230,  234,  804,  228,  231,
      231,  231,  231,  231,  231,  231,  236,  237,  232,  242,

      228,  232,  232,  232,  232,  232,  232,  232,  234,  242,
      236,  243,  244,  245,  246,  247,  248,  249,  237,  247,
      250,  249,  254,  245,  252,  255,  256,  257,  244,  258,
      260,  259,  255,  264,  243,  261,  250,  246,  252,  261,
      248,  262,  263,  254,  264,  265,  266,  255,  256,  259,
      260,  262,  267,  257,  266,  258,  268,  267,  263,  269,
      270,  272,  271,  268,  273,  274,  275,  272,  277,  265,
      278,  279,  277,  280,  284,  282,  273,  269,  283,  280,
      290,  274,  289,  291,  270,  271,  282,  287,  283,  275,
      285,  286,  279,  284,  278,  292,  285,  286,  293,  290,

      294,  287,  293,  289,  295,  296,  291,  299,  297,  301,
      298,  302,  303,  306,  305,  304,  307,  299,  292,  296,
      308,  295,  298,  304,  309,  294,  297,  314,  312,  302,
      305,  306,  301,  311,  315,  303,  309,  314,  318,  307,
      312,  310,  308,  310,  315,  310,  310,  311,  803,  320,
      318,  317,  336,  310,  317,  317,  317,  317,  317,  317,
      317,  320,  318,  319,  319,  319,  319,  319,  319,  319,
      322,  322,  336,  320,  323,  323,  323,  323,  323,  323,
      323,  324,  324,  324,  324,  324,  324,  324,  326,  331,
      329,  326,  326,  326,  326,  326,  326,  326,  327,  329,

      327,  332,  334,  335,  337,  338,  339,  340,  334,  342,
      337,  332,  331,  335,  343,  346,  341,  344,  347,  338,
      348,  349,  339,  352,  338,  337,  341,  351,  342,  340,
      353,  344,  354,  351,  355,  356,  360,  343,  357,  358,
      362,  352,  363,  355,  348,  367,  349,  346,  354,  353,
      359,  365,  366,  360,  359,  356,  347,  370,  357,  358,
      369,  368,  371,  362,  365,  367,  372,  373,  363,  368,
      375,  374,  369,  359,  376,  366,  378,  802,  380,  377,
      383,  373,  381,  384,  371,  370,  372,  374,  376,  377,
      378,  382,  381,  375,  385,  389,  377,  380,  386,  383,

      388,  382,  384,  392,  385,  387,  390,  386,  391,  387,
      393,  394,  388,  395,  391,  400,  389,  397,  401,  390,
      396,  400,  397,  395,  416,  394,  392,  398,  396,  404,
      404,  393,  407,  407,  398,  428,  401,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  406,  411,
      411,  416,  405,  408,  408,  408,  408,  408,  408,  408,
      406,  417,  428,  430,  405,  409,  409,  409,  409,  409,
      409,  409,  406,  410,  410,  410,  410,  410,  410,  410,
      410,  414,  415,  418,  417,  414,  419,  420,  421,  415,
      422,  424,  419,  425,  423,  424,  427,  429,  420,  432,

      434,  418,  430,  421,  423,  435,  434,  436,  437,  438,
      439,  425,  440,  422,  443,  441,  442,  436,  444,  427,
      432,  440,  446,  442,  435,  441,  448,  449,  440,  451,
      452,  453,  448,  443,  454,  429,  456,  449,  457,  460,
      437,  438,  439,  458,  463,  456,  459,  453,  464,  465,
      446,  467,  451,  471,  454,  473,  468,  460,  452,  464,
      468,  444,  463,  457,  475,  459,  476,  458,  472,  473,
      474,  465,  477,  478,  467,  479,  471,  480,  472,  489,
      474,  483,  483,  498,  491,  475,  476,  480,  491,  498,
      492,  495,  477,  478,  492,  495,  489,  479,  481,  481,

      481,  481,  481,  481,  481,  482,  482,  482,  482,  482,
      482,  482,  482,  484,  484,  484,  484,  484,  484,  484,
      485,  485,  485,  485,  485,  485,  485,  485,  487,  487,
      487,  487,  487,  487,  487,  490,  493,  499,  494,  500,
      503,  502,  504,  500,  505,  506,  509,  507,  510,  511,
      512,  490,  494,  507,  514,  513,  516,  515,  517,  493,
      499,  502,  503,  518,  512,  505,  514,  515,  506,  513,
      519,  520,  504,  524,  525,  520,  509,  516,  510,  511,
      526,  527,  528,  518,  525,  529,  524,  530,  532,  531,
      526,  530,  519,  533,  517,  531,  534,  527,  535,  533,

      528,  529,  532,  536,  537,  538,  540,  541,  535,  542,
      549,  544,  554,  553,  550,  536,  552,  547,  549,  534,
      544,  553,  537,  538,  545,  545,  545,  545,  545,  545,
      545,  547,  550,  554,  552,  555,  556,  557,  540,  541,
      548,  542,  546,  546,  546,  546,  546,  546,  546,  546,
      548,  558,  559,  560,  562,  563,  564,  565,  556,  560,
      557,  566,  567,  555,  568,  569,  571,  574,  572,  566,
      573,  577,  580,  583,  568,  574,  575,  562,  572,  558,
      573,  578,  575,  581,  567,  584,  569,  559,  582,  577,
      583,  585,  584,  586,  563,  564,  565,  586,  587,  581,

      580,  588,  582,  581,  578,  589,  590,  571,  587,  591,
      592,  594,  596,  588,  598,  597,  599,  600,  601,  585,
      603,  602,  604,  605,  606,  600,  608,  609,  589,  599,
      610,  596,  611,  594,  597,  612,  590,  598,  601,  591,
      592,  602,  613,  618,  615,  621,  623,  624,  604,  792,
      781,  625,  606,  624,  626,  611,  623,  605,  612,  621,
      626,  627,  618,  613,  603,  608,  609,  625,  628,  610,
      615,  629,  630,  633,  634,  635,  636,  627,  637,  638,
      640,  641,  642,  644,  645,  643,  640,  637,  628,  629,
      638,  648,  642,  630,  641,  643,  646,  649,  636,  650,

      654,  655,  657,  646,  645,  656,  658,  661,  660,  662,
      665,  663,  633,  634,  635,  658,  666,  661,  667,  662,
      657,  655,  644,  648,  660,  656,  668,  670,  669,  649,
      663,  650,  671,  670,  674,  675,  676,  654,  669,  677,
      668,  678,  674,  679,  680,  682,  683,  685,  684,  665,
      671,  690,  686,  689,  691,  666,  685,  667,  692,  677,
      684,  675,  683,  686,  689,  694,  693,  678,  676,  679,
      680,  695,  698,  682,  699,  696,  700,  697,  701,  702,
      707,  703,  706,  690,  693,  695,  691,  696,  694,  708,
      692,  697,  698,  705,  707,  710,  709,  711,  701,  702,

      699,  703,  709,  705,  712,  706,  713,  714,  700,  715,
      716,  717,  718,  714,  708,  719,  720,  721,  713,  722,
      723,  710,  717,  711,  716,  715,  725,  727,  737,  726,
      712,  729,  730,  733,  728,  731,  718,  738,  735,  725,
      733,  739,  720,  721,  736,  722,  723,  726,  728,  719,
      740,  729,  730,  727,  741,  731,  735,  742,  736,  744,
      746,  745,  750,  737,  747,  738,  748,  749,  751,  752,
      753,  744,  754,  755,  756,  739,  746,  752,  750,  757,
      751,  758,  760,  762,  740,  745,  763,  764,  741,  768,
      747,  742,  748,  749,  766,  753,  769,  765,  766,  756,

      770,  755,  771,  772,  757,  773,  758,  765,  774,  775,
      780,  754,  760,  776,  779,  768,  782,  762,  777,  791,
      763,  764,  783,  787,  779,  769,  784,  785,  786,  788,
      789,  790,  771,  772,  775,  773,  793,  780,  776,  770,
      790,  774,  794,  777,  783,  782,  795,  796,  784,  785,
      786,  791,  797,  787,  800,  798,  799,  806,  807,  788,
      789,  801,  808,  809,  817,  810,  816,  814,  800,  778,
      793,  767,  761,  759,  797,  743,  794,  798,  799,  796,
      795,  814,  817,  801,  734,  816,  809,  732,  724,  704,
      688,  806,  807,  810,  687,  681,  808,  820,  820,  821,

      821,  821,  673,  821,  672,  821,  821,  822,  664,  659,
      822,  653,  822,  822,  823,  652,  651,  823,  824,  824,
      824,  824,  825,  647,  639,  825,  826,  632,  631,  826,
      622,  826,  826,  827,  620,  619,  827,  617,  827,  827,
      828,  828,  829,  829,  616,  614,  829,  830,  830,  607,
      595,  830,  831,  831,  831,  831,  832,  832,  832,  593,
      832,  833,  833,  579,  576,  833,  834,  570,  561,  834,
      551,  834,  834,  835,  835,  836,  543,  539,  836,  523,
      836,  836,  837,  837,  522,  521,  837,  838,  508,  501,
      838,  497,  838,  838,  839,  496,  488,  839,  470,  839,

      839,  840,  840,  469,  466,  840,  841,  841,  462,  461,
      841,  842,  842,  843,  843,  455,  450,  843,  844,  447,
      445,  844,  433,  844,  844,  845,  845,  431,  426,  845,
      846,  846,  413,  412,  846,  847,  403,  847,  847,  848,
      848,  402,  399,  848,  849,  379,  849,  849,  364,  361,
      350,  345,  333,  330,  328,  325,  316,  313,  300,  288,
      281,  276,  253,  251,  241,  239,  238,  233,  166,  151,
      149,  145,  143,  136,  130,  106,   92,   62,   61,   60,
       44,   42,   17,   16,   10,    7,    5,    3,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819
    } ;

static grib_yy_state_type grib_yy_last_accepting_state;
static char *grib_yy_last_accepting_cpos;

extern int grib_yy_flex_debug;
int grib_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define grib_yymore() grib_yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *grib_yytext;
#line 1 "gribl.l"
/*
 * (C) Copyright 2005- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
 * virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
 */
#line 13 "gribl.l"
#include "grib_api_internal.h"
#include "grib_yacc.h"
#include <ctype.h>

extern int grib_yylineno;

/* Keep -Wall quiet */


/*

This is needed for implementing "include", otherwise
flex buffer optimization break the includes.

*/

#define YY_INPUT(buf,result,max_size) \
        { \
        int c = getc(grib_yyin); (void)max_size; \
        result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
        }


/*
#ifdef __GNUC__
#ifdef FLEX_SCANNER
void grib_yyunput (int c,char *buf_ptr  );
void _grib_ignore_grib_yyunput_unused_error() { grib_yyunput(0,0); }
#endif
#endif
*/

#ifdef __cplusplus
 #define GET_INPUT grib_yyinput
#else
 #define GET_INPUT input
#endif

#line 1216 "gribl.cc"
#line 1217 "gribl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int grib_yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int grib_yylex_destroy ( void );

int grib_yyget_debug ( void );

void grib_yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE grib_yyget_extra ( void );

void grib_yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *grib_yyget_in ( void );

void grib_yyset_in  ( FILE * _in_str  );

FILE *grib_yyget_out ( void );

void grib_yyset_out  ( FILE * _out_str  );

			grib_yy_size_t grib_yyget_leng ( void );

char *grib_yyget_text ( void );

int grib_yyget_lineno ( void );

void grib_yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int grib_yywrap ( void );
#else
extern int grib_yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    void grib_yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef grib_yytext_ptr
static void grib_yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int grib_yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int grib_yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( grib_yytext, (size_t) grib_yyleng, 1, grib_yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_is_interactive ) \
		{ \
		int c = '*'; \
		grib_yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( grib_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( grib_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (grib_yy_size_t) max_size, grib_yyin)) == 0 && ferror(grib_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(grib_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "grib_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef grib_yyterminate
#define grib_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) grib_yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int grib_yylex (void);

#define YY_DECL int grib_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after grib_yytext and grib_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	grib_yy_state_type grib_yy_current_state;
	char *grib_yy_cp, *grib_yy_bp;
	int grib_yy_act;
    
	if ( !(grib_yy_init) )
		{
		(grib_yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (grib_yy_start) )
			(grib_yy_start) = 1;	/* first start state */

		if ( ! grib_yyin )
			grib_yyin = stdin;

		if ( ! grib_yyout )
			grib_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			grib_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE );
		}

		grib_yy_load_buffer_state(  );
		}

	{
#line 71 "gribl.l"



#line 1438 "gribl.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		grib_yy_cp = (grib_yy_c_buf_p);

		/* Support of grib_yytext. */
		*grib_yy_cp = (grib_yy_hold_char);

		/* grib_yy_bp points to the position in grib_yy_ch_buf of the start of
		 * the current run.
		 */
		grib_yy_bp = grib_yy_cp;

		grib_yy_current_state = (grib_yy_start);
grib_yy_match:
		do
			{
			YY_CHAR grib_yy_c = grib_yy_ec[YY_SC_TO_UI(*grib_yy_cp)] ;
			if ( grib_yy_accept[grib_yy_current_state] )
				{
				(grib_yy_last_accepting_state) = grib_yy_current_state;
				(grib_yy_last_accepting_cpos) = grib_yy_cp;
				}
			while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
				{
				grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
				if ( grib_yy_current_state >= 820 )
					grib_yy_c = grib_yy_meta[grib_yy_c];
				}
			grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
			++grib_yy_cp;
			}
		while ( grib_yy_base[grib_yy_current_state] != 1989 );

grib_yy_find_action:
		grib_yy_act = grib_yy_accept[grib_yy_current_state];
		if ( grib_yy_act == 0 )
			{ /* have to back up */
			grib_yy_cp = (grib_yy_last_accepting_cpos);
			grib_yy_current_state = (grib_yy_last_accepting_state);
			grib_yy_act = grib_yy_accept[grib_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( grib_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*grib_yy_cp = (grib_yy_hold_char);
			grib_yy_cp = (grib_yy_last_accepting_cpos);
			grib_yy_current_state = (grib_yy_last_accepting_state);
			goto grib_yy_find_action;

case 1:
YY_RULE_SETUP
#line 74 "gribl.l"
return EQ     ;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 75 "gribl.l"
return GE     ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 76 "gribl.l"
return GT     ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 77 "gribl.l"
return LE     ;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "gribl.l"
return LT     ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "gribl.l"
return NE     ;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "gribl.l"
return NE     ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "gribl.l"
return BIT    ;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 82 "gribl.l"
return BITOFF ;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "gribl.l"
return IS   ;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "gribl.l"
return ISNOT ;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 86 "gribl.l"
return NOT   ;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "gribl.l"
return NOT   ;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "gribl.l"
return AND   ;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "gribl.l"
return AND   ;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 90 "gribl.l"
return OR   ;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 91 "gribl.l"
return OR   ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "gribl.l"
return NIL   ;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "gribl.l"
return DUMMY   ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 96 "gribl.l"
return SUBSTR   ;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 97 "gribl.l"
return CLOSE   ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 98 "gribl.l"
return LENGTH   ;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 99 "gribl.l"
return LOWERCASE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 100 "gribl.l"
return IF       ;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 101 "gribl.l"
return IF_TRANSIENT ;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 102 "gribl.l"
return ELSE       ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 103 "gribl.l"
return UNSIGNED ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 104 "gribl.l"
return ASCII    ;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 105 "gribl.l"
return BYTE    ;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 106 "gribl.l"
return LABEL    ;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 107 "gribl.l"
return LIST     ;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 108 "gribl.l"
return WHILE     ;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 109 "gribl.l"
return TEMPLATE ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 110 "gribl.l"
return TEMPLATE_NOFAIL ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 111 "gribl.l"
return TRIGGER ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 112 "gribl.l"
return END      ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 113 "gribl.l"
return IBMFLOAT ;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 114 "gribl.l"
return FLOAT ;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 115 "gribl.l"
return SIGNED   ;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 116 "gribl.l"
return CODETABLE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 117 "gribl.l"
return GETENV;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 118 "gribl.l"
return SMART_TABLE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 119 "gribl.l"
return DICTIONARY;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 120 "gribl.l"
return CODETABLE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 121 "gribl.l"
return FLAG     ;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 122 "gribl.l"
return LOOKUP   ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "gribl.l"
return GROUP  ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "gribl.l"
return NON_ALPHA   ;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "gribl.l"
return META     ;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 126 "gribl.l"
return PADTOEVEN    ;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "gribl.l"
return PADTO    ;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "gribl.l"
return PADTOMULTIPLE    ;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "gribl.l"
return PAD      ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "gribl.l"
return SECTION_PADDING      ;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 131 "gribl.l"
return MESSAGE      ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 132 "gribl.l"
return MESSAGE_COPY      ;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "gribl.l"
return ALIAS    ;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "gribl.l"
return UNALIAS    ;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "gribl.l"
return POS      ;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "gribl.l"
return INTCONST ;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "gribl.l"
return TRANS    ;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "gribl.l"
return STRING_TYPE   ;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 139 "gribl.l"
return LONG_TYPE   ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "gribl.l"
return DOUBLE_TYPE   ;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 141 "gribl.l"
return ITERATOR ;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "gribl.l"
return NEAREST ;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "gribl.l"
return BOX ;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "gribl.l"
return KSEC    ;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 145 "gribl.l"
return FLAGBIT    ;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 146 "gribl.l"
return KSEC1EXPVER    ;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 147 "gribl.l"
return MODIFY    ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "gribl.l"
return G1_HALF_BYTE    ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "gribl.l"
return G1_MESSAGE_LENGTH    ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 151 "gribl.l"
return G1_SECTION4_LENGTH    ;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 153 "gribl.l"
return EXPORT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "gribl.l"
return REMOVE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 155 "gribl.l"
return RENAME;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 156 "gribl.l"
return IS_IN_LIST;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 157 "gribl.l"
return IS_IN_DICT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 158 "gribl.l"
return TO_INTEGER;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 159 "gribl.l"
return TO_STRING;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 160 "gribl.l"
return SEX2DEC;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 161 "gribl.l"
return IS_INTEGER;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 162 "gribl.l"
return IS_INTEGER;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 164 "gribl.l"
return SECTION_LENGTH     ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 166 "gribl.l"
return ASSERT    ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 168 "gribl.l"
return READ_ONLY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 169 "gribl.l"
return NO_COPY;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 170 "gribl.l"
return EDITION_SPECIFIC;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 171 "gribl.l"
return DUMP;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 172 "gribl.l"
return NO_FAIL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 173 "gribl.l"
return HIDDEN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 174 "gribl.l"
return CAN_BE_MISSING;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 175 "gribl.l"
return MISSING;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 176 "gribl.l"
return CONSTRAINT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 177 "gribl.l"
return OVERRIDE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 178 "gribl.l"
return COPY_OK;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 179 "gribl.l"
return COPY_IF_CHANGING_EDITION;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 181 "gribl.l"
return UINT8;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 182 "gribl.l"
return INT8;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 184 "gribl.l"
return UINT16;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 185 "gribl.l"
return INT16;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 186 "gribl.l"
return UINT16_LITTLE_ENDIAN;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 187 "gribl.l"
return INT16_LITTLE_ENDIAN;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 189 "gribl.l"
return UINT32;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 190 "gribl.l"
return INT32;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 191 "gribl.l"
return UINT32_LITTLE_ENDIAN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 192 "gribl.l"
return INT32_LITTLE_ENDIAN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 194 "gribl.l"
return UINT64;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 195 "gribl.l"
return INT64;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 196 "gribl.l"
return UINT64_LITTLE_ENDIAN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 197 "gribl.l"
return INT64_LITTLE_ENDIAN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 199 "gribl.l"
return BLOB;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 201 "gribl.l"
return SET;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 202 "gribl.l"
return SET_NOFAIL;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 203 "gribl.l"
return WHEN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 204 "gribl.l"
return CASE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 205 "gribl.l"
return SWITCH;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 206 "gribl.l"
return DEFAULT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 207 "gribl.l"
return CONCEPT;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 208 "gribl.l"
return CONCEPT_NOFAIL;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 209 "gribl.l"
return HASH_ARRAY;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 210 "gribl.l"
return WRITE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 211 "gribl.l"
return APPEND;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 212 "gribl.l"
return PRINT;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 213 "gribl.l"
return SKIP;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 215 "gribl.l"
{
          int c,q;
          while((c = GET_INPUT()) && isspace(c) && c != '\n') ;
          q = c; /* the quote */

          grib_yyleng = 0;
          while((c = GET_INPUT()) && c != q && c != '\n')
                {
                    if(c == '\\') grib_yytext[grib_yyleng++] = GET_INPUT();
                    else grib_yytext[grib_yyleng++] =  c;
                }

                grib_yytext[grib_yyleng++] = 0;

          grib_parser_include(grib_yytext);
         }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "gribl.l"
{
           int c,q = grib_yytext[0];

           grib_yyleng = 0;

           while((c = GET_INPUT()) && c != q )
           {
               if(c == '\\') grib_yytext[grib_yyleng++] = GET_INPUT();
               else {
									 grib_yytext[grib_yyleng++] =  c;
									 if (c =='\n') grib_yylineno++;
							 }
            }

            grib_yytext[grib_yyleng++] = 0;
            grib_yylval.str = strdup(grib_yytext);
            return STRING;
        }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 251 "gribl.l"
{
           int c;
           unsigned long val = 0;

           while((c = GET_INPUT()) && c != '`' && c != '\n')
           {
                val <<= 8;
                val |= c;
           }
           grib_yylval.lval = val;
           return INTEGER;
        }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 265 "gribl.l"
{ grib_yylval.str = strdup(grib_yytext); return IDENT; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 266 "gribl.l"
{ grib_yylval.lval = atol((const char *)grib_yytext); return INTEGER; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 267 "gribl.l"
{ grib_yylval.lval = atol((const char *)grib_yytext); return INTEGER; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 268 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 269 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 270 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 273 "gribl.l"
{
           int c;
           while((c = GET_INPUT()) && (c != '\n')){}

        grib_yylineno++;
        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 279 "gribl.l"
;
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 280 "gribl.l"
grib_yylineno++;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 284 "gribl.l"
return *grib_yytext;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 286 "gribl.l"
ECHO;
	YY_BREAK
#line 2244 "gribl.cc"
case YY_STATE_EOF(INITIAL):
	grib_yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int grib_yy_amount_of_matched_text = (int) (grib_yy_cp - (grib_yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*grib_yy_cp = (grib_yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed grib_yyin at a new source and called
			 * grib_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(grib_yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_input_file = grib_yyin;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for grib_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since grib_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (grib_yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] )
			{ /* This was really a NUL. */
			grib_yy_state_type grib_yy_next_state;

			(grib_yy_c_buf_p) = (grib_yytext_ptr) + grib_yy_amount_of_matched_text;

			grib_yy_current_state = grib_yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * grib_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			grib_yy_next_state = grib_yy_try_NUL_trans( grib_yy_current_state );

			grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;

			if ( grib_yy_next_state )
				{
				/* Consume the NUL. */
				grib_yy_cp = ++(grib_yy_c_buf_p);
				grib_yy_current_state = grib_yy_next_state;
				goto grib_yy_match;
				}

			else
				{
				grib_yy_cp = (grib_yy_c_buf_p);
				goto grib_yy_find_action;
				}
			}

		else switch ( grib_yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(grib_yy_did_buffer_switch_on_eof) = 0;

				if ( grib_yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * grib_yy_get_next_buffer() to have set up
					 * grib_yytext, we can now set up
					 * grib_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(grib_yy_c_buf_p) = (grib_yytext_ptr) + YY_MORE_ADJ;

					grib_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (grib_yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(grib_yy_c_buf_p) =
					(grib_yytext_ptr) + grib_yy_amount_of_matched_text;

				grib_yy_current_state = grib_yy_get_previous_state(  );

				grib_yy_cp = (grib_yy_c_buf_p);
				grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;
				goto grib_yy_match;

			case EOB_ACT_LAST_MATCH:
				(grib_yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)];

				grib_yy_current_state = grib_yy_get_previous_state(  );

				grib_yy_cp = (grib_yy_c_buf_p);
				grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;
				goto grib_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of grib_yylex */

/* grib_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int grib_yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf;
	char *source = (grib_yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (grib_yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (grib_yy_c_buf_p) - (grib_yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((grib_yy_c_buf_p) - (grib_yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars) = 0;

	else
		{
			grib_yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int grib_yy_c_buf_p_offset =
				(int) ((grib_yy_c_buf_p) - b->grib_yy_ch_buf);

			if ( b->grib_yy_is_our_buffer )
				{
				grib_yy_size_t new_size = b->grib_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->grib_yy_buf_size += b->grib_yy_buf_size / 8;
				else
					b->grib_yy_buf_size *= 2;

				b->grib_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					grib_yyrealloc( (void *) b->grib_yy_ch_buf,
							 (grib_yy_size_t) (b->grib_yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->grib_yy_ch_buf = NULL;

			if ( ! b->grib_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(grib_yy_c_buf_p) = &b->grib_yy_ch_buf[grib_yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[number_to_move]),
			(grib_yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	if ( (grib_yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			grib_yyrestart( grib_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((grib_yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		grib_yy_size_t new_size = (grib_yy_n_chars) + number_to_move + ((grib_yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf = (char *) grib_yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf, (grib_yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size = (int) (new_size - 2);
	}

	(grib_yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(grib_yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[0];

	return ret_val;
}

/* grib_yy_get_previous_state - get the state just before the EOB char was reached */

    static grib_yy_state_type grib_yy_get_previous_state (void)
{
	grib_yy_state_type grib_yy_current_state;
	char *grib_yy_cp;
    
	grib_yy_current_state = (grib_yy_start);

	for ( grib_yy_cp = (grib_yytext_ptr) + YY_MORE_ADJ; grib_yy_cp < (grib_yy_c_buf_p); ++grib_yy_cp )
		{
		YY_CHAR grib_yy_c = (*grib_yy_cp ? grib_yy_ec[YY_SC_TO_UI(*grib_yy_cp)] : 1);
		if ( grib_yy_accept[grib_yy_current_state] )
			{
			(grib_yy_last_accepting_state) = grib_yy_current_state;
			(grib_yy_last_accepting_cpos) = grib_yy_cp;
			}
		while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
			{
			grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
			if ( grib_yy_current_state >= 820 )
				grib_yy_c = grib_yy_meta[grib_yy_c];
			}
		grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
		}

	return grib_yy_current_state;
}

/* grib_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = grib_yy_try_NUL_trans( current_state );
 */
    static grib_yy_state_type grib_yy_try_NUL_trans  (grib_yy_state_type grib_yy_current_state )
{
	int grib_yy_is_jam;
    	char *grib_yy_cp = (grib_yy_c_buf_p);

	YY_CHAR grib_yy_c = 1;
	if ( grib_yy_accept[grib_yy_current_state] )
		{
		(grib_yy_last_accepting_state) = grib_yy_current_state;
		(grib_yy_last_accepting_cpos) = grib_yy_cp;
		}
	while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
		{
		grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
		if ( grib_yy_current_state >= 820 )
			grib_yy_c = grib_yy_meta[grib_yy_c];
		}
	grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
	grib_yy_is_jam = (grib_yy_current_state == 819);

		return grib_yy_is_jam ? 0 : grib_yy_current_state;
}

#ifndef YY_NO_UNPUT

    void grib_yyunput (int c, char * grib_yy_bp )
{
	char *grib_yy_cp;
    
    grib_yy_cp = (grib_yy_c_buf_p);

	/* undo effects of setting up grib_yytext */
	*grib_yy_cp = (grib_yy_hold_char);

	if ( grib_yy_cp < YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		grib_yy_size_t number_to_move = (grib_yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf )
			*--dest = *--source;

		grib_yy_cp += (int) (dest - source);
		grib_yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars =
			(grib_yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size;

		if ( grib_yy_cp < YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--grib_yy_cp = (char) c;

	(grib_yytext_ptr) = grib_yy_bp;
	(grib_yy_hold_char) = *grib_yy_cp;
	(grib_yy_c_buf_p) = grib_yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int grib_yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(grib_yy_c_buf_p) = (grib_yy_hold_char);

	if ( *(grib_yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* grib_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (grib_yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] )
			/* This was really a NUL. */
			*(grib_yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			grib_yy_size_t offset = (grib_yy_c_buf_p) - (grib_yytext_ptr);
			++(grib_yy_c_buf_p);

			switch ( grib_yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because grib_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					grib_yyrestart( grib_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( grib_yywrap(  ) )
						return 0;

					if ( ! (grib_yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return grib_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(grib_yy_c_buf_p) = (grib_yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (grib_yy_c_buf_p);	/* cast for 8-bit char's */
	*(grib_yy_c_buf_p) = '\0';	/* preserve grib_yytext */
	(grib_yy_hold_char) = *++(grib_yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void grib_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        grib_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE );
	}

	grib_yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	grib_yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void grib_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		grib_yypop_buffer_state();
	 *		grib_yypush_buffer_state(new_buffer);
     */
	grib_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(grib_yy_c_buf_p) = (grib_yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos = (grib_yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	grib_yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (grib_yywrap()) processing, but the only time this flag
	 * is looked at is after grib_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(grib_yy_did_buffer_switch_on_eof) = 1;
}

static void grib_yy_load_buffer_state  (void)
{
    	(grib_yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars;
	(grib_yytext_ptr) = (grib_yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos;
	grib_yyin = YY_CURRENT_BUFFER_LVALUE->grib_yy_input_file;
	(grib_yy_hold_char) = *(grib_yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE grib_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) grib_yyalloc( sizeof( struct grib_yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_create_buffer()" );

	b->grib_yy_buf_size = size;

	/* grib_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->grib_yy_ch_buf = (char *) grib_yyalloc( (grib_yy_size_t) (b->grib_yy_buf_size + 2)  );
	if ( ! b->grib_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_create_buffer()" );

	b->grib_yy_is_our_buffer = 1;

	grib_yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with grib_yy_create_buffer()
 * 
 */
    void grib_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->grib_yy_is_our_buffer )
		grib_yyfree( (void *) b->grib_yy_ch_buf  );

	grib_yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a grib_yyrestart() or at EOF.
 */
    static void grib_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	grib_yy_flush_buffer( b );

	b->grib_yy_input_file = file;
	b->grib_yy_fill_buffer = 1;

    /* If b is the current buffer, then grib_yy_init_buffer was _probably_
     * called from grib_yyrestart() or through grib_yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->grib_yy_bs_lineno = 1;
        b->grib_yy_bs_column = 0;
    }

        b->grib_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void grib_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->grib_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->grib_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->grib_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->grib_yy_buf_pos = &b->grib_yy_ch_buf[0];

	b->grib_yy_at_bol = 1;
	b->grib_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		grib_yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void grib_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	grib_yyensure_buffer_stack();

	/* This block is copied from grib_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(grib_yy_c_buf_p) = (grib_yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos = (grib_yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(grib_yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from grib_yy_switch_to_buffer. */
	grib_yy_load_buffer_state(  );
	(grib_yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void grib_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	grib_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((grib_yy_buffer_stack_top) > 0)
		--(grib_yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		grib_yy_load_buffer_state(  );
		(grib_yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void grib_yyensure_buffer_stack (void)
{
	grib_yy_size_t num_to_alloc;
    
	if (!(grib_yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(grib_yy_buffer_stack) = (struct grib_yy_buffer_state**)grib_yyalloc
								(num_to_alloc * sizeof(struct grib_yy_buffer_state*)
								);
		if ( ! (grib_yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yyensure_buffer_stack()" );

		memset((grib_yy_buffer_stack), 0, num_to_alloc * sizeof(struct grib_yy_buffer_state*));

		(grib_yy_buffer_stack_max) = num_to_alloc;
		(grib_yy_buffer_stack_top) = 0;
		return;
	}

	if ((grib_yy_buffer_stack_top) >= ((grib_yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		grib_yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (grib_yy_buffer_stack_max) + grow_size;
		(grib_yy_buffer_stack) = (struct grib_yy_buffer_state**)grib_yyrealloc
								((grib_yy_buffer_stack),
								num_to_alloc * sizeof(struct grib_yy_buffer_state*)
								);
		if ( ! (grib_yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((grib_yy_buffer_stack) + (grib_yy_buffer_stack_max), 0, grow_size * sizeof(struct grib_yy_buffer_state*));
		(grib_yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE grib_yy_scan_buffer  (char * base, grib_yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) grib_yyalloc( sizeof( struct grib_yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_scan_buffer()" );

	b->grib_yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->grib_yy_buf_pos = b->grib_yy_ch_buf = base;
	b->grib_yy_is_our_buffer = 0;
	b->grib_yy_input_file = NULL;
	b->grib_yy_n_chars = b->grib_yy_buf_size;
	b->grib_yy_is_interactive = 0;
	b->grib_yy_at_bol = 1;
	b->grib_yy_fill_buffer = 0;
	b->grib_yy_buffer_status = YY_BUFFER_NEW;

	grib_yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to grib_yylex() will
 * scan from a @e copy of @a str.
 * @param grib_yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       grib_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE grib_yy_scan_string (const char * grib_yystr )
{
    
	return grib_yy_scan_bytes( grib_yystr, (int) strlen(grib_yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to grib_yylex() will
 * scan from a @e copy of @a bytes.
 * @param grib_yybytes the byte buffer to scan
 * @param _grib_yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE grib_yy_scan_bytes  (const char * grib_yybytes, grib_yy_size_t  _grib_yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	grib_yy_size_t n;
	grib_yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (grib_yy_size_t) (_grib_yybytes_len + 2);
	buf = (char *) grib_yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_scan_bytes()" );

	for ( i = 0; i < _grib_yybytes_len; ++i )
		buf[i] = grib_yybytes[i];

	buf[_grib_yybytes_len] = buf[_grib_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = grib_yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in grib_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->grib_yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void grib_yynoreturn grib_yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine grib_yyless() so it works in section 3 code. */

#undef grib_yyless
#define grib_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up grib_yytext. */ \
        grib_yy_size_t grib_yyless_macro_arg = (n); \
        YY_LESS_LINENO(grib_yyless_macro_arg);\
		grib_yytext[grib_yyleng] = (grib_yy_hold_char); \
		(grib_yy_c_buf_p) = grib_yytext + grib_yyless_macro_arg; \
		(grib_yy_hold_char) = *(grib_yy_c_buf_p); \
		*(grib_yy_c_buf_p) = '\0'; \
		grib_yyleng = grib_yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int grib_yyget_lineno  (void)
{
    
    return grib_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *grib_yyget_in  (void)
{
        return grib_yyin;
}

/** Get the output stream.
 * 
 */
FILE *grib_yyget_out  (void)
{
        return grib_yyout;
}

/** Get the length of the current token.
 * 
 */
grib_yy_size_t grib_yyget_leng  (void)
{
        return grib_yyleng;
}

/** Get the current token.
 * 
 */

char *grib_yyget_text  (void)
{
        return grib_yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void grib_yyset_lineno (int  _line_number )
{
    
    grib_yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see grib_yy_switch_to_buffer
 */
void grib_yyset_in (FILE *  _in_str )
{
        grib_yyin = _in_str ;
}

void grib_yyset_out (FILE *  _out_str )
{
        grib_yyout = _out_str ;
}

int grib_yyget_debug  (void)
{
        return grib_yy_flex_debug;
}

void grib_yyset_debug (int  _bdebug )
{
        grib_yy_flex_debug = _bdebug ;
}

static int grib_yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from grib_yylex_destroy(), so don't allocate here.
     */

    (grib_yy_buffer_stack) = NULL;
    (grib_yy_buffer_stack_top) = 0;
    (grib_yy_buffer_stack_max) = 0;
    (grib_yy_c_buf_p) = NULL;
    (grib_yy_init) = 0;
    (grib_yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    grib_yyin = stdin;
    grib_yyout = stdout;
#else
    grib_yyin = NULL;
    grib_yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * grib_yylex_init()
     */
    return 0;
}

/* grib_yylex_destroy is for both reentrant and non-reentrant scanners. */
int grib_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		grib_yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		grib_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	grib_yyfree((grib_yy_buffer_stack) );
	(grib_yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * grib_yylex() is called, initialization will occur. */
    grib_yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef grib_yytext_ptr
static void grib_yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int grib_yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *grib_yyalloc (grib_yy_size_t  size )
{
			return malloc(size);
}

void *grib_yyrealloc  (void * ptr, grib_yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void grib_yyfree (void * ptr )
{
			free( (char *) ptr );	/* see grib_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "grib_yytables"

#line 286 "gribl.l"



