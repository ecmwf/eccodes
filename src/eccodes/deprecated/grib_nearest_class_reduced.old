#error This is the old way. Kept here for posterity

static int find(grib_nearest* nearest, grib_handle* h,
                double inlat, double inlon, unsigned long flags,
                double* outlats, double* outlons, double* values,
                double* distances, double* distances, int* indexes, size_t* len)
{
    grib_nearest_reduced* self = (grib_nearest_reduced*)nearest;
    int ret = 0, kk = 0, ii = 0, jj = 0;
    double* pl = NULL;
    int ilat;
    size_t nvalues = 0;
    if (!nearest->h || (flags & GRIB_NEAREST_SAME_DATA) == 0 || nearest->h != h) {
        grib_iterator* iter = NULL;
        double lat = 0, lon = 0;

        if ((ret = grib_get_size(h, self->values_key, &nvalues)) != GRIB_SUCCESS)
            return ret;
        nearest->values_count = nvalues;
        if (nearest->values)
            grib_context_free(nearest->context, nearest->values);
        nearest->values = grib_context_malloc(h->context, nvalues * sizeof(double));
        if (!nearest->values)
            return GRIB_OUT_OF_MEMORY;

        ret = grib_get_double_array_internal(h, self->values_key,
                                             nearest->values, &(nearest->values_count));
        if (ret != GRIB_SUCCESS)
            grib_context_log(nearest->context, GRIB_LOG_ERROR,
                             "nearest: unable to get values array");

        /* Compute lat/lon info, create iterator etc if it's the 1st time or different grid.
         * This is for performance: if the grid has not changed, we only do this once
         * and reuse for other messages
        */
        if (!nearest->h || (flags & GRIB_NEAREST_SAME_GRID) == 0) {
            double dummy = 0;
            double olat  = 1.e10;
            ilat = 0, ilon = 0;
            long n = 0;

            if (grib_is_missing(h, self->Nj, &ret)) {
                grib_context_log(h->context, GRIB_LOG_DEBUG, "Key '%s' is missing", self->Nj);
                return ret ? ret : GRIB_GEOCALCULUS_PROBLEM;
            }

            if ((ret = grib_get_long(h, self->Nj, &n)) != GRIB_SUCCESS)
                return ret;
            self->lats_count = n;

            if (self->lats)
                grib_context_free(nearest->context, self->lats);
            self->lats = grib_context_malloc(nearest->context,
                                             self->lats_count * sizeof(double));
            if (!self->lats)
                return GRIB_OUT_OF_MEMORY;

            if (self->lons)
                grib_context_free(nearest->context, self->lons);
            self->lons = grib_context_malloc(nearest->context,
                                             nearest->values_count * sizeof(double));
            if (!self->lons)
                return GRIB_OUT_OF_MEMORY;

            iter = grib_iterator_new(h, 0, &ret);
            while (grib_iterator_next(iter, &lat, &lon, &dummy)) {
                if (olat != lat) {
                    self->lats[ilat++] = lat;
                    olat               = lat;
                }
                self->lons[ilon++] = lon;
            }
            grib_iterator_delete(iter);
        }
        nearest->h = h;
    }

    if (!self->distances || (flags & GRIB_NEAREST_SAME_POINT) == 0 || (flags & GRIB_NEAREST_SAME_GRID) == 0) {
        double* lons = NULL;
        int nlon     = 0;
        int plsize   = 0;

        self->distances = (double*)grib_context_malloc(nearest->context, 4 * sizeof(double));
        if (!self->distances)
            return GRIB_OUT_OF_MEMORY;

        grib_binary_search(self->lats, self->lats_count - 1, inlat,
                           &(self->j[0]), &(self->j[1]));

        plsize = self->lats_count;
        pl     = (double*)grib_context_malloc(h->context, plsize * sizeof(double));
        if (!pl)
            return GRIB_OUT_OF_MEMORY;
        if ((ret = grib_get_double_array(h, "pl", pl, &plsize)) != GRIB_SUCCESS)
            return ret;

        nlon = 0;
        for (jj = 0; jj < self->j[0]; jj++) {
            nlon += pl[jj];
        }
        lons = self->lons + nlon;
        grib_binary_search(lons, pl[self->j[0]] - 1, inlon,
                           &(self->k[0]), &(self->k[1]));
        self->k[0] += nlon;
        self->k[1] += nlon;

        nlon = 0;
        for (jj = 0; jj < self->j[1]; jj++) {
            nlon += pl[jj];
        }
        lons = self->lons + nlon;
        grib_binary_search(lons, pl[self->j[1]] - 1, inlon,
                           &(self->k[2]), &(self->k[3]));
        self->k[2] += nlon;
        self->k[3] += nlon;

        kk = 0;
        for (ii = 0; ii < 2; ii++) {
            for (jj = 0; jj < 2; jj++) {
                self->distances[kk] = geographic_distance_spherical(radius, inlon, inlat,
                                                            self->lons[self->k[kk]], self->lats[self->j[jj]]);
                kk++;
            }
        }

        grib_context_free(h->context, pl);
    }

    kk = 0;
    for (ii = 0; ii < 2; ii++) {
        for (jj = 0; jj < 2; jj++) {
            distances[kk] = self->distances[kk];
            outlats[kk]   = self->lats[self->j[jj]];
            outlons[kk]   = self->lons[self->k[kk]];
            values[kk]    = nearest->values[self->k[kk]];
            indexes[kk]   = self->k[kk];
            kk++;
        }
    }

    return GRIB_SUCCESS;
}
