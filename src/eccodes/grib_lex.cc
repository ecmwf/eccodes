#line 1 "gribl.cc"

#line 3 "gribl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define grib_yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define grib_yynoreturn __attribute__((__noreturn__))
#else
#define grib_yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (grib_yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((grib_yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE grib_yyrestart( grib_yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(grib_yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct grib_yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t grib_yy_size_t;
#endif

extern grib_yy_size_t grib_yyleng;

extern FILE *grib_yyin, *grib_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define grib_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up grib_yytext. */ \
        int grib_yyless_macro_arg = (n); \
        YY_LESS_LINENO(grib_yyless_macro_arg);\
		*grib_yy_cp = (grib_yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(grib_yy_c_buf_p) = grib_yy_cp = grib_yy_bp + grib_yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up grib_yytext again */ \
		} \
	while ( 0 )
#define unput(c) grib_yyunput( c, (grib_yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct grib_yy_buffer_state
	{
	FILE *grib_yy_input_file;

	char *grib_yy_ch_buf;		/* input buffer */
	char *grib_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int grib_yy_buf_size;

	/* Number of characters read into grib_yy_ch_buf, not including EOB
	 * characters.
	 */
	grib_yy_size_t grib_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int grib_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int grib_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int grib_yy_at_bol;

    int grib_yy_bs_lineno; /**< The line count. */
    int grib_yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int grib_yy_fill_buffer;

	int grib_yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via grib_yyrestart()), so that the user can continue scanning by
	 * just pointing grib_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t grib_yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t grib_yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * grib_yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (grib_yy_buffer_stack) \
                          ? (grib_yy_buffer_stack)[(grib_yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (grib_yy_buffer_stack)[(grib_yy_buffer_stack_top)]

/* grib_yy_hold_char holds the character lost when grib_yytext is formed. */
static char grib_yy_hold_char;
static grib_yy_size_t grib_yy_n_chars;		/* number of characters read into grib_yy_ch_buf */
grib_yy_size_t grib_yyleng;

/* Points to current character in buffer. */
static char *grib_yy_c_buf_p = NULL;
static int grib_yy_init = 0;		/* whether we need to initialize */
static int grib_yy_start = 0;	/* start state number */

/* Flag which is used to allow grib_yywrap()'s to do buffer switches
 * instead of setting up a fresh grib_yyin.  A bit of a hack ...
 */
static int grib_yy_did_buffer_switch_on_eof;

void grib_yyrestart ( FILE *input_file  );
void grib_yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE grib_yy_create_buffer ( FILE *file, int size  );
void grib_yy_delete_buffer ( YY_BUFFER_STATE b  );
void grib_yy_flush_buffer ( YY_BUFFER_STATE b  );
void grib_yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void grib_yypop_buffer_state ( void );

static void grib_yyensure_buffer_stack ( void );
static void grib_yy_load_buffer_state ( void );
static void grib_yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER grib_yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE grib_yy_scan_buffer ( char *base, grib_yy_size_t size  );
YY_BUFFER_STATE grib_yy_scan_string ( const char *grib_yy_str  );
YY_BUFFER_STATE grib_yy_scan_bytes ( const char *bytes, grib_yy_size_t len  );

void *grib_yyalloc ( grib_yy_size_t  );
void *grib_yyrealloc ( void *, grib_yy_size_t  );
void grib_yyfree ( void *  );

#define grib_yy_new_buffer grib_yy_create_buffer
#define grib_yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        grib_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->grib_yy_is_interactive = is_interactive; \
	}
#define grib_yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        grib_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->grib_yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->grib_yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *grib_yyin = NULL, *grib_yyout = NULL;

typedef int grib_yy_state_type;

extern int grib_yylineno;
int grib_yylineno = 1;

extern char *grib_yytext;
#ifdef grib_yytext_ptr
#undef grib_yytext_ptr
#endif
#define grib_yytext_ptr grib_yytext

static grib_yy_state_type grib_yy_get_previous_state ( void );
static grib_yy_state_type grib_yy_try_NUL_trans ( grib_yy_state_type current_state  );
static int grib_yy_get_next_buffer ( void );
static void grib_yynoreturn grib_yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up grib_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(grib_yytext_ptr) = grib_yy_bp; \
	grib_yyleng = (grib_yy_size_t) (grib_yy_cp - grib_yy_bp); \
	(grib_yy_hold_char) = *grib_yy_cp; \
	*grib_yy_cp = '\0'; \
	(grib_yy_c_buf_p) = grib_yy_cp;
#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct grib_yy_trans_info
	{
	flex_int32_t grib_yy_verify;
	flex_int32_t grib_yy_nxt;
	};
static const flex_int16_t grib_yy_accept[801] =
    {   0,
      136,  136,  140,  138,  136,  137,   13,  127,  135,  138,
      138,  138,  138,  130,    5,  138,    3,  129,  129,  129,
      128,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  138,   19,  136,    6,    0,   15,  131,  133,    0,
        0,  132,  130,  129,  129,    4,    7,    1,    2,    0,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   24,  129,   10,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,   16,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   17,    0,    0,    0,    0,
        0,    0,  134,  132,    0,  129,  129,    0,    0,  129,
        0,  129,   25,  129,   14,  129,  129,  129,    8,  129,
       67,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   36,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   99,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,   12,  129,  129,   53,  129,  129,  129,

      129,  129,  129,  113,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  134,    0,  133,    0,    0,    0,    0,    0,
      132,  129,  129,  129,  129,  129,  129,  112,   29,  129,
      116,  129,  129,  129,  129,  129,  129,  129,  129,  129,
       90,  129,   26,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,   68,  129,  129,   31,  129,  129,  129,  129,
       49,  129,  129,  129,  129,  129,  129,   18,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  125,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  115,  129,  129,  129,  129,    0,    0,    0,
        0,    0,    0,  132,  129,  129,  129,   57,  129,   28,
      129,  129,   21,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,   45,  129,  129,  129,  129,   47,
      129,  129,  129,  129,  129,  101,  105,  109,  129,  129,
       11,  129,  129,   30,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   51,  129,  124,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   98,  129,

      129,   32,  122,    0,    0,    0,    0,  129,    0,    0,
      129,  123,   86,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,   75,  129,  129,  129,  129,   41,
      129,   92,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,   22,  129,   46,  129,  129,   71,  129,
      129,  129,  129,    9,  129,  129,  129,  129,  129,   76,
       77,  129,  129,  129,   39,  129,  129,   20,  117,  129,
      129,  129,  129,  129,  100,  104,  108,  129,  129,    0,
        0,    0,    0,    0,  129,  129,   94,  129,  129,  129,
      119,  129,  129,   97,  118,  129,  129,  129,   69,  129,

      129,  129,  129,  129,  129,  126,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,   55,   66,   88,
       91,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   35,  129,  129,  129,
       58,  129,    0,    0,  129,  129,  129,  129,   60,  129,
      129,  129,  129,  129,  129,  129,  129,   37,  129,  129,
      129,  129,  129,  129,  129,  129,   65,  129,  129,  129,
      129,  129,   96,  129,  129,   59,  129,  129,  129,  129,
      129,  129,   33,  129,  129,  129,  129,  129,  129,   27,
      129,   40,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,   38,  129,  129,  129,  129,  129,  129,   84,
      129,   63,   23,  129,   48,   50,  129,   87,  129,  129,
      129,  129,  129,  129,  129,  129,   81,   61,  129,  129,
      129,  129,  129,  129,   95,  129,  129,  129,  129,  129,
      129,  121,  129,  129,  129,   79,   78,   83,  129,  129,
      129,  129,  129,  114,  129,  129,  129,  129,   80,  129,
      129,  129,  129,  129,  129,   43,   64,  129,  129,  129,
      129,  129,  129,  129,   70,  129,  129,  129,  129,  129,
       42,   62,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   56,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   52,  129,  129,  129,  129,
      129,  129,  129,   93,  129,  120,  129,  129,  129,  129,
      129,  129,  129,   85,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   54,  129,
       34,  129,  129,  129,  129,   89,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   44,  129,   73,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   74,  129,
      129,  129,  129,  129,  129,  129,  129,  103,  107,  111,
       82,  129,  129,  129,  129,  102,  106,  110,   72,    0

    } ;

static const YY_CHAR grib_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    1,
        1,    1,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   13,   18,   13,   19,   13,    1,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   24,   23,
       25,   23,   26,   23,   23,   23,   27,   28,   23,   23,
       23,   23,   29,   23,   23,   23,   23,   23,   23,   23,
        1,    1,    1,    1,   30,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   23,   41,   42,   43,   44,
       45,   46,   23,   47,   48,   49,   50,   51,   52,   53,
       54,   23,    1,   55,    1,   56,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR grib_yy_meta[57] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    6,    6,    6,    6,    6,    6,    1,
        7,    1,    8,    9,    8,    8,    8,    8,    8,    8,
        1,    8,    8,    8,    8,    9,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1,    1
    } ;

static const flex_int16_t grib_yy_base[831] =
    {   0,
        0,    0, 1950, 1951, 1947, 1951, 1927, 1951,   44, 1940,
       51,   58,    0,   69,   68, 1925, 1924,   81,   96,   76,
     1951,   75,   92,   94,  102,  109,   66,  119,  117,  128,
       55,  142,  105,  134,   78,  141,  104,  149,  155,  167,
      157, 1889, 1951, 1941, 1951,  199, 1951,  210,  135,  222,
      234,  170,  245,  257,  273, 1951, 1951, 1951, 1951, 1920,
     1931, 1914,   98,  132,  169,  196,  184,  231,  154,  240,
      242,  251,  254,  252,  268,  171,  122,  258,  267,  273,
      270,  207,  275,  283,  294,  279,  280,  281,  291,  290,
      294, 1913,  293,  305,  296,  308,  310,  297,  311,  312,

      313,  319,  314,  321,  324, 1912,  322,  334,  326,  327,
      345,  329,  206,  346,  347,  349,  350,  354,  342,  361,
      358,  355,  369,  366,  367, 1951,    0,  394,  399, 1916,
      401,  405,  418,  389,  405, 1926,  430,  442,  449,  459,
        0,  371, 1909,  453, 1908,  415,  390,  444, 1907,  455,
     1906,  456,  457,  458,  460,  463,  464,  467,  465,  470,
      469,  471,  474,  472,  477, 1905,  479,  412,  496,  481,
      483,  413,  488,  485,  490,  486,  511,  505,  506,  508,
      504,  510,  514,  515,  516,  517,  521,  522,  524,  527,
      533,  534,  535,  536,  537,  540,  546,  548,  547,  549,

      551,  550,  552,  555,  557,  560,  564,  566,  567,  568,
      571,  572,  574,  573,  577,  576,  579,  583,  580,  585,
      582,  619,  626,  633,  640,  647,  654,  665,  669,  667,
      677,  689, 1904,  661,  586,  671,  672, 1903, 1902,  593,
     1901,  674,  686,  687,  688,  689,  690,  691,  692,  695,
     1900,  699, 1899,  697,  700,  717,  718,  720,  706,  705,
      710,  716,  717,  708,  720,  737,  743,  747,  734,  735,
      737,  736,  751,  740,  741, 1898,  743,  745,  746,  748,
     1897,  750,  753,  749,  765,  766,  762, 1896,  757,  755,
      758,  770,  773,  775,  779,  780,  783,  785,  782, 1893,

      784,  786,  787,  790,  789,  788,  791,  795,  799,  828,
      808,  803, 1890,  802,  809, 1905,  842,  827,  851,  838,
        0,  862,  862,  869, 1900,  879,  873, 1881,  865, 1880,
      864,  876, 1876,  877,  878,  827,  879,  880,  881,  882,
      884,  889,  890,  891, 1875,  908,  909,  911,  896, 1870,
      901,  898,  903,  902,  906,  925,  926,  928,  923,  911,
     1868,  914,  933, 1867,  920,  925,  934,  936,  926,  935,
      939,  940,  941,  942,  945,  950,  949,  951, 1864,  952,
      947,  962,  956,  967,  969,  973,  970,  976,  977,  978,
      981,  980,  983,  985,  984, 1005, 1006, 1009, 1879,  996,

      992, 1857, 1856, 1022, 1028, 1036, 1024, 1040, 1052, 1061,
     1024, 1852, 1851, 1055, 1056, 1009, 1035, 1057, 1060, 1061,
     1062, 1064, 1065, 1068, 1846, 1067, 1086, 1087, 1088, 1844,
     1073, 1843, 1077, 1079, 1078, 1096, 1097, 1098, 1084, 1089,
     1095, 1087, 1107, 1839, 1092, 1837, 1101, 1105, 1836, 1096,
     1103, 1108, 1110, 1833, 1116, 1104, 1001, 1117, 1121, 1832,
     1827, 1122, 1126, 1123, 1825, 1118, 1128, 1824, 1818, 1127,
     1133, 1135, 1138, 1142, 1160, 1162, 1163, 1151, 1152, 1166,
     1188, 1177, 1195, 1203,    0, 1210, 1816, 1204, 1206, 1165,
     1168, 1205, 1209, 1815, 1812, 1207, 1208, 1210, 1811, 1228,

     1227, 1231, 1216, 1217, 1218, 1807, 1235, 1236, 1241, 1227,
     1229, 1226, 1234, 1230, 1251, 1236, 1239, 1242, 1798, 1797,
     1793, 1247, 1248, 1252, 1253, 1254, 1257, 1259, 1264, 1265,
     1268, 1266, 1267, 1275, 1276, 1278, 1792, 1296, 1297, 1298,
     1785, 1283, 1310, 1318, 1315, 1285, 1316, 1317, 1783, 1318,
     1319, 1293, 1320, 1338, 1339, 1306, 1326, 1782, 1327, 1307,
     1344, 1347, 1333, 1334, 1337, 1338, 1778, 1355, 1343, 1344,
     1349, 1346, 1776, 1348, 1355, 1775, 1358, 1361, 1360, 1362,
     1364, 1363, 1284, 1365, 1372, 1369, 1384, 1389, 1392, 1772,
     1382, 1771, 1383, 1388, 1385, 1387, 1389, 1390, 1409, 1410,

     1412, 1397, 1764, 1415, 1416, 1417, 1405, 1411, 1412, 1763,
     1431, 1759, 1757, 1413, 1756, 1752, 1417, 1750, 1414, 1416,
     1419, 1421, 1426, 1423, 1418, 1429, 1743, 1742, 1460, 1461,
     1462, 1447, 1448, 1449, 1741, 1451, 1452, 1453, 1470, 1471,
     1474, 1738, 1472, 1475, 1482, 1737, 1736, 1735, 1483, 1461,
     1470, 1468, 1471, 1733, 1473, 1472, 1477, 1476, 1732, 1490,
     1494, 1495, 1492, 1497, 1494, 1726, 1725, 1501, 1512, 1515,
     1519, 1518, 1524, 1526, 1739, 1505, 1511, 1512, 1516, 1526,
     1721, 1720, 1519, 1530, 1536, 1537, 1529, 1532, 1535, 1537,
     1554, 1555, 1556, 1557, 1558, 1559, 1719, 1544, 1545, 1550,

     1564, 1560, 1572, 1573, 1575, 1567, 1569, 1570, 1576, 1587,
     1590, 1593, 1594, 1596, 1597, 1717, 1584, 1591, 1604, 1596,
     1608, 1609, 1614, 1716, 1594, 1715, 1602, 1605, 1615, 1616,
     1621, 1627, 1631, 1714, 1617, 1635, 1620, 1637, 1638, 1641,
     1626, 1623, 1644, 1646, 1648, 1649, 1653, 1654, 1590, 1651,
     1286, 1656, 1657, 1660, 1646, 1171, 1666, 1668, 1670, 1671,
     1673, 1675, 1677, 1682, 1683, 1686, 1170, 1687, 1053, 1684,
     1680, 1693, 1695, 1696, 1689, 1698, 1699, 1688,  969, 1700,
     1704, 1706, 1712, 1721, 1723, 1724, 1725,  839,  678,  618,
      443, 1716, 1722, 1726, 1727,  395,  235,  153,   97, 1951,

     1763, 1771, 1778, 1782, 1786, 1790, 1797, 1804, 1806, 1814,
     1819, 1820, 1828, 1833, 1837, 1839, 1846, 1854, 1858, 1865,
     1870, 1875, 1877, 1885, 1889, 1897, 1902, 1903, 1911, 1912
    } ;

static const flex_int16_t grib_yy_def[831] =
    {   0,
      800,    1,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  801,  802,  800,  800,  800,  803,  803,   19,
      800,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,  800,  800,  800,  800,  800,  800,  800,  804,  805,
      800,  806,  802,  807,  807,  800,  800,  800,  800,  800,
      808,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  808,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  800,  809,  810,  811,  812,
      813,  805,  800,  806,  814,  815,  807,  800,  800,  815,
      816,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,  808,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,  817,  800,  800,  800,  800,  800,  813,  818,  800,
      800,  819,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  808,  808,  808,   19,   19,
       19,   19,   19,   19,   19,  808,  808,  808,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  820,  817,  821,  800,  822,
      823,  824,  800,  800,  825,  819,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  808,  808,  808,   19,   19,
       19,   19,   19,   19,   19,  808,  808,  808,   19,   19,
       19,   19,  808,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  808,  808,  808,  808,   19,

       19,   19,   19,  826,  800,  822,  827,  828,  800,  800,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,  808,  808,  808,   19,
       19,   19,   19,   19,   19,  808,  808,  808,   19,   19,
       19,   19,  808,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  808,  808,  808,   19,   19,  800,
      800,  829,  800,  800,  830,  828,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,  808,

      808,  808,   19,   19,   19,   19,  808,  808,  808,   19,
       19,   19,   19,   19,  808,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,  808,  808,  808,
       19,   19,  800,  800,   19,   19,   19,   19,   19,   19,
       19,   19,   19,  808,  808,  808,   19,   19,   19,  808,
      808,  808,   19,   19,   19,   19,   19,  808,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,  808,  808,  808,   19,
       19,   19,   19,   19,   19,   19,   19,   19,  808,  808,

      808,   19,   19,  808,  808,  808,   19,   19,   19,   19,
      808,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,  808,  808,
      808,   19,   19,   19,   19,   19,   19,   19,  808,  808,
      808,   19,  808,  808,  808,   19,   19,   19,  808,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,  808,
      808,  808,   19,   19,   19,   19,   19,   19,  808,  808,
      808,  808,  808,  808,  808,   19,   19,   19,   19,   19,
       19,   19,   19,  808,  808,  808,   19,   19,   19,   19,
      808,  808,  808,  808,  808,  808,   19,   19,   19,   19,

      808,   19,  808,  808,  808,   19,   19,   19,   19,  808,
      808,  808,  808,  808,  808,   19,   19,   19,  808,   19,
      808,  808,  808,   19,   19,   19,   19,  808,  808,  808,
      808,  808,  808,   19,   19,  808,   19,  808,  808,  808,
       19,   19,  808,  808,  808,  808,  808,  808,   19,  808,
       19,  808,  808,  808,   19,   19,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,   19,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,    0,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800
    } ;

static const flex_int16_t grib_yy_nxt[2008] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    8,   11,   11,
       12,   13,   14,   14,   14,   14,   14,   14,   14,   15,
       16,   17,   18,   18,   18,   18,   19,   18,   18,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       18,   41,   18,   18,   42,   43,   46,   46,   46,   46,
       46,   46,   46,   48,   48,   48,   48,   48,   48,   48,
       49,   49,   49,   49,   49,   49,   49,   51,   51,   52,
       62,   53,   53,   53,   53,   53,   53,   53,   56,   57,
       60,   62,   55,   61,   61,   61,   61,   61,   61,   61,

       62,   62,   96,   62,   55,   60,   60,   84,   61,   61,
       61,   61,   61,   61,   61,   64,   65,   62,   66,   62,
       67,   63,   68,   62,  106,   73,  142,   62,  107,   62,
       62,   69,   85,   70,   62,   74,   71,   76,   75,  111,
      101,   77,   62,   80,   62,   72,   78,   62,   88,  102,
       81,   79,   82,   62,   86,  161,   89,   62,  129,   62,
       90,   83,   60,   91,   92,   87,   62,   62,  143,  103,
      129,   93,  108,   97,   62,   94,   95,   98,  104,   62,
       62,   99,   62,  105,  112,  109,  100,  110,  113,  114,
      119,  115,   62,  135,   62,  124,   62,  116,  117,  120,

      118,  121,  149,  125,  127,  135,  122,  160,  144,   62,
      123,   46,   46,   46,   46,   46,   46,   46,   51,   51,
       52,   62,   48,   48,   48,   48,   48,   48,   48,  146,
      145,   62,   62,  128,  130,  130,  130,  130,  130,  130,
      130,  166,  131,  206,   60,  128,  133,  133,  133,  133,
      133,  133,  133,   51,   51,   52,   62,   53,   53,   53,
       53,   53,   53,   53,  147,   62,   60,   62,   55,  136,
      136,  136,  136,  136,  136,  136,   62,   62,  148,   62,
       55,  138,  139,   62,  150,  140,  140,  140,  140,  140,
      140,  140,   62,   62,  151,   62,  155,  153,   62,  152,

       62,  154,  156,   60,   62,   62,   62,  162,   62,  163,
      157,  158,  164,  159,  168,   62,   62,  165,   62,   62,
      167,   62,   62,  169,  171,  173,  176,  170,  172,  175,
       62,  180,  174,   62,  178,   62,   62,   62,   62,   62,
      183,  177,  182,  181,   62,  191,   62,   62,  179,   62,
      192,   62,   62,  190,   62,  185,  186,  196,  184,   62,
      188,  189,  203,  187,  193,  195,  199,   62,  197,  194,
       62,   62,   62,  198,   62,   62,  200,  204,  208,   62,
       62,  205,  210,   62,  212,  207,   62,  201,  202,  214,
      213,   62,   62,  211,   62,  209,   62,  215,  216,  233,

      217,  219,  138,  138,   60,  220,  221,  224,  224,  226,
      226,  227,  229,  230,  230,   62,  218,  130,  130,  130,
      130,  130,  130,  130,  229,  131,   51,   51,   52,  236,
      133,  133,  133,  133,  133,  133,  133,   62,   62,   60,
       62,  128,  136,  136,  136,  136,  136,  136,  136,  255,
      235,  261,   60,  128,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,   60,   62,
      141,  140,  140,  140,  140,  140,  140,  140,   62,  237,
       62,   62,   62,   62,  234,   62,  240,  238,   62,   62,
       62,  239,   62,  241,   62,   62,   62,   62,  243,   62,

      245,  248,   62,  250,   62,   60,   62,  242,   62,  244,
       62,   62,  253,   62,  246,   62,  259,  249,  247,  251,
      252,  263,  262,  254,  266,  264,  267,  265,  268,   62,
       62,   62,  260,   62,  256,   62,   62,  273,  257,   62,
       62,   62,   62,  258,  269,  274,   62,   62,  270,   62,
      271,  275,   62,  277,  272,  281,  279,  278,   62,   62,
       62,   62,   62,  276,  286,   62,  282,  284,  287,  280,
      285,   62,   62,   62,   62,   62,   62,   62,  288,  283,
       62,  295,   62,  293,  297,   62,  289,  291,  298,   62,
      292,   62,   62,   62,  290,  294,   62,   62,   62,   62,

      296,   62,   62,  299,   62,   62,  302,   62,   62,  300,
       62,   62,  301,  306,  309,  303,  308,  305,   62,  304,
      311,  307,  312,  313,  310,  332,  314,   60,   60,  329,
      315,  316,  316,  316,  316,  316,  316,  316,  223,  223,
      223,  223,  223,  223,  223,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  228,
      228,  228,  228,  228,  228,  228,  318,  318,  318,  318,
      318,  318,  318,  319,  319,  320,  321,  323,  323,  231,
      231,  231,  231,  231,  231,  231,   62,   60,  322,  231,
      231,  231,  231,  231,  231,  231,   62,   62,   60,   62,

      322,  325,  325,  325,  325,  325,  325,  325,  328,  333,
      330,   62,   62,   62,   62,   62,   62,   62,  331,  338,
       62,  340,   62,  336,   62,   62,   60,   60,  335,   60,
       62,   62,  344,   62,  334,   62,  341,  337,  342,  351,
      339,   62,   62,  343,  354,   62,   60,  345,  346,  349,
      350,  352,   60,  347,  356,  348,   60,  357,  353,   62,
       62,   62,   62,  358,  363,   62,   62,  362,   62,  355,
       62,   62,  366,   62,   62,   62,   62,  359,   62,  369,
       62,  364,   62,   62,  360,  361,  370,   62,  371,  365,
       62,   62,  368,  372,  367,   62,  373,  374,   62,  377,

       62,  375,  380,  376,   62,   62,  378,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,  386,  379,  383,
       62,  382,  385,  390,   62,  381,  384,   62,   62,  388,
      391,  392,  387,   62,   62,  389,  395,  402,  321,  393,
      401,  396,  394,  397,  403,  398,  399,  400,   60,  321,
      404,   60,   62,   62,  316,  316,  316,  316,  316,  316,
      316,  407,  404,  405,  405,  405,  405,  405,  405,  405,
      409,  409,  417,  407,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,   60,   62,
       62,  325,  325,  325,  325,  325,  325,  325,   62,  412,

      411,   62,   62,   62,   62,   62,   62,   62,  415,   62,
      418,  414,  413,  416,   62,   62,   62,   60,   60,  423,
       60,   62,  421,   62,  420,  419,   62,   62,   62,  422,
      426,   62,  431,  424,   60,   60,   62,   60,  425,   62,
      435,  432,   60,  434,  429,   62,  430,  433,   62,  427,
       62,   62,  439,  441,  436,  437,  428,  438,  444,   62,
       62,   62,  442,  448,   62,   62,   62,   62,  443,  447,
       62,  440,   62,  445,   62,   62,   62,   62,   60,  446,
      452,   62,  460,  453,  456,  451,  450,   62,  449,  455,
      458,  457,   62,  454,   62,   62,  459,  461,   62,  466,

      462,   62,   62,   62,  464,   62,   62,  465,   62,   62,
       62,  463,  470,  467,   60,   60,  469,   62,   60,  474,
      476,   62,  475,  468,  473,  477,   62,  478,  471,  472,
      480,  480,  483,  483,   62,  479,  319,  319,  320,  321,
      405,  405,  405,  405,  405,  405,  405,  321,  487,   62,
      525,  322,  485,  485,  485,  485,  485,  485,  485,  482,
       62,  490,   60,  322,  410,  410,  410,  410,  410,  410,
      410,  482,  321,  410,  410,  410,  410,  410,  410,  410,
       62,   62,   62,  491,  488,   62,   62,   62,  489,   62,
       62,  493,   62,   62,  497,   60,   60,   60,   62,  496,

      492,  494,   62,   62,   62,   60,   60,   60,  504,   62,
      495,  498,   62,  506,   62,  499,   60,   62,  510,  503,
       62,   62,  500,  505,  512,  511,   62,  513,   62,   62,
       62,  514,  517,   62,  501,   62,  502,  507,  508,  509,
      518,   62,   62,   62,  519,  516,   62,   62,   62,  521,
      523,   62,   62,   62,  524,  522,  520,  532,   62,  515,
       62,  526,  529,   62,  527,  528,  531,   62,  534,   60,
      530,   60,   60,  536,  535,  533,   62,   62,  481,  481,
      481,  481,  481,  481,  481,  543,  543,  542,  537,  538,
       62,  539,  540,   62,  547,   62,   62,  548,  541,  321,

      481,  481,  481,  481,  481,  481,  481,  484,  484,  484,
      484,  484,  484,  484,  321,  484,  484,  484,  484,  484,
      484,  484,  485,  485,  485,  485,  485,  485,  485,   62,
       62,   62,   62,   62,   62,   62,   60,   60,  551,  553,
       60,   62,   62,   62,   60,   60,  545,  546,  550,  559,
       60,   62,   62,  549,   62,   62,  552,  554,  555,   62,
       60,   62,  557,  565,   62,  558,  563,   62,  564,  566,
      556,  571,   62,   62,  560,  561,  567,   62,   62,   62,
      562,  569,   62,  573,   62,  572,  570,  574,  578,   62,
       62,   62,   62,   62,  575,  579,  568,  576,  577,  581,

       62,   62,  583,   62,  580,   60,   60,   60,   62,   62,
       62,   62,  584,  625,  582,   60,   60,  590,   62,  585,
      592,  586,  544,  544,  544,  544,  544,  544,  544,  321,
      544,  544,  544,  544,  544,  544,  544,  587,  588,  589,
       62,   62,   62,   62,   62,   62,  597,   60,   60,  593,
      601,   62,   62,   60,  591,  604,   60,  602,   62,   62,
      594,  595,   62,   62,   60,  596,  607,  598,   62,   62,
      599,   62,  609,   62,   62,  603,  600,  615,  612,  613,
       62,  608,  614,   62,  610,   62,   62,   62,   62,   62,
       62,  616,  605,   60,   62,  606,  623,   62,   60,  621,

      626,   60,  619,  617,  622,  611,  620,   62,   62,  627,
       62,  618,   62,   62,   62,   62,  624,  628,   60,   60,
      636,   60,   62,  629,   60,   60,   60,  633,  630,  632,
       62,  631,  634,  635,  637,  638,   62,   62,   62,   62,
       60,   62,   62,   62,   62,  640,   62,  653,   62,  652,
      642,   62,  655,  646,   62,  641,  651,  650,  648,  647,
      654,  658,  639,  643,  644,  645,  649,  656,  657,   60,
       60,   60,   62,   62,   62,  659,   62,   62,   62,   60,
       60,   60,  664,   60,   60,  665,   62,  667,  668,  666,
      671,   60,   60,   62,  663,   62,   62,   62,   62,   60,

      670,   62,   62,   60,   60,  679,  676,  681,  660,  661,
      662,  678,  682,  672,  680,  677,  673,   62,  669,   62,
      683,   60,   62,  674,   60,  689,   62,   60,   60,  675,
       62,  687,  688,   60,  690,   60,   62,   62,  684,   60,
      701,   62,  685,  686,   62,   60,   60,  691,  693,  699,
      700,   62,  698,  694,   62,  702,  692,   62,  697,  695,
       62,  696,   62,   60,   60,   60,   60,   60,   60,   62,
       62,  703,  706,   60,  708,   62,  709,  704,  705,  716,
      707,   60,   60,  710,   60,   62,  713,  714,  715,  718,
      711,  720,   62,  717,   62,   62,   60,  712,  719,   60,

      725,   62,   60,   60,  724,   60,   60,  721,  722,   62,
      723,  726,  727,   60,   60,   62,   62,   60,   60,   62,
      728,   62,  734,   60,   60,   60,  741,   62,  730,  731,
       60,  732,  733,  729,  735,  737,   60,  738,  739,  736,
       60,  742,   62,  740,   60,   62,   60,   60,   62,  743,
       60,   62,  744,   60,  749,   60,  756,   60,   60,  745,
       60,  751,   60,   60,  746,   60,   60,  755,  750,   60,
      747,   62,  752,  753,  748,   60,  754,   60,  757,   60,
       60,  767,   60,  760,   60,  759,   60,  761,  762,   60,
      763,   60,   60,   60,  758,   60,   60,   60,   60,  764,

      765,  768,   60,  766,   60,   60,  769,   60,   60,   60,
      771,  780,  772,   60,  773,   60,  775,  776,  770,  774,
      777,   60,  779,  778,  781,   60,  782,  783,  784,  787,
       60,   60,   60,   60,   60,   60,   60,  785,  786,   62,
       62,   62,   62,  788,   62,   62,   62,  789,   60,  790,
       62,   62,  792,  791,  793,  794,  795,   62,   62,  796,
       62,   62,   62,   62,  799,  797,   62,   62,   62,  798,
       50,   50,   54,   54,   54,   62,   54,   62,   54,   54,
       62,   62,   62,   62,   62,   62,   62,   49,   62,   62,
       49,  132,  132,  132,  132,  134,   62,   62,  134,  137,

       62,   62,  137,   62,  137,  137,   61,   62,   62,   61,
       62,   61,   61,  222,  222,  223,  223,   62,   62,  223,
      225,  225,   62,   62,  225,  130,  130,  130,  130,  228,
      228,  228,   62,  228,  231,  231,   62,   62,  231,  136,
       62,   62,  136,   62,  136,  136,  232,  232,  317,   62,
       62,  317,   62,  317,  317,  324,  324,   62,   62,  324,
      326,   62,   62,  326,   62,  326,  326,  316,   62,   62,
      316,   62,  316,  316,  318,  318,   62,   62,  318,  406,
      406,   62,   62,  406,  408,  408,  410,  410,   60,   62,
      410,  325,   62,   62,  325,   62,  325,  325,  481,  481,

       62,   62,  481,  484,  484,   62,   62,  484,  486,   60,
      486,  486,  544,  544,   60,   62,  544,  485,   62,  485,
      485,   62,   62,   62,   62,   62,   62,   62,   62,  327,
       62,   62,   62,   62,   62,   60,  131,   62,   62,   62,
       60,  141,   44,  126,   59,   58,   47,   45,   44,  800,
        3,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800
    } ;

static const flex_int16_t grib_yy_chk[2008] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,    9,    9,    9,
        9,    9,    9,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   12,   12,   14,   14,   14,
       31,   14,   14,   14,   14,   14,   14,   14,   15,   15,
       18,   27,   14,   18,   18,   18,   18,   18,   18,   18,

       22,   20,   31,   35,   14,   19,  799,   27,   19,   19,
       19,   19,   19,   19,   19,   20,   22,   23,   22,   24,
       22,   19,   22,   63,   35,   24,   63,   25,   35,   37,
       33,   23,   28,   23,   26,   24,   23,   25,   24,   37,
       33,   25,   29,   26,   28,   23,   25,   77,   29,   33,
       26,   25,   26,   30,   28,   77,   29,   64,   49,   34,
       30,   26,  798,   30,   30,   28,   36,   32,   64,   34,
       49,   30,   36,   32,   38,   30,   30,   32,   34,   69,
       39,   32,   41,   34,   38,   36,   32,   36,   38,   38,
       39,   38,   40,   52,   65,   41,   76,   38,   38,   39,

       38,   39,   69,   41,   46,   52,   40,   76,   65,   67,
       40,   46,   46,   46,   46,   46,   46,   46,   48,   48,
       48,   66,   48,   48,   48,   48,   48,   48,   48,   67,
       66,  113,   82,   48,   50,   50,   50,   50,   50,   50,
       50,   82,   50,  113,  797,   48,   51,   51,   51,   51,
       51,   51,   51,   53,   53,   53,   68,   53,   53,   53,
       53,   53,   53,   53,   68,   70,   54,   71,   53,   54,
       54,   54,   54,   54,   54,   54,   72,   74,   68,   73,
       53,   55,   55,   78,   70,   55,   55,   55,   55,   55,
       55,   55,   79,   75,   71,   81,   74,   73,   80,   72,

       83,   73,   75,   85,   86,   87,   88,   78,   84,   79,
       75,   75,   80,   75,   84,   90,   89,   81,   93,   91,
       83,   95,   98,   85,   87,   89,   93,   86,   88,   91,
       94,   95,   90,   96,   94,   97,   99,  100,  101,  103,
       98,   93,   97,   96,  102,  103,  104,  107,   94,  105,
      104,  109,  110,  102,  112,  100,  100,  107,   99,  108,
      101,  101,  112,  100,  104,  105,  110,  119,  108,  104,
      111,  114,  115,  109,  116,  117,  111,  112,  115,  118,
      122,  112,  117,  121,  119,  114,  120,  111,  111,  121,
      120,  124,  125,  118,  123,  116,  142,  121,  122,  142,

      123,  124,  128,  128,  796,  124,  125,  129,  129,  131,
      131,  131,  134,  135,  135,  147,  123,  132,  132,  132,
      132,  132,  132,  132,  134,  132,  133,  133,  133,  147,
      133,  133,  133,  133,  133,  133,  133,  168,  172,  137,
      146,  133,  137,  137,  137,  137,  137,  137,  137,  168,
      146,  172,  791,  133,  138,  138,  138,  138,  138,  138,
      138,  139,  139,  139,  139,  139,  139,  139,  140,  148,
      139,  140,  140,  140,  140,  140,  140,  140,  144,  148,
      150,  152,  153,  154,  144,  155,  153,  150,  156,  157,
      159,  152,  158,  154,  161,  160,  162,  164,  156,  163,

      158,  160,  165,  162,  167,  169,  170,  155,  171,  157,
      174,  176,  165,  173,  158,  175,  170,  161,  159,  163,
      164,  174,  173,  167,  177,  175,  177,  176,  177,  181,
      178,  179,  171,  180,  169,  182,  177,  181,  169,  183,
      184,  185,  186,  169,  178,  182,  187,  188,  178,  189,
      179,  183,  190,  185,  180,  189,  187,  186,  191,  192,
      193,  194,  195,  184,  193,  196,  190,  192,  194,  188,
      192,  197,  199,  198,  200,  202,  201,  203,  195,  191,
      204,  202,  205,  200,  204,  206,  196,  198,  205,  207,
      199,  208,  209,  210,  197,  201,  211,  212,  214,  213,

      203,  216,  215,  206,  217,  219,  209,  221,  218,  207,
      220,  235,  208,  213,  215,  210,  214,  212,  240,  211,
      217,  213,  218,  219,  216,  240,  220,  790,  222,  235,
      221,  222,  222,  222,  222,  222,  222,  222,  223,  223,
      223,  223,  223,  223,  223,  224,  224,  224,  224,  224,
      224,  224,  225,  225,  225,  225,  225,  225,  225,  226,
      226,  226,  226,  226,  226,  226,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228,  228,  229,  229,  230,
      230,  230,  230,  230,  230,  230,  234,  789,  228,  231,
      231,  231,  231,  231,  231,  231,  236,  237,  232,  242,

      228,  232,  232,  232,  232,  232,  232,  232,  234,  242,
      236,  243,  244,  245,  246,  247,  248,  249,  237,  247,
      250,  249,  254,  245,  252,  255,  256,  257,  244,  258,
      260,  259,  255,  264,  243,  261,  250,  246,  252,  261,
      248,  262,  263,  254,  264,  265,  266,  255,  256,  259,
      260,  262,  267,  257,  266,  258,  268,  267,  263,  269,
      270,  272,  271,  268,  273,  274,  275,  272,  277,  265,
      278,  279,  277,  280,  284,  282,  273,  269,  283,  280,
      290,  274,  289,  291,  270,  271,  282,  287,  283,  275,
      285,  286,  279,  284,  278,  292,  285,  286,  293,  290,

      294,  287,  293,  289,  295,  296,  291,  299,  297,  301,
      298,  302,  303,  306,  305,  304,  307,  299,  292,  296,
      308,  295,  298,  304,  309,  294,  297,  314,  312,  302,
      305,  306,  301,  311,  315,  303,  309,  314,  318,  307,
      312,  310,  308,  310,  315,  310,  310,  311,  788,  320,
      318,  317,  336,  310,  317,  317,  317,  317,  317,  317,
      317,  320,  318,  319,  319,  319,  319,  319,  319,  319,
      322,  322,  336,  320,  323,  323,  323,  323,  323,  323,
      323,  324,  324,  324,  324,  324,  324,  324,  326,  331,
      329,  326,  326,  326,  326,  326,  326,  326,  327,  329,

      327,  332,  334,  335,  337,  338,  339,  340,  334,  341,
      337,  332,  331,  335,  342,  343,  344,  346,  347,  341,
      348,  349,  339,  352,  338,  337,  351,  354,  353,  340,
      344,  355,  351,  342,  356,  357,  360,  358,  343,  362,
      355,  352,  363,  354,  348,  365,  349,  353,  359,  346,
      366,  369,  359,  360,  356,  357,  347,  358,  365,  367,
      370,  368,  362,  369,  371,  372,  373,  374,  363,  368,
      375,  359,  381,  366,  377,  376,  378,  380,  779,  367,
      373,  383,  381,  374,  377,  372,  371,  382,  370,  376,
      378,  377,  384,  375,  385,  387,  380,  382,  386,  387,

      383,  388,  389,  390,  385,  392,  391,  386,  393,  395,
      394,  384,  391,  388,  396,  397,  390,  401,  398,  395,
      397,  400,  396,  389,  394,  398,  457,  400,  392,  393,
      404,  404,  407,  407,  416,  401,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  411,  411,
      457,  405,  408,  408,  408,  408,  408,  408,  408,  406,
      417,  416,  769,  405,  409,  409,  409,  409,  409,  409,
      409,  406,  410,  410,  410,  410,  410,  410,  410,  410,
      414,  415,  418,  417,  414,  419,  420,  421,  415,  422,
      423,  419,  426,  424,  423,  427,  428,  429,  431,  422,

      418,  420,  433,  435,  434,  436,  437,  438,  433,  439,
      421,  424,  442,  435,  440,  426,  443,  445,  439,  431,
      441,  450,  427,  434,  440,  439,  447,  441,  451,  456,
      448,  442,  447,  452,  428,  453,  429,  436,  437,  438,
      448,  455,  458,  466,  450,  445,  459,  462,  464,  452,
      455,  463,  470,  467,  456,  453,  451,  467,  471,  443,
      472,  458,  463,  473,  459,  462,  466,  474,  471,  475,
      464,  476,  477,  473,  472,  470,  478,  479,  480,  480,
      480,  480,  480,  480,  480,  482,  482,  479,  474,  475,
      490,  476,  477,  491,  490,  767,  756,  491,  478,  481,

      481,  481,  481,  481,  481,  481,  481,  483,  483,  483,
      483,  483,  483,  483,  484,  484,  484,  484,  484,  484,
      484,  484,  486,  486,  486,  486,  486,  486,  486,  488,
      492,  489,  496,  497,  493,  498,  501,  500,  496,  498,
      502,  503,  504,  505,  507,  508,  488,  489,  493,  505,
      509,  512,  510,  492,  511,  514,  497,  500,  501,  513,
      515,  516,  503,  512,  517,  504,  510,  518,  511,  513,
      502,  518,  522,  523,  507,  508,  514,  524,  525,  526,
      509,  516,  527,  523,  528,  522,  517,  524,  528,  529,
      530,  532,  533,  531,  525,  529,  515,  526,  527,  531,

      534,  535,  533,  536,  530,  538,  539,  540,  542,  583,
      546,  751,  534,  583,  532,  556,  560,  542,  552,  535,
      546,  536,  543,  543,  543,  543,  543,  543,  543,  544,
      544,  544,  544,  544,  544,  544,  544,  538,  539,  540,
      545,  547,  548,  550,  551,  553,  552,  554,  555,  547,
      556,  557,  559,  561,  545,  560,  562,  557,  563,  564,
      548,  550,  565,  566,  568,  551,  563,  553,  569,  570,
      554,  572,  565,  574,  571,  559,  555,  572,  569,  570,
      575,  564,  571,  577,  566,  579,  578,  580,  582,  581,
      584,  574,  561,  587,  586,  562,  581,  585,  588,  579,

      584,  589,  578,  575,  580,  568,  578,  591,  593,  585,
      595,  577,  596,  594,  597,  598,  582,  586,  599,  600,
      596,  601,  602,  587,  604,  605,  606,  593,  588,  591,
      607,  589,  594,  595,  597,  598,  608,  609,  614,  619,
      611,  620,  617,  625,  621,  600,  622,  620,  624,  619,
      602,  623,  622,  607,  626,  601,  617,  614,  609,  608,
      621,  625,  599,  604,  605,  606,  611,  623,  624,  629,
      630,  631,  632,  633,  634,  626,  636,  637,  638,  639,
      640,  643,  633,  641,  644,  634,  650,  637,  638,  636,
      641,  645,  649,  652,  632,  651,  653,  656,  655,  660,

      640,  658,  657,  661,  662,  653,  650,  656,  629,  630,
      631,  652,  657,  643,  655,  651,  644,  663,  639,  665,
      658,  669,  664,  645,  670,  665,  668,  672,  671,  649,
      676,  663,  664,  673,  668,  674,  677,  678,  660,  684,
      680,  679,  661,  662,  683,  685,  686,  669,  671,  678,
      679,  680,  677,  672,  687,  683,  670,  688,  676,  673,
      689,  674,  690,  691,  692,  693,  694,  695,  696,  698,
      699,  684,  687,  701,  689,  700,  690,  685,  686,  698,
      688,  703,  704,  691,  705,  702,  694,  695,  696,  700,
      692,  702,  706,  699,  707,  708,  710,  693,  701,  711,

      707,  709,  712,  713,  706,  714,  715,  703,  704,  717,
      705,  708,  709,  719,  728,  749,  718,  721,  722,  725,
      710,  720,  717,  723,  729,  730,  725,  727,  712,  713,
      731,  714,  715,  711,  718,  720,  732,  721,  722,  719,
      733,  727,  735,  723,  736,  737,  738,  739,  742,  728,
      740,  741,  729,  743,  735,  744,  742,  745,  746,  730,
      750,  737,  747,  748,  731,  752,  753,  741,  736,  754,
      732,  755,  738,  739,  733,  757,  740,  758,  743,  759,
      760,  755,  761,  746,  762,  745,  763,  747,  748,  771,
      750,  764,  765,  770,  744,  766,  768,  778,  775,  752,

      753,  757,  772,  754,  773,  774,  758,  776,  777,  780,
      760,  771,  761,  781,  762,  782,  764,  765,  759,  763,
      766,  783,  770,  768,  772,  792,  773,  774,  775,  778,
      784,  793,  785,  786,  787,  794,  795,  776,  777,  734,
      726,  724,  716,  780,  697,  682,  681,  781,  675,  782,
      667,  666,  784,  783,  785,  786,  787,  659,  654,  792,
      648,  647,  646,  642,  795,  793,  635,  628,  627,  794,
      801,  801,  802,  802,  802,  618,  802,  616,  802,  802,
      803,  615,  613,  803,  612,  803,  803,  804,  610,  603,
      804,  805,  805,  805,  805,  806,  592,  590,  806,  807,

      576,  573,  807,  567,  807,  807,  808,  558,  549,  808,
      541,  808,  808,  809,  809,  810,  810,  537,  521,  810,
      811,  811,  520,  519,  811,  812,  812,  812,  812,  813,
      813,  813,  506,  813,  814,  814,  499,  495,  814,  815,
      494,  487,  815,  469,  815,  815,  816,  816,  817,  468,
      465,  817,  461,  817,  817,  818,  818,  460,  454,  818,
      819,  449,  446,  819,  444,  819,  819,  820,  432,  430,
      820,  425,  820,  820,  821,  821,  413,  412,  821,  822,
      822,  403,  402,  822,  823,  823,  824,  824,  399,  379,
      824,  825,  364,  361,  825,  350,  825,  825,  826,  826,

      345,  333,  826,  827,  827,  330,  328,  827,  828,  325,
      828,  828,  829,  829,  316,  313,  829,  830,  300,  830,
      830,  288,  281,  276,  253,  251,  241,  239,  238,  233,
      166,  151,  149,  145,  143,  136,  130,  106,   92,   62,
       61,   60,   44,   42,   17,   16,   10,    7,    5,    3,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800
    } ;

static grib_yy_state_type grib_yy_last_accepting_state;
static char *grib_yy_last_accepting_cpos;

extern int grib_yy_flex_debug;
int grib_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define grib_yymore() grib_yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *grib_yytext;
#line 1 "gribl.l"
/*
 * (C) Copyright 2005- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
 * virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
 */
#line 13 "gribl.l"
#include "grib_api_internal.h"
#include "grib_yacc.h"
#include <ctype.h>

extern int grib_yylineno;

/* Keep -Wall quiet */


/*

This is needed for implementing "include", otherwise
flex buffer optimization break the includes.

*/

#define YY_INPUT(buf,result,max_size) \
        { \
        int c = getc(grib_yyin); (void)max_size; \
        result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
        }


/*
#ifdef __GNUC__
#ifdef FLEX_SCANNER
void grib_yyunput (int c,char *buf_ptr  );
void _grib_ignore_grib_yyunput_unused_error() { grib_yyunput(0,0); }
#endif
#endif
*/

#ifdef __cplusplus
 #define GET_INPUT grib_yyinput
#else
 #define GET_INPUT input
#endif

#line 1202 "gribl.cc"
#line 1203 "gribl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int grib_yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int grib_yylex_destroy ( void );

int grib_yyget_debug ( void );

void grib_yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE grib_yyget_extra ( void );

void grib_yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *grib_yyget_in ( void );

void grib_yyset_in  ( FILE * _in_str  );

FILE *grib_yyget_out ( void );

void grib_yyset_out  ( FILE * _out_str  );

			grib_yy_size_t grib_yyget_leng ( void );

char *grib_yyget_text ( void );

int grib_yyget_lineno ( void );

void grib_yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int grib_yywrap ( void );
#else
extern int grib_yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    void grib_yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef grib_yytext_ptr
static void grib_yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int grib_yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int grib_yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( grib_yytext, (size_t) grib_yyleng, 1, grib_yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_is_interactive ) \
		{ \
		int c = '*'; \
		grib_yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( grib_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( grib_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (grib_yy_size_t) max_size, grib_yyin)) == 0 && ferror(grib_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(grib_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "grib_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef grib_yyterminate
#define grib_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) grib_yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int grib_yylex (void);

#define YY_DECL int grib_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after grib_yytext and grib_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	grib_yy_state_type grib_yy_current_state;
	char *grib_yy_cp, *grib_yy_bp;
	int grib_yy_act;
    
	if ( !(grib_yy_init) )
		{
		(grib_yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (grib_yy_start) )
			(grib_yy_start) = 1;	/* first start state */

		if ( ! grib_yyin )
			grib_yyin = stdin;

		if ( ! grib_yyout )
			grib_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			grib_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE );
		}

		grib_yy_load_buffer_state(  );
		}

	{
#line 71 "gribl.l"



#line 1424 "gribl.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		grib_yy_cp = (grib_yy_c_buf_p);

		/* Support of grib_yytext. */
		*grib_yy_cp = (grib_yy_hold_char);

		/* grib_yy_bp points to the position in grib_yy_ch_buf of the start of
		 * the current run.
		 */
		grib_yy_bp = grib_yy_cp;

		grib_yy_current_state = (grib_yy_start);
grib_yy_match:
		do
			{
			YY_CHAR grib_yy_c = grib_yy_ec[YY_SC_TO_UI(*grib_yy_cp)] ;
			if ( grib_yy_accept[grib_yy_current_state] )
				{
				(grib_yy_last_accepting_state) = grib_yy_current_state;
				(grib_yy_last_accepting_cpos) = grib_yy_cp;
				}
			while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
				{
				grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
				if ( grib_yy_current_state >= 801 )
					grib_yy_c = grib_yy_meta[grib_yy_c];
				}
			grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
			++grib_yy_cp;
			}
		while ( grib_yy_base[grib_yy_current_state] != 1951 );

grib_yy_find_action:
		grib_yy_act = grib_yy_accept[grib_yy_current_state];
		if ( grib_yy_act == 0 )
			{ /* have to back up */
			grib_yy_cp = (grib_yy_last_accepting_cpos);
			grib_yy_current_state = (grib_yy_last_accepting_state);
			grib_yy_act = grib_yy_accept[grib_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( grib_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*grib_yy_cp = (grib_yy_hold_char);
			grib_yy_cp = (grib_yy_last_accepting_cpos);
			grib_yy_current_state = (grib_yy_last_accepting_state);
			goto grib_yy_find_action;

case 1:
YY_RULE_SETUP
#line 74 "gribl.l"
return EQ     ;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 75 "gribl.l"
return GE     ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 76 "gribl.l"
return GT     ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 77 "gribl.l"
return LE     ;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "gribl.l"
return LT     ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "gribl.l"
return NE     ;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "gribl.l"
return NE     ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "gribl.l"
return BIT    ;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 82 "gribl.l"
return BITOFF ;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "gribl.l"
return IS   ;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "gribl.l"
return ISNOT ;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 86 "gribl.l"
return NOT   ;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "gribl.l"
return NOT   ;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "gribl.l"
return AND   ;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "gribl.l"
return AND   ;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 90 "gribl.l"
return OR   ;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 91 "gribl.l"
return OR   ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "gribl.l"
return NIL   ;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "gribl.l"
return DUMMY   ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 96 "gribl.l"
return SUBSTR   ;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 97 "gribl.l"
return CLOSE   ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 98 "gribl.l"
return LENGTH   ;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 99 "gribl.l"
return LOWERCASE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 100 "gribl.l"
return IF       ;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 101 "gribl.l"
return IF_TRANSIENT ;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 102 "gribl.l"
return ELSE       ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 103 "gribl.l"
return UNSIGNED ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 104 "gribl.l"
return ASCII    ;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 105 "gribl.l"
return BYTE    ;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 106 "gribl.l"
return LABEL    ;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 107 "gribl.l"
return LIST     ;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 108 "gribl.l"
return WHILE     ;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 109 "gribl.l"
return TEMPLATE ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 110 "gribl.l"
return TEMPLATE_NOFAIL ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 111 "gribl.l"
return TRIGGER ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 112 "gribl.l"
return END      ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 113 "gribl.l"
return IBMFLOAT ;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 114 "gribl.l"
return FLOAT ;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 115 "gribl.l"
return SIGNED   ;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 116 "gribl.l"
return CODETABLE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 117 "gribl.l"
return GETENV;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 118 "gribl.l"
return SMART_TABLE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 119 "gribl.l"
return DICTIONARY;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 120 "gribl.l"
return CODETABLE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 121 "gribl.l"
return FLAG     ;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 122 "gribl.l"
return LOOKUP   ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "gribl.l"
return GROUP  ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "gribl.l"
return NON_ALPHA   ;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "gribl.l"
return META     ;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 126 "gribl.l"
return PADTOEVEN    ;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "gribl.l"
return PADTO    ;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "gribl.l"
return PADTOMULTIPLE    ;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "gribl.l"
return PAD      ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "gribl.l"
return SECTION_PADDING      ;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 131 "gribl.l"
return MESSAGE      ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 132 "gribl.l"
return MESSAGE_COPY      ;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "gribl.l"
return ALIAS    ;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "gribl.l"
return UNALIAS    ;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "gribl.l"
return POS      ;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "gribl.l"
return INTCONST ;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "gribl.l"
return TRANS    ;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "gribl.l"
return STRING_TYPE   ;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 139 "gribl.l"
return LONG_TYPE   ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "gribl.l"
return DOUBLE_TYPE   ;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 141 "gribl.l"
return ITERATOR ;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "gribl.l"
return NEAREST ;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "gribl.l"
return BOX ;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "gribl.l"
return KSEC    ;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 145 "gribl.l"
return FLAGBIT    ;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 146 "gribl.l"
return KSEC1EXPVER    ;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 147 "gribl.l"
return MODIFY    ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "gribl.l"
return G1_HALF_BYTE    ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "gribl.l"
return G1_MESSAGE_LENGTH    ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 151 "gribl.l"
return G1_SECTION4_LENGTH    ;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 153 "gribl.l"
return EXPORT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "gribl.l"
return REMOVE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 155 "gribl.l"
return RENAME;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 156 "gribl.l"
return IS_IN_LIST;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 157 "gribl.l"
return IS_IN_DICT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 158 "gribl.l"
return TO_INTEGER;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 159 "gribl.l"
return TO_STRING;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 160 "gribl.l"
return SEX2DEC;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 161 "gribl.l"
return IS_INTEGER;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 162 "gribl.l"
return IS_INTEGER;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 164 "gribl.l"
return SECTION_LENGTH     ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 166 "gribl.l"
return ASSERT    ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 168 "gribl.l"
return READ_ONLY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 169 "gribl.l"
return NO_COPY;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 170 "gribl.l"
return EDITION_SPECIFIC;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 171 "gribl.l"
return DUMP;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 172 "gribl.l"
return NO_FAIL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 173 "gribl.l"
return HIDDEN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 174 "gribl.l"
return CAN_BE_MISSING;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 175 "gribl.l"
return MISSING;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 176 "gribl.l"
return CONSTRAINT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 177 "gribl.l"
return OVERRIDE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 178 "gribl.l"
return COPY_OK;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 180 "gribl.l"
return UINT8;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 181 "gribl.l"
return INT8;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 183 "gribl.l"
return UINT16;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 184 "gribl.l"
return INT16;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 185 "gribl.l"
return UINT16_LITTLE_ENDIAN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 186 "gribl.l"
return INT16_LITTLE_ENDIAN;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 188 "gribl.l"
return UINT32;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 189 "gribl.l"
return INT32;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 190 "gribl.l"
return UINT32_LITTLE_ENDIAN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 191 "gribl.l"
return INT32_LITTLE_ENDIAN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 193 "gribl.l"
return UINT64;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 194 "gribl.l"
return INT64;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 195 "gribl.l"
return UINT64_LITTLE_ENDIAN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 196 "gribl.l"
return INT64_LITTLE_ENDIAN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 198 "gribl.l"
return BLOB;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 200 "gribl.l"
return SET;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 201 "gribl.l"
return SET_NOFAIL;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 202 "gribl.l"
return WHEN;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 203 "gribl.l"
return CASE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 204 "gribl.l"
return SWITCH;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 205 "gribl.l"
return DEFAULT;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 206 "gribl.l"
return CONCEPT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 207 "gribl.l"
return CONCEPT_NOFAIL;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 208 "gribl.l"
return HASH_ARRAY;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 209 "gribl.l"
return WRITE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 210 "gribl.l"
return APPEND;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 211 "gribl.l"
return PRINT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 212 "gribl.l"
return SKIP;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 214 "gribl.l"
{
          int c,q;
          while((c = GET_INPUT()) && isspace(c) && c != '\n') ;
          q = c; /* the quote */

          grib_yyleng = 0;
          while((c = GET_INPUT()) && c != q && c != '\n')
                {
                    if(c == '\\') grib_yytext[grib_yyleng++] = GET_INPUT();
                    else grib_yytext[grib_yyleng++] =  c;
                }

                grib_yytext[grib_yyleng++] = 0;

          grib_parser_include(grib_yytext);
         }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "gribl.l"
{
           int c,q = grib_yytext[0];

           grib_yyleng = 0;

           while((c = GET_INPUT()) && c != q )
           {
               if(c == '\\') grib_yytext[grib_yyleng++] = GET_INPUT();
               else {
									 grib_yytext[grib_yyleng++] =  c;
									 if (c =='\n') grib_yylineno++;
							 }
            }

            grib_yytext[grib_yyleng++] = 0;
            grib_yylval.str = strdup(grib_yytext);
            return STRING;
        }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 250 "gribl.l"
{
           int c;
           unsigned long val = 0;

           while((c = GET_INPUT()) && c != '`' && c != '\n')
           {
                val <<= 8;
                val |= c;
           }
           grib_yylval.lval = val;
           return INTEGER;
        }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 264 "gribl.l"
{ grib_yylval.str = strdup(grib_yytext); return IDENT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 265 "gribl.l"
{ grib_yylval.lval = atol((const char *)grib_yytext); return INTEGER; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 266 "gribl.l"
{ grib_yylval.lval = atol((const char *)grib_yytext); return INTEGER; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 267 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 268 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 269 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 272 "gribl.l"
{
           int c;
           while((c = GET_INPUT()) && (c != '\n')){}

        grib_yylineno++;
        }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 278 "gribl.l"
;
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 279 "gribl.l"
grib_yylineno++;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 283 "gribl.l"
return *grib_yytext;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 285 "gribl.l"
ECHO;
	YY_BREAK
#line 2225 "gribl.cc"
case YY_STATE_EOF(INITIAL):
	grib_yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int grib_yy_amount_of_matched_text = (int) (grib_yy_cp - (grib_yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*grib_yy_cp = (grib_yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed grib_yyin at a new source and called
			 * grib_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(grib_yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_input_file = grib_yyin;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for grib_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since grib_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (grib_yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] )
			{ /* This was really a NUL. */
			grib_yy_state_type grib_yy_next_state;

			(grib_yy_c_buf_p) = (grib_yytext_ptr) + grib_yy_amount_of_matched_text;

			grib_yy_current_state = grib_yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * grib_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			grib_yy_next_state = grib_yy_try_NUL_trans( grib_yy_current_state );

			grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;

			if ( grib_yy_next_state )
				{
				/* Consume the NUL. */
				grib_yy_cp = ++(grib_yy_c_buf_p);
				grib_yy_current_state = grib_yy_next_state;
				goto grib_yy_match;
				}

			else
				{
				grib_yy_cp = (grib_yy_c_buf_p);
				goto grib_yy_find_action;
				}
			}

		else switch ( grib_yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(grib_yy_did_buffer_switch_on_eof) = 0;

				if ( grib_yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * grib_yy_get_next_buffer() to have set up
					 * grib_yytext, we can now set up
					 * grib_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(grib_yy_c_buf_p) = (grib_yytext_ptr) + YY_MORE_ADJ;

					grib_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (grib_yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(grib_yy_c_buf_p) =
					(grib_yytext_ptr) + grib_yy_amount_of_matched_text;

				grib_yy_current_state = grib_yy_get_previous_state(  );

				grib_yy_cp = (grib_yy_c_buf_p);
				grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;
				goto grib_yy_match;

			case EOB_ACT_LAST_MATCH:
				(grib_yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)];

				grib_yy_current_state = grib_yy_get_previous_state(  );

				grib_yy_cp = (grib_yy_c_buf_p);
				grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;
				goto grib_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of grib_yylex */

/* grib_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int grib_yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf;
	char *source = (grib_yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (grib_yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (grib_yy_c_buf_p) - (grib_yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((grib_yy_c_buf_p) - (grib_yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars) = 0;

	else
		{
			grib_yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int grib_yy_c_buf_p_offset =
				(int) ((grib_yy_c_buf_p) - b->grib_yy_ch_buf);

			if ( b->grib_yy_is_our_buffer )
				{
				grib_yy_size_t new_size = b->grib_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->grib_yy_buf_size += b->grib_yy_buf_size / 8;
				else
					b->grib_yy_buf_size *= 2;

				b->grib_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					grib_yyrealloc( (void *) b->grib_yy_ch_buf,
							 (grib_yy_size_t) (b->grib_yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->grib_yy_ch_buf = NULL;

			if ( ! b->grib_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(grib_yy_c_buf_p) = &b->grib_yy_ch_buf[grib_yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[number_to_move]),
			(grib_yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	if ( (grib_yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			grib_yyrestart( grib_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((grib_yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		grib_yy_size_t new_size = (grib_yy_n_chars) + number_to_move + ((grib_yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf = (char *) grib_yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf, (grib_yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size = (int) (new_size - 2);
	}

	(grib_yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(grib_yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[0];

	return ret_val;
}

/* grib_yy_get_previous_state - get the state just before the EOB char was reached */

    static grib_yy_state_type grib_yy_get_previous_state (void)
{
	grib_yy_state_type grib_yy_current_state;
	char *grib_yy_cp;
    
	grib_yy_current_state = (grib_yy_start);

	for ( grib_yy_cp = (grib_yytext_ptr) + YY_MORE_ADJ; grib_yy_cp < (grib_yy_c_buf_p); ++grib_yy_cp )
		{
		YY_CHAR grib_yy_c = (*grib_yy_cp ? grib_yy_ec[YY_SC_TO_UI(*grib_yy_cp)] : 1);
		if ( grib_yy_accept[grib_yy_current_state] )
			{
			(grib_yy_last_accepting_state) = grib_yy_current_state;
			(grib_yy_last_accepting_cpos) = grib_yy_cp;
			}
		while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
			{
			grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
			if ( grib_yy_current_state >= 801 )
				grib_yy_c = grib_yy_meta[grib_yy_c];
			}
		grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
		}

	return grib_yy_current_state;
}

/* grib_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = grib_yy_try_NUL_trans( current_state );
 */
    static grib_yy_state_type grib_yy_try_NUL_trans  (grib_yy_state_type grib_yy_current_state )
{
	int grib_yy_is_jam;
    	char *grib_yy_cp = (grib_yy_c_buf_p);

	YY_CHAR grib_yy_c = 1;
	if ( grib_yy_accept[grib_yy_current_state] )
		{
		(grib_yy_last_accepting_state) = grib_yy_current_state;
		(grib_yy_last_accepting_cpos) = grib_yy_cp;
		}
	while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
		{
		grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
		if ( grib_yy_current_state >= 801 )
			grib_yy_c = grib_yy_meta[grib_yy_c];
		}
	grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
	grib_yy_is_jam = (grib_yy_current_state == 800);

		return grib_yy_is_jam ? 0 : grib_yy_current_state;
}

#ifndef YY_NO_UNPUT

    void grib_yyunput (int c, char * grib_yy_bp )
{
	char *grib_yy_cp;
    
    grib_yy_cp = (grib_yy_c_buf_p);

	/* undo effects of setting up grib_yytext */
	*grib_yy_cp = (grib_yy_hold_char);

	if ( grib_yy_cp < YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		grib_yy_size_t number_to_move = (grib_yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf )
			*--dest = *--source;

		grib_yy_cp += (int) (dest - source);
		grib_yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars =
			(grib_yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size;

		if ( grib_yy_cp < YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--grib_yy_cp = (char) c;

	(grib_yytext_ptr) = grib_yy_bp;
	(grib_yy_hold_char) = *grib_yy_cp;
	(grib_yy_c_buf_p) = grib_yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int grib_yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(grib_yy_c_buf_p) = (grib_yy_hold_char);

	if ( *(grib_yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* grib_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (grib_yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] )
			/* This was really a NUL. */
			*(grib_yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			grib_yy_size_t offset = (grib_yy_c_buf_p) - (grib_yytext_ptr);
			++(grib_yy_c_buf_p);

			switch ( grib_yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because grib_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					grib_yyrestart( grib_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( grib_yywrap(  ) )
						return 0;

					if ( ! (grib_yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return grib_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(grib_yy_c_buf_p) = (grib_yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (grib_yy_c_buf_p);	/* cast for 8-bit char's */
	*(grib_yy_c_buf_p) = '\0';	/* preserve grib_yytext */
	(grib_yy_hold_char) = *++(grib_yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void grib_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        grib_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE );
	}

	grib_yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	grib_yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void grib_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		grib_yypop_buffer_state();
	 *		grib_yypush_buffer_state(new_buffer);
     */
	grib_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(grib_yy_c_buf_p) = (grib_yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos = (grib_yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	grib_yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (grib_yywrap()) processing, but the only time this flag
	 * is looked at is after grib_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(grib_yy_did_buffer_switch_on_eof) = 1;
}

static void grib_yy_load_buffer_state  (void)
{
    	(grib_yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars;
	(grib_yytext_ptr) = (grib_yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos;
	grib_yyin = YY_CURRENT_BUFFER_LVALUE->grib_yy_input_file;
	(grib_yy_hold_char) = *(grib_yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE grib_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) grib_yyalloc( sizeof( struct grib_yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_create_buffer()" );

	b->grib_yy_buf_size = size;

	/* grib_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->grib_yy_ch_buf = (char *) grib_yyalloc( (grib_yy_size_t) (b->grib_yy_buf_size + 2)  );
	if ( ! b->grib_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_create_buffer()" );

	b->grib_yy_is_our_buffer = 1;

	grib_yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with grib_yy_create_buffer()
 * 
 */
    void grib_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->grib_yy_is_our_buffer )
		grib_yyfree( (void *) b->grib_yy_ch_buf  );

	grib_yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a grib_yyrestart() or at EOF.
 */
    static void grib_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	grib_yy_flush_buffer( b );

	b->grib_yy_input_file = file;
	b->grib_yy_fill_buffer = 1;

    /* If b is the current buffer, then grib_yy_init_buffer was _probably_
     * called from grib_yyrestart() or through grib_yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->grib_yy_bs_lineno = 1;
        b->grib_yy_bs_column = 0;
    }

        b->grib_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void grib_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->grib_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->grib_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->grib_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->grib_yy_buf_pos = &b->grib_yy_ch_buf[0];

	b->grib_yy_at_bol = 1;
	b->grib_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		grib_yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void grib_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	grib_yyensure_buffer_stack();

	/* This block is copied from grib_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(grib_yy_c_buf_p) = (grib_yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos = (grib_yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(grib_yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from grib_yy_switch_to_buffer. */
	grib_yy_load_buffer_state(  );
	(grib_yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void grib_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	grib_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((grib_yy_buffer_stack_top) > 0)
		--(grib_yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		grib_yy_load_buffer_state(  );
		(grib_yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void grib_yyensure_buffer_stack (void)
{
	grib_yy_size_t num_to_alloc;
    
	if (!(grib_yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(grib_yy_buffer_stack) = (struct grib_yy_buffer_state**)grib_yyalloc
								(num_to_alloc * sizeof(struct grib_yy_buffer_state*)
								);
		if ( ! (grib_yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yyensure_buffer_stack()" );

		memset((grib_yy_buffer_stack), 0, num_to_alloc * sizeof(struct grib_yy_buffer_state*));

		(grib_yy_buffer_stack_max) = num_to_alloc;
		(grib_yy_buffer_stack_top) = 0;
		return;
	}

	if ((grib_yy_buffer_stack_top) >= ((grib_yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		grib_yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (grib_yy_buffer_stack_max) + grow_size;
		(grib_yy_buffer_stack) = (struct grib_yy_buffer_state**)grib_yyrealloc
								((grib_yy_buffer_stack),
								num_to_alloc * sizeof(struct grib_yy_buffer_state*)
								);
		if ( ! (grib_yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((grib_yy_buffer_stack) + (grib_yy_buffer_stack_max), 0, grow_size * sizeof(struct grib_yy_buffer_state*));
		(grib_yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE grib_yy_scan_buffer  (char * base, grib_yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) grib_yyalloc( sizeof( struct grib_yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_scan_buffer()" );

	b->grib_yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->grib_yy_buf_pos = b->grib_yy_ch_buf = base;
	b->grib_yy_is_our_buffer = 0;
	b->grib_yy_input_file = NULL;
	b->grib_yy_n_chars = b->grib_yy_buf_size;
	b->grib_yy_is_interactive = 0;
	b->grib_yy_at_bol = 1;
	b->grib_yy_fill_buffer = 0;
	b->grib_yy_buffer_status = YY_BUFFER_NEW;

	grib_yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to grib_yylex() will
 * scan from a @e copy of @a str.
 * @param grib_yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       grib_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE grib_yy_scan_string (const char * grib_yystr )
{
    
	return grib_yy_scan_bytes( grib_yystr, (int) strlen(grib_yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to grib_yylex() will
 * scan from a @e copy of @a bytes.
 * @param grib_yybytes the byte buffer to scan
 * @param _grib_yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE grib_yy_scan_bytes  (const char * grib_yybytes, grib_yy_size_t  _grib_yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	grib_yy_size_t n;
	grib_yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (grib_yy_size_t) (_grib_yybytes_len + 2);
	buf = (char *) grib_yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_scan_bytes()" );

	for ( i = 0; i < _grib_yybytes_len; ++i )
		buf[i] = grib_yybytes[i];

	buf[_grib_yybytes_len] = buf[_grib_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = grib_yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in grib_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->grib_yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void grib_yynoreturn grib_yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine grib_yyless() so it works in section 3 code. */

#undef grib_yyless
#define grib_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up grib_yytext. */ \
        grib_yy_size_t grib_yyless_macro_arg = (n); \
        YY_LESS_LINENO(grib_yyless_macro_arg);\
		grib_yytext[grib_yyleng] = (grib_yy_hold_char); \
		(grib_yy_c_buf_p) = grib_yytext + grib_yyless_macro_arg; \
		(grib_yy_hold_char) = *(grib_yy_c_buf_p); \
		*(grib_yy_c_buf_p) = '\0'; \
		grib_yyleng = grib_yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int grib_yyget_lineno  (void)
{
    
    return grib_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *grib_yyget_in  (void)
{
        return grib_yyin;
}

/** Get the output stream.
 * 
 */
FILE *grib_yyget_out  (void)
{
        return grib_yyout;
}

/** Get the length of the current token.
 * 
 */
grib_yy_size_t grib_yyget_leng  (void)
{
        return grib_yyleng;
}

/** Get the current token.
 * 
 */

char *grib_yyget_text  (void)
{
        return grib_yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void grib_yyset_lineno (int  _line_number )
{
    
    grib_yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see grib_yy_switch_to_buffer
 */
void grib_yyset_in (FILE *  _in_str )
{
        grib_yyin = _in_str ;
}

void grib_yyset_out (FILE *  _out_str )
{
        grib_yyout = _out_str ;
}

int grib_yyget_debug  (void)
{
        return grib_yy_flex_debug;
}

void grib_yyset_debug (int  _bdebug )
{
        grib_yy_flex_debug = _bdebug ;
}

static int grib_yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from grib_yylex_destroy(), so don't allocate here.
     */

    (grib_yy_buffer_stack) = NULL;
    (grib_yy_buffer_stack_top) = 0;
    (grib_yy_buffer_stack_max) = 0;
    (grib_yy_c_buf_p) = NULL;
    (grib_yy_init) = 0;
    (grib_yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    grib_yyin = stdin;
    grib_yyout = stdout;
#else
    grib_yyin = NULL;
    grib_yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * grib_yylex_init()
     */
    return 0;
}

/* grib_yylex_destroy is for both reentrant and non-reentrant scanners. */
int grib_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		grib_yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		grib_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	grib_yyfree((grib_yy_buffer_stack) );
	(grib_yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * grib_yylex() is called, initialization will occur. */
    grib_yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef grib_yytext_ptr
static void grib_yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int grib_yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *grib_yyalloc (grib_yy_size_t  size )
{
			return malloc(size);
}

void *grib_yyrealloc  (void * ptr, grib_yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void grib_yyfree (void * ptr )
{
			free( (char *) ptr );	/* see grib_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "grib_yytables"

#line 285 "gribl.l"



