#line 1 "gribl.cc"

#line 3 "gribl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define grib_yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define grib_yynoreturn __attribute__((__noreturn__))
#else
#define grib_yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (grib_yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((grib_yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE grib_yyrestart( grib_yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(grib_yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct grib_yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t grib_yy_size_t;
#endif

extern grib_yy_size_t grib_yyleng;

extern FILE *grib_yyin, *grib_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define grib_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up grib_yytext. */ \
        int grib_yyless_macro_arg = (n); \
        YY_LESS_LINENO(grib_yyless_macro_arg);\
		*grib_yy_cp = (grib_yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(grib_yy_c_buf_p) = grib_yy_cp = grib_yy_bp + grib_yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up grib_yytext again */ \
		} \
	while ( 0 )
#define unput(c) grib_yyunput( c, (grib_yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct grib_yy_buffer_state
	{
	FILE *grib_yy_input_file;

	char *grib_yy_ch_buf;		/* input buffer */
	char *grib_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int grib_yy_buf_size;

	/* Number of characters read into grib_yy_ch_buf, not including EOB
	 * characters.
	 */
	grib_yy_size_t grib_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int grib_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int grib_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int grib_yy_at_bol;

    int grib_yy_bs_lineno; /**< The line count. */
    int grib_yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int grib_yy_fill_buffer;

	int grib_yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via grib_yyrestart()), so that the user can continue scanning by
	 * just pointing grib_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t grib_yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t grib_yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * grib_yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (grib_yy_buffer_stack) \
                          ? (grib_yy_buffer_stack)[(grib_yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (grib_yy_buffer_stack)[(grib_yy_buffer_stack_top)]

/* grib_yy_hold_char holds the character lost when grib_yytext is formed. */
static char grib_yy_hold_char;
static grib_yy_size_t grib_yy_n_chars;		/* number of characters read into grib_yy_ch_buf */
grib_yy_size_t grib_yyleng;

/* Points to current character in buffer. */
static char *grib_yy_c_buf_p = NULL;
static int grib_yy_init = 0;		/* whether we need to initialize */
static int grib_yy_start = 0;	/* start state number */

/* Flag which is used to allow grib_yywrap()'s to do buffer switches
 * instead of setting up a fresh grib_yyin.  A bit of a hack ...
 */
static int grib_yy_did_buffer_switch_on_eof;

void grib_yyrestart ( FILE *input_file  );
void grib_yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE grib_yy_create_buffer ( FILE *file, int size  );
void grib_yy_delete_buffer ( YY_BUFFER_STATE b  );
void grib_yy_flush_buffer ( YY_BUFFER_STATE b  );
void grib_yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void grib_yypop_buffer_state ( void );

static void grib_yyensure_buffer_stack ( void );
static void grib_yy_load_buffer_state ( void );
static void grib_yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER grib_yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE grib_yy_scan_buffer ( char *base, grib_yy_size_t size  );
YY_BUFFER_STATE grib_yy_scan_string ( const char *grib_yy_str  );
YY_BUFFER_STATE grib_yy_scan_bytes ( const char *bytes, grib_yy_size_t len  );

void *grib_yyalloc ( grib_yy_size_t  );
void *grib_yyrealloc ( void *, grib_yy_size_t  );
void grib_yyfree ( void *  );

#define grib_yy_new_buffer grib_yy_create_buffer
#define grib_yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        grib_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->grib_yy_is_interactive = is_interactive; \
	}
#define grib_yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        grib_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->grib_yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->grib_yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *grib_yyin = NULL, *grib_yyout = NULL;

typedef int grib_yy_state_type;

extern int grib_yylineno;
int grib_yylineno = 1;

extern char *grib_yytext;
#ifdef grib_yytext_ptr
#undef grib_yytext_ptr
#endif
#define grib_yytext_ptr grib_yytext

static grib_yy_state_type grib_yy_get_previous_state ( void );
static grib_yy_state_type grib_yy_try_NUL_trans ( grib_yy_state_type current_state  );
static int grib_yy_get_next_buffer ( void );
static void grib_yynoreturn grib_yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up grib_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(grib_yytext_ptr) = grib_yy_bp; \
	grib_yyleng = (grib_yy_size_t) (grib_yy_cp - grib_yy_bp); \
	(grib_yy_hold_char) = *grib_yy_cp; \
	*grib_yy_cp = '\0'; \
	(grib_yy_c_buf_p) = grib_yy_cp;
#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct grib_yy_trans_info
	{
	flex_int32_t grib_yy_verify;
	flex_int32_t grib_yy_nxt;
	};
static const flex_int16_t grib_yy_accept[798] =
    {   0,
      135,  135,  139,  137,  135,  136,   12,  126,  134,  137,
      137,  137,  137,  129,    5,  137,    3,  128,  128,  128,
      127,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  137,   18,  135,    6,    0,   14,  130,  132,    0,
        0,  131,  129,  128,  128,    4,    7,    1,    2,    0,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,   23,  128,   10,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,   15,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   16,    0,    0,    0,    0,
        0,    0,  133,  131,    0,  128,  128,    0,    0,  128,
        0,  128,   24,  128,   13,  128,  128,  128,    8,  128,
       66,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   35,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,   98,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   11,  128,  128,   52,  128,  128,  128,  128,

      128,  128,  112,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  133,    0,  132,    0,    0,    0,    0,    0,  131,
      128,  128,  128,  128,  128,  128,  111,   28,  128,  115,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   89,
      128,   25,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       67,  128,  128,   30,  128,  128,  128,  128,   48,  128,
      128,  128,  128,  128,  128,   17,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  124,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      114,  128,  128,  128,  128,    0,    0,    0,    0,    0,
        0,  131,  128,  128,  128,   56,  128,   27,  128,  128,
       20,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   44,  128,  128,  128,  128,   46,  128,  128,
      128,  128,  128,  100,  104,  108,  128,  128,  128,  128,
       29,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,   50,  128,  123,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   97,  128,  128,   31,  121,

        0,    0,    0,    0,  128,    0,    0,  128,  122,   85,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,   74,  128,  128,  128,  128,   40,  128,   91,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       21,  128,   45,  128,  128,   70,  128,  128,  128,  128,
        9,  128,  128,  128,  128,  128,   75,   76,  128,  128,
      128,   38,  128,  128,   19,  116,  128,  128,  128,  128,
      128,   99,  103,  107,  128,  128,    0,    0,    0,    0,
        0,  128,  128,   93,  128,  128,  128,  118,  128,  128,
       96,  117,  128,  128,  128,   68,  128,  128,  128,  128,

      128,  128,  125,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,   54,   65,   87,   90,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,   34,  128,  128,  128,   57,  128,    0,
        0,  128,  128,  128,  128,   59,  128,  128,  128,  128,
      128,  128,  128,  128,   36,  128,  128,  128,  128,  128,
      128,  128,  128,   64,  128,  128,  128,  128,  128,   95,
      128,  128,   58,  128,  128,  128,  128,  128,  128,   32,
      128,  128,  128,  128,  128,  128,   26,  128,   39,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   37,

      128,  128,  128,  128,  128,  128,   83,  128,   62,   22,
      128,   47,   49,  128,   86,  128,  128,  128,  128,  128,
      128,  128,  128,   80,   60,  128,  128,  128,  128,  128,
      128,   94,  128,  128,  128,  128,  128,  128,  120,  128,
      128,  128,   78,   77,   82,  128,  128,  128,  128,  128,
      113,  128,  128,  128,  128,   79,  128,  128,  128,  128,
      128,  128,   42,   63,  128,  128,  128,  128,  128,  128,
      128,   69,  128,  128,  128,  128,  128,   41,   61,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,   55,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   51,  128,  128,  128,  128,  128,  128,  128,
       92,  128,  119,  128,  128,  128,  128,  128,  128,  128,
       84,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   53,  128,   33,  128,  128,
      128,  128,   88,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,   43,  128,   72,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   73,  128,  128,  128,  128,
      128,  128,  128,  128,  102,  106,  110,   81,  128,  128,
      128,  128,  101,  105,  109,   71,    0

    } ;

static const YY_CHAR grib_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    1,
        1,    1,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   13,   18,   13,   19,   13,    1,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   24,   23,
       25,   23,   26,   23,   23,   23,   27,   28,   23,   23,
       23,   23,   29,   23,   23,   23,   23,   23,   23,   23,
        1,    1,    1,    1,   30,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   23,   41,   42,   43,   44,
       45,   46,   23,   47,   48,   49,   50,   51,   52,   53,
       54,   23,    1,   55,    1,   56,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR grib_yy_meta[57] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    6,    6,    6,    6,    6,    6,    1,
        7,    1,    8,    9,    8,    8,    8,    8,    8,    8,
        1,    8,    8,    8,    8,    9,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1,    1
    } ;

static const flex_int16_t grib_yy_base[828] =
    {   0,
        0,    0, 1944, 1945, 1941, 1945, 1921, 1945,   44, 1934,
       51,   58,    0,   69,   68, 1919, 1918,   81,   96,   76,
     1945,   75,   92,   94,  102,  109,   66,  119,  117,  128,
       55,  142,  105,  134,   78,  141,  104,  149,  155,  167,
      157, 1883, 1945, 1935, 1945,  199, 1945,  210,  135,  222,
      234,  170,  245,  257,  273, 1945, 1945, 1945, 1945, 1914,
     1925, 1908,   98,  132,  169,  196,  184,  231,  154,  240,
      242,  251,  254,  252,  268,  171,  122,  258,  267,  273,
      270,  207,  275,  283,  294,  279,  280,  281,  291,  290,
      294, 1907,  293,  305,  296,  308,  310,  297,  311,  312,

      313,  314,  319,  322,  321, 1906,  324,  320,  327,  328,
      341,  343,  206,  332,  344,  339,  348,  353,  352,  357,
      362,  354,  365,  363,  364, 1945,    0,  391,  396, 1910,
      398,  401,  414,  410,  401, 1920,  426,  438,  445,  455,
        0,  449, 1903,  450, 1902,  411,  386,  451, 1901,  453,
     1900,  454,  455,  457,  440,  458,  463,  465,  395,  466,
      469,  470,  471,  474,  475, 1899,  476,  478,  495,  484,
      480,  409,  489,  482,  486,  499,  513,  488,  500,  510,
      509,  511,  507,  514,  516,  522,  520,  527,  524,  525,
      528,  537,  540,  529,  534,  535,  543,  544,  550,  548,

      554,  549,  552,  563,  553,  561,  564,  551,  566,  568,
      570,  573,  574,  577,  575,  578,  579,  582,  580,  576,
      617,  624,  631,  638,  645,  652,  663,  600,  663,  675,
      687, 1898,  659,  669,  658,  670, 1897, 1896,  682, 1895,
      683,  684,  586,  685,  686,  688,  690,  694,  696, 1894,
      697, 1893,  699,  701,  716,  718,  719,  706,  705,  713,
      716,  715,  710,  718,  735,  746,  748,  733,  734,  597,
      748,  737,  738, 1892,  740,  741,  743,  746, 1891,  745,
      747,  749,  754,  763,  759, 1890,  750,  755,  762,  766,
      772,  767,  770,  777,  775,  778,  784, 1889,  779,  780,

      781,  788,  783,  782,  786,  795,  801,  815,  797,  806,
     1888,  810,  812, 1903,  837,  833,  845,  853,    0,  857,
      857,  865, 1900,  877,  814, 1881,  862, 1880,  859,  873,
     1875,  872,  874,  860,  875,  823,  876,  877,  879,  885,
      886,  887, 1872,  904,  906,  907,  893, 1871,  894,  895,
      897,  898,  902,  919,  921,  922,  908,  907,  910,  933,
     1867,  919,  921,  922,  927,  929,  930,  934,  937,  936,
      938,  939,  945,  951,  946, 1866,  947,  953,  955,  948,
      952,  964,  940,  969,  970,  972,  975,  977,  976,  979,
      978,  980,  997, 1002, 1003, 1877,  995,  984, 1859, 1858,

     1013, 1020, 1028, 1032, 1032, 1044, 1053, 1028, 1855, 1854,
     1047, 1048, 1029, 1049, 1050, 1052, 1054, 1053, 1057, 1059,
     1060, 1848, 1061, 1078, 1080, 1081, 1847, 1066, 1843, 1071,
      998, 1070, 1089, 1090, 1091, 1079, 1081, 1083, 1082, 1101,
     1842, 1086, 1837, 1092, 1093, 1835, 1094, 1096, 1097, 1099,
     1834, 1100, 1108, 1110, 1111, 1118, 1830, 1828, 1120, 1112,
     1115, 1827, 1116, 1121, 1824, 1823, 1122, 1131, 1126, 1132,
     1127, 1145, 1151, 1159, 1144, 1146, 1180, 1188, 1167, 1195,
     1203,    0, 1210, 1818, 1147, 1204, 1153, 1154, 1205, 1207,
     1816, 1815, 1159, 1206, 1208, 1809, 1226, 1225, 1227, 1213,

     1214, 1216, 1807, 1231, 1233, 1234, 1219, 1224, 1223, 1152,
     1225, 1242, 1232, 1227, 1236, 1806, 1803, 1802, 1242, 1243,
     1244, 1250, 1239, 1251, 1256, 1258, 1259, 1263, 1261, 1265,
     1268, 1270, 1271, 1798, 1288, 1290, 1292, 1789, 1277, 1303,
     1323, 1283, 1307, 1279, 1281, 1788, 1282, 1298, 1301, 1302,
     1319, 1321, 1301, 1321, 1784, 1318, 1338, 1339, 1341, 1328,
     1330, 1332, 1334, 1783, 1347, 1335, 1337, 1338, 1343, 1776,
     1339, 1340, 1774, 1348, 1350, 1344, 1351, 1353, 1354, 1365,
     1367, 1359, 1356, 1389, 1390, 1391, 1773, 1378, 1769, 1380,
     1383, 1384, 1381, 1386, 1388,  676, 1401, 1403, 1390, 1767,

     1407, 1408, 1409, 1394, 1396, 1395, 1766, 1413, 1763, 1762,
     1401, 1755, 1754, 1398, 1750, 1414, 1409, 1410, 1422, 1413,
     1425, 1433, 1427, 1748, 1747, 1450, 1451, 1452, 1437, 1438,
     1439, 1743, 1440, 1442, 1444, 1457, 1459, 1465, 1741, 1462,
     1471, 1473, 1733, 1731, 1730, 1474, 1461, 1462, 1465, 1460,
     1729, 1468, 1466, 1467, 1471, 1728, 1480, 1486, 1488, 1479,
     1486, 1485, 1727, 1721, 1492, 1504, 1510, 1513, 1514, 1515,
     1517, 1736, 1502, 1504, 1506, 1507, 1519, 1718, 1717, 1510,
     1521, 1528, 1529, 1515, 1523, 1522, 1528, 1545, 1547, 1548,
     1550, 1551, 1554, 1716, 1540, 1539, 1547, 1557, 1553, 1559,

     1564, 1567, 1556, 1565, 1560, 1552, 1583, 1586, 1588, 1589,
     1591, 1595, 1713, 1580, 1578, 1597, 1583, 1598, 1602, 1604,
     1712, 1585, 1711, 1589, 1600, 1603, 1606, 1610, 1611, 1616,
     1709, 1609, 1627, 1610, 1628, 1629, 1630, 1616, 1617, 1634,
     1636, 1638, 1639, 1643, 1646, 1708, 1647, 1707, 1649, 1652,
     1653, 1641, 1706, 1658, 1660, 1661, 1662, 1663, 1665, 1669,
     1672, 1673, 1674, 1654, 1676, 1294, 1678, 1679, 1682, 1688,
     1690, 1681, 1685, 1691, 1694, 1177, 1680, 1696, 1705, 1706,
     1709, 1713, 1718, 1719, 1176, 1001,  673,  497, 1708, 1716,
     1717, 1720,  372,  235,  153,   97, 1945, 1754, 1762, 1769,

     1773, 1777, 1781, 1788, 1795, 1797, 1805, 1810, 1811, 1819,
     1824, 1828, 1830, 1837, 1845, 1849, 1856, 1861, 1866, 1868,
     1876, 1880, 1888, 1893, 1894, 1902, 1903
    } ;

static const flex_int16_t grib_yy_def[828] =
    {   0,
      797,    1,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  798,  799,  797,  797,  797,  800,  800,   19,
      797,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,  797,  797,  797,  797,  797,  797,  797,  801,  802,
      797,  803,  799,  804,  804,  797,  797,  797,  797,  797,
      805,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  805,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  797,  806,  807,  808,  809,
      810,  802,  797,  803,  811,  812,  804,  797,  797,  812,
      813,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,  805,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
      814,  797,  797,  797,  797,  797,  810,  815,  797,  797,
      816,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  805,  805,  805,   19,   19,   19,
       19,   19,   19,   19,  805,  805,  805,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,  817,  814,  818,  797,  819,  820,  821,
      797,  797,  822,  816,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,  805,  805,  805,   19,   19,   19,   19,
       19,   19,   19,  805,  805,  805,   19,   19,   19,  805,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,  805,  805,  805,  805,   19,   19,   19,   19,

      823,  797,  819,  824,  825,  797,  797,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,  805,  805,  805,   19,   19,   19,   19,
       19,   19,  805,  805,  805,   19,   19,   19,   19,  805,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,  805,  805,  805,   19,   19,  797,  797,  826,  797,
      797,  827,  825,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,  805,  805,  805,   19,

       19,   19,   19,  805,  805,  805,   19,   19,   19,   19,
       19,  805,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  805,  805,  805,   19,   19,  797,
      797,   19,   19,   19,   19,   19,   19,   19,   19,   19,
      805,  805,  805,   19,   19,   19,  805,  805,  805,   19,
       19,   19,   19,   19,  805,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,  805,  805,  805,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  805,  805,  805,   19,   19,

      805,  805,  805,   19,   19,   19,   19,  805,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,  805,  805,  805,   19,   19,
       19,   19,   19,   19,   19,  805,  805,  805,   19,  805,
      805,  805,   19,   19,   19,  805,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,  805,  805,  805,   19,
       19,   19,   19,   19,   19,  805,  805,  805,  805,  805,
      805,  805,   19,   19,   19,   19,   19,   19,   19,   19,
      805,  805,  805,   19,   19,   19,   19,  805,  805,  805,
      805,  805,  805,   19,   19,   19,   19,  805,   19,  805,

      805,  805,   19,   19,   19,   19,  805,  805,  805,  805,
      805,  805,   19,   19,   19,  805,   19,  805,  805,  805,
       19,   19,   19,   19,  805,  805,  805,  805,  805,  805,
       19,   19,  805,   19,  805,  805,  805,   19,   19,  805,
      805,  805,  805,  805,  805,   19,  805,   19,  805,  805,
      805,   19,   19,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,   19,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,    0,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797
    } ;

static const flex_int16_t grib_yy_nxt[2002] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    8,   11,   11,
       12,   13,   14,   14,   14,   14,   14,   14,   14,   15,
       16,   17,   18,   18,   18,   18,   19,   18,   18,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       18,   41,   18,   18,   42,   43,   46,   46,   46,   46,
       46,   46,   46,   48,   48,   48,   48,   48,   48,   48,
       49,   49,   49,   49,   49,   49,   49,   51,   51,   52,
       62,   53,   53,   53,   53,   53,   53,   53,   56,   57,
       60,   62,   55,   61,   61,   61,   61,   61,   61,   61,

       62,   62,   96,   62,   55,   60,   60,   84,   61,   61,
       61,   61,   61,   61,   61,   64,   65,   62,   66,   62,
       67,   63,   68,   62,  106,   73,  142,   62,  107,   62,
       62,   69,   85,   70,   62,   74,   71,   76,   75,  111,
      101,   77,   62,   80,   62,   72,   78,   62,   88,  102,
       81,   79,   82,   62,   86,  161,   89,   62,  129,   62,
       90,   83,   60,   91,   92,   87,   62,   62,  143,  103,
      129,   93,  108,   97,   62,   94,   95,   98,  104,   62,
       62,   99,   62,  105,  112,  109,  100,  110,  113,  114,
      119,  115,   62,  135,   62,  124,   62,  116,  117,  120,

      118,  121,  149,  125,  127,  135,  122,  160,  144,   62,
      123,   46,   46,   46,   46,   46,   46,   46,   51,   51,
       52,   62,   48,   48,   48,   48,   48,   48,   48,  146,
      145,   62,   62,  128,  130,  130,  130,  130,  130,  130,
      130,  166,  131,  205,   60,  128,  133,  133,  133,  133,
      133,  133,  133,   51,   51,   52,   62,   53,   53,   53,
       53,   53,   53,   53,  147,   62,   60,   62,   55,  136,
      136,  136,  136,  136,  136,  136,   62,   62,  148,   62,
       55,  138,  139,   62,  150,  140,  140,  140,  140,  140,
      140,  140,   62,   62,  151,   62,  155,  153,   62,  152,

       62,  154,  156,   60,   62,   62,   62,  162,   62,  163,
      157,  158,  164,  159,  168,   62,   62,  165,   62,   62,
      167,   62,   62,  169,  171,  173,  176,  170,  172,  175,
       62,  179,  174,   62,  178,   62,   62,   62,   62,   62,
      182,  177,  181,  180,   62,   62,   62,   62,  189,   62,
      190,  191,   62,   62,  196,  184,  185,   62,  183,  195,
      187,  188,  194,  186,   62,  192,   62,  198,   62,   62,
      193,  206,  199,   62,  197,  207,  202,   62,   62,   62,
      209,   60,   62,  200,  201,  208,  212,   62,   62,   62,
       62,  203,  210,  213,  211,  204,  216,  215,  218,  138,

      138,  214,  219,  220,  223,  223,  225,  225,  226,  229,
      229,   62,  217,  130,  130,  130,  130,  130,  130,  130,
       62,  131,   51,   51,   52,  235,  133,  133,  133,  133,
      133,  133,  133,  228,   62,   60,   62,  128,  136,  136,
      136,  136,  136,  136,  136,  228,  234,  260,  246,  128,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,   60,   62,  141,  140,  140,  140,
      140,  140,  140,  140,   62,   62,   62,  232,   62,   62,
       62,  233,   62,   62,  239,  237,  236,  241,   62,  238,
       62,   62,  240,  242,   62,   62,   62,  247,  244,   62,

       62,   62,  249,   62,   60,   62,   60,   62,  243,   62,
      252,   62,  245,   62,   62,  254,  250,  248,  262,  258,
      253,  263,  251,  261,   62,   62,  265,  268,  266,  259,
      267,  269,   62,  255,   62,   62,   62,  256,   62,   62,
      264,   62,  257,  271,  272,   62,  270,   62,  273,   62,
       62,  275,   62,   62,   62,  274,  276,  277,  279,   62,
       62,  282,   62,  280,  283,   62,  284,  278,   62,   62,
      286,  281,  285,   62,   62,   62,   62,   62,   62,   62,
      287,  295,  289,  288,  291,  293,   62,  290,   62,   62,
      300,   62,  292,   62,  296,   62,  297,  294,   62,   62,

       62,   62,   62,   62,   62,   62,  298,   62,  321,  321,
      299,   62,  304,  301,  307,  303,  302,  306,  310,  309,
      305,  312,   62,  308,  313,  311,   60,  333,  359,  314,
      314,  314,  314,  314,  314,  314,  222,  222,  222,  222,
      222,  222,  222,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  227,  227,  227,
      227,  227,  227,  227,  316,  316,  316,  316,  316,  316,
      316,  317,  317,  318,  319,  230,  230,  230,  230,  230,
      230,  230,   60,   62,   62,   60,  320,  230,  230,  230,
      230,  230,  230,  230,   62,   62,   60,  328,  320,  323,

      323,  323,  323,  323,  323,  323,  326,   62,   62,   62,
       62,   62,  327,   62,  330,   62,  329,  336,  331,   62,
      334,   62,   62,  338,   62,   60,   62,   60,   60,  636,
       62,   62,  332,  342,  335,   62,  340,  339,   62,  337,
       62,   62,  349,   62,   60,  341,  352,  344,  343,  347,
      348,  350,  354,  345,  346,   60,  351,   60,   62,   62,
      355,  360,   62,   62,  356,   62,   62,  353,   62,  363,
       62,   62,   62,   62,   62,   62,  357,  366,  361,   62,
       62,  367,  368,  358,   62,  370,  362,   62,   62,  365,
      364,   62,   62,  369,  371,   62,  373,   62,  372,  374,

       62,  377,   62,   62,   62,   62,   62,   62,   62,   62,
      375,   62,  379,   62,  376,  382,  380,  378,  381,  383,
       62,  387,   62,  385,  388,  389,   62,  384,  393,  386,
      394,   62,  395,  396,  390,   62,  397,   62,  392,   62,
       62,  408,  391,  398,  319,  399,   60,  400,   62,  314,
      314,  314,  314,  314,  314,  314,  401,  402,  402,  402,
      402,  402,  402,  402,  319,  406,  406,  417,  401,  322,
      322,  322,  322,  322,  322,  322,  404,  322,  322,  322,
      322,  322,  322,  322,   62,   62,   60,   62,  404,  323,
      323,  323,  323,  323,  323,  323,  409,   62,   62,   62,

       62,   62,   62,  412,   62,  414,  415,  410,  411,  413,
       62,   62,   62,   60,  420,   60,   60,  418,   62,   62,
       62,  416,   62,   62,  419,  428,  423,   62,   60,  421,
       60,   60,   62,   62,  422,   62,  432,  436,  429,  431,
      426,  430,   60,  427,   62,  424,   62,   62,  433,  438,
      434,  435,   62,  425,   62,   62,  437,  441,  439,   62,
      444,   62,   62,   62,   62,   62,  445,  443,  440,  442,
       62,   62,   62,   62,  462,  449,   62,   62,   62,  450,
       62,  447,  448,  446,  452,  455,  453,  451,  457,   62,
      458,  456,  459,  454,   62,   62,  460,   62,  463,  461,

       62,   62,   62,   62,   62,   62,   60,  464,  467,   62,
       60,   60,   60,  466,  472,  471,  473,  470,  465,  474,
       62,  477,  477,   62,  468,  469,  475,  476,  317,  317,
      318,  319,  402,  402,  402,  402,  402,  402,  402,  319,
      480,  480,  502,  320,  482,  482,  482,  482,  482,  482,
      482,  479,  484,   62,   62,  320,  407,  407,  407,  407,
      407,  407,  407,  479,  319,  407,  407,  407,  407,  407,
      407,  407,   62,   62,   62,   62,  485,   62,   62,   62,
      486,  487,   62,  490,   62,   62,   62,   60,  494,   60,
       60,   62,  493,  489,  491,   62,   62,  488,   60,   60,

       60,  492,  501,  495,   62,  503,   62,   62,   62,  496,
       60,   62,  500,  507,  497,  510,  509,   62,   62,   62,
      508,   62,   62,  514,   62,   62,  511,  498,  515,  499,
      504,  505,  506,   62,  520,   62,   62,   62,  518,  513,
       62,   62,  516,   62,  519,   62,   62,   62,  526,  517,
      529,   62,   62,  512,   60,  523,   62,   62,  521,  522,
       60,  524,  527,  525,  528,  532,  531,  533,   60,   62,
      530,   62,   62,  534,  535,  540,  540,   62,   62,   62,
      536,  539,  544,  545,   62,   60,   60,  563,  537,  542,
      548,  538,  478,  478,  478,  478,  478,  478,  478,  319,

      478,  478,  478,  478,  478,  478,  478,  481,  481,  481,
      481,  481,  481,  481,  319,  481,  481,  481,  481,  481,
      481,  481,  482,  482,  482,  482,  482,  482,  482,   62,
       62,   62,   62,   62,   60,   60,   60,  550,   62,   62,
       60,   62,   60,   60,   62,  543,  547,  556,   62,   62,
       62,   60,   62,  546,  549,  551,  552,   62,  560,  554,
      562,   62,  555,  561,   62,  568,  553,   62,   62,   62,
      557,  564,  558,  559,  567,   62,   62,  566,  570,  571,
      569,   62,  573,   62,   62,  575,   62,  565,   62,  576,
       62,  572,  574,   62,  578,   62,   62,   60,  577,   60,

      580,   60,   62,   60,   62,  581,   62,   62,   62,  579,
       60,  587,  590,  582,  583,  541,  541,  541,  541,  541,
      541,  541,  588,   62,  591,  592,   62,   62,   60,  584,
       60,  585,   62,  586,  319,  541,  541,  541,  541,  541,
      541,  541,  589,   62,  593,  598,   62,   60,   60,  595,
       60,  596,  599,   62,  594,   62,   60,   62,  597,   62,
       62,  604,   62,   62,   62,   62,  600,  606,   62,   62,
      609,  611,  610,   62,  612,   62,   62,  605,   62,   62,
      607,   62,  613,  618,   62,  620,  601,  602,  614,  603,
       62,  616,   62,  619,  622,  617,  624,  608,   60,   60,

       60,  615,  623,   62,  625,   62,   62,  621,   62,   62,
       60,   62,   60,   62,  633,   62,   60,   60,   60,   62,
       62,   62,   60,   62,  630,  629,   62,  631,  626,  627,
      628,  634,  632,  635,   62,   62,  637,  648,   62,   62,
      650,  645,  643,  639,  644,  647,  638,   62,  646,  649,
       62,  651,   62,  652,  653,  640,  641,  642,   62,   60,
       60,   60,   62,   62,   62,   62,   60,   62,   60,   62,
      654,   60,  661,  656,   60,  662,  655,  664,  663,  665,
       60,  668,   60,   60,  660,   62,   62,   62,  667,   60,
       62,   62,   62,   62,  676,   60,   62,   60,  657,  658,

      659,  678,  679,  669,   62,  666,  673,  674,  675,  677,
       62,   62,  670,   60,  671,  680,  686,   62,  684,   60,
      672,  685,   60,   60,   60,  687,   60,   62,  681,   62,
       60,   62,   62,  698,  682,   62,  683,   60,   60,  688,
       62,  697,  690,  696,   62,  695,  699,   62,   62,  691,
      692,  689,  693,   62,   60,  694,   60,   60,  703,   60,
       60,  705,  700,   60,   62,   62,   60,  706,   60,  701,
      702,  704,   62,   60,  707,  713,   60,   62,   62,  710,
      711,   62,  708,  712,  717,   62,  715,  714,  724,  709,
       62,  716,   60,  721,  718,   60,  722,   60,   60,  719,

       60,  723,  720,   62,   60,   62,   60,   60,   62,   60,
       62,   60,   60,   60,   62,   60,  725,  738,  731,   60,
       60,  732,  734,  727,  728,   60,  729,  735,  739,  726,
      730,  736,  733,  737,   62,   62,   60,   60,   60,   60,
      741,   62,   62,   60,  740,   60,  746,   60,   60,  742,
      753,  748,   60,  743,  744,   60,   60,  752,   60,  745,
      747,   60,   60,  749,  750,  751,   62,   60,  754,   60,
       60,   60,   60,  757,   60,  756,  764,  758,   60,   62,
      759,   60,   60,   60,  755,   60,  760,   60,   60,   60,
       60,   60,  761,  765,   60,  762,  763,   60,  766,   60,

       60,  768,  769,   60,  770,   60,  772,  773,  774,  767,
      777,  771,  775,  778,   60,   60,  776,   60,   60,  779,
      781,  780,   60,  785,  782,   60,   60,   60,   60,   60,
      783,   62,   62,   62,   62,  784,   62,   62,   62,  786,
      789,   62,   62,   62,  790,   60,   62,  788,  787,  791,
      792,  793,   62,   62,   62,   62,   62,  796,   62,  794,
      795,   50,   50,   54,   54,   54,   62,   54,   62,   54,
       54,   62,   62,   62,   62,   62,   62,   62,   49,   62,
       62,   49,  132,  132,  132,  132,  134,   62,   62,  134,
      137,   62,   62,  137,   62,  137,  137,   61,   62,   62,

       61,   62,   61,   61,  221,  221,  222,  222,   62,   62,
      222,  224,  224,   62,   62,  224,  130,  130,  130,  130,
      227,  227,  227,   62,  227,  230,  230,   62,   62,  230,
      136,   62,   62,  136,   62,  136,  136,  231,  231,  315,
       62,   62,  315,   62,  315,  315,  322,  322,   62,   62,
      322,  324,   62,   62,  324,   62,  324,  324,  314,   62,
       62,  314,   62,  314,  314,  316,  316,   62,   62,  316,
      403,  403,   62,   62,  403,  405,  405,  407,  407,   62,
       62,  407,  323,   62,   62,  323,   60,  323,  323,  478,
      478,   62,   62,  478,  481,  481,   62,   62,  481,  483,

       62,  483,  483,  541,  541,   62,   62,  541,  482,   60,
      482,  482,   60,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,  325,   62,   62,   62,   62,   62,   60,
      131,   62,   62,   62,   60,  141,   44,  126,   59,   58,
       47,   45,   44,  797,    3,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,

      797
    } ;

static const flex_int16_t grib_yy_chk[2002] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,    9,    9,    9,
        9,    9,    9,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   12,   12,   14,   14,   14,
       31,   14,   14,   14,   14,   14,   14,   14,   15,   15,
       18,   27,   14,   18,   18,   18,   18,   18,   18,   18,

       22,   20,   31,   35,   14,   19,  796,   27,   19,   19,
       19,   19,   19,   19,   19,   20,   22,   23,   22,   24,
       22,   19,   22,   63,   35,   24,   63,   25,   35,   37,
       33,   23,   28,   23,   26,   24,   23,   25,   24,   37,
       33,   25,   29,   26,   28,   23,   25,   77,   29,   33,
       26,   25,   26,   30,   28,   77,   29,   64,   49,   34,
       30,   26,  795,   30,   30,   28,   36,   32,   64,   34,
       49,   30,   36,   32,   38,   30,   30,   32,   34,   69,
       39,   32,   41,   34,   38,   36,   32,   36,   38,   38,
       39,   38,   40,   52,   65,   41,   76,   38,   38,   39,

       38,   39,   69,   41,   46,   52,   40,   76,   65,   67,
       40,   46,   46,   46,   46,   46,   46,   46,   48,   48,
       48,   66,   48,   48,   48,   48,   48,   48,   48,   67,
       66,  113,   82,   48,   50,   50,   50,   50,   50,   50,
       50,   82,   50,  113,  794,   48,   51,   51,   51,   51,
       51,   51,   51,   53,   53,   53,   68,   53,   53,   53,
       53,   53,   53,   53,   68,   70,   54,   71,   53,   54,
       54,   54,   54,   54,   54,   54,   72,   74,   68,   73,
       53,   55,   55,   78,   70,   55,   55,   55,   55,   55,
       55,   55,   79,   75,   71,   81,   74,   73,   80,   72,

       83,   73,   75,   85,   86,   87,   88,   78,   84,   79,
       75,   75,   80,   75,   84,   90,   89,   81,   93,   91,
       83,   95,   98,   85,   87,   89,   93,   86,   88,   91,
       94,   95,   90,   96,   94,   97,   99,  100,  101,  102,
       98,   93,   97,   96,  103,  108,  105,  104,  102,  107,
      103,  104,  109,  110,  108,  100,  100,  114,   99,  107,
      101,  101,  105,  100,  116,  104,  111,  110,  112,  115,
      104,  114,  111,  117,  109,  115,  112,  119,  118,  122,
      117,  793,  120,  111,  111,  116,  120,  121,  124,  125,
      123,  112,  118,  121,  119,  112,  123,  122,  124,  128,

      128,  121,  124,  125,  129,  129,  131,  131,  131,  135,
      135,  147,  123,  132,  132,  132,  132,  132,  132,  132,
      159,  132,  133,  133,  133,  147,  133,  133,  133,  133,
      133,  133,  133,  134,  172,  137,  146,  133,  137,  137,
      137,  137,  137,  137,  137,  134,  146,  172,  159,  133,
      138,  138,  138,  138,  138,  138,  138,  139,  139,  139,
      139,  139,  139,  139,  140,  155,  139,  140,  140,  140,
      140,  140,  140,  140,  142,  144,  148,  142,  150,  152,
      153,  144,  154,  156,  153,  150,  148,  155,  157,  152,
      158,  160,  154,  156,  161,  162,  163,  160,  158,  164,

      165,  167,  162,  168,  169,  171,  788,  174,  157,  170,
      165,  175,  158,  178,  173,  168,  163,  161,  174,  170,
      167,  175,  164,  173,  176,  179,  177,  178,  177,  171,
      177,  178,  183,  169,  181,  180,  182,  169,  177,  184,
      176,  185,  169,  180,  181,  187,  179,  186,  182,  189,
      190,  184,  188,  191,  194,  183,  185,  186,  188,  195,
      196,  191,  192,  189,  191,  193,  192,  187,  197,  198,
      194,  190,  193,  200,  202,  199,  208,  203,  205,  201,
      195,  203,  197,  196,  199,  201,  206,  198,  204,  207,
      208,  209,  200,  210,  204,  211,  205,  202,  212,  213,

      215,  220,  214,  216,  217,  219,  206,  218,  228,  228,
      207,  243,  212,  209,  214,  211,  210,  213,  217,  216,
      212,  219,  270,  215,  220,  218,  221,  243,  270,  221,
      221,  221,  221,  221,  221,  221,  222,  222,  222,  222,
      222,  222,  222,  223,  223,  223,  223,  223,  223,  223,
      224,  224,  224,  224,  224,  224,  224,  225,  225,  225,
      225,  225,  225,  225,  226,  226,  226,  226,  226,  226,
      226,  227,  227,  227,  227,  229,  229,  229,  229,  229,
      229,  229,  787,  235,  233,  596,  227,  230,  230,  230,
      230,  230,  230,  230,  234,  236,  231,  235,  227,  231,

      231,  231,  231,  231,  231,  231,  233,  239,  241,  242,
      244,  245,  234,  246,  239,  247,  236,  246,  241,  248,
      244,  249,  251,  248,  253,  255,  254,  256,  257,  596,
      259,  258,  242,  254,  245,  263,  251,  249,  260,  247,
      262,  261,  260,  264,  265,  253,  263,  255,  254,  258,
      259,  261,  265,  256,  257,  266,  262,  267,  268,  269,
      266,  271,  272,  273,  267,  275,  276,  264,  277,  275,
      280,  278,  281,  271,  282,  287,  268,  278,  272,  283,
      288,  280,  281,  269,  285,  283,  273,  289,  284,  277,
      276,  290,  292,  282,  284,  293,  287,  291,  285,  288,

      295,  291,  294,  296,  299,  300,  301,  304,  303,  297,
      289,  305,  293,  302,  290,  296,  294,  292,  295,  297,
      306,  302,  309,  300,  303,  304,  307,  299,  308,  301,
      308,  310,  308,  308,  305,  312,  309,  313,  307,  325,
      308,  325,  306,  310,  316,  312,  315,  313,  336,  315,
      315,  315,  315,  315,  315,  315,  316,  317,  317,  317,
      317,  317,  317,  317,  318,  320,  320,  336,  316,  321,
      321,  321,  321,  321,  321,  321,  318,  322,  322,  322,
      322,  322,  322,  322,  329,  334,  324,  327,  318,  324,
      324,  324,  324,  324,  324,  324,  327,  332,  330,  333,

      335,  337,  338,  332,  339,  334,  335,  329,  330,  333,
      340,  341,  342,  344,  339,  345,  346,  337,  347,  349,
      350,  335,  351,  352,  338,  349,  342,  353,  354,  340,
      355,  356,  358,  357,  341,  359,  353,  357,  350,  352,
      346,  351,  360,  347,  362,  344,  363,  364,  354,  358,
      355,  356,  365,  345,  366,  367,  357,  362,  359,  368,
      365,  370,  369,  371,  372,  383,  366,  364,  360,  363,
      373,  375,  377,  380,  383,  370,  374,  381,  378,  371,
      379,  368,  369,  367,  373,  375,  374,  372,  378,  382,
      379,  377,  380,  374,  384,  385,  381,  386,  384,  382,

      387,  389,  388,  391,  390,  392,  393,  385,  388,  398,
      786,  394,  395,  387,  393,  392,  394,  391,  386,  395,
      397,  401,  401,  431,  389,  390,  397,  398,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  403,
      404,  404,  431,  402,  405,  405,  405,  405,  405,  405,
      405,  403,  408,  408,  413,  402,  406,  406,  406,  406,
      406,  406,  406,  403,  407,  407,  407,  407,  407,  407,
      407,  407,  411,  412,  414,  415,  411,  416,  418,  417,
      412,  413,  419,  416,  420,  421,  423,  424,  420,  425,
      426,  428,  419,  415,  417,  432,  430,  414,  433,  434,

      435,  418,  430,  421,  436,  432,  437,  439,  438,  423,
      440,  442,  428,  436,  424,  438,  437,  444,  445,  447,
      436,  448,  449,  444,  450,  452,  439,  425,  445,  426,
      433,  434,  435,  453,  452,  454,  455,  460,  449,  442,
      461,  463,  447,  456,  450,  459,  464,  467,  460,  448,
      464,  469,  471,  440,  472,  455,  468,  470,  453,  454,
      473,  456,  461,  459,  463,  469,  468,  470,  474,  475,
      467,  476,  485,  471,  472,  479,  479,  510,  487,  488,
      473,  476,  487,  488,  493,  785,  776,  510,  474,  485,
      493,  475,  477,  477,  477,  477,  477,  477,  477,  478,

      478,  478,  478,  478,  478,  478,  478,  480,  480,  480,
      480,  480,  480,  480,  481,  481,  481,  481,  481,  481,
      481,  481,  483,  483,  483,  483,  483,  483,  483,  486,
      489,  494,  490,  495,  498,  497,  499,  495,  500,  501,
      504,  502,  505,  506,  507,  486,  490,  502,  509,  508,
      511,  512,  514,  489,  494,  497,  498,  513,  507,  500,
      509,  515,  501,  508,  523,  515,  499,  519,  520,  521,
      504,  511,  505,  506,  514,  522,  524,  513,  520,  521,
      519,  525,  523,  526,  527,  525,  529,  512,  528,  526,
      530,  522,  524,  531,  528,  532,  533,  535,  527,  536,

      530,  537,  539,  766,  544,  531,  545,  547,  542,  529,
      553,  539,  544,  532,  533,  540,  540,  540,  540,  540,
      540,  540,  542,  548,  545,  547,  549,  550,  551,  535,
      552,  536,  543,  537,  541,  541,  541,  541,  541,  541,
      541,  541,  543,  556,  548,  553,  554,  557,  558,  550,
      559,  551,  554,  560,  549,  561,  565,  562,  552,  563,
      566,  560,  567,  568,  571,  572,  556,  562,  569,  576,
      566,  568,  567,  574,  569,  575,  577,  561,  578,  579,
      563,  583,  571,  576,  582,  578,  557,  558,  572,  559,
      580,  575,  581,  577,  580,  575,  582,  565,  584,  585,

      586,  574,  581,  588,  583,  590,  593,  579,  591,  592,
      597,  594,  598,  595,  593,  599,  601,  602,  603,  604,
      606,  605,  608,  614,  590,  588,  611,  591,  584,  585,
      586,  594,  592,  595,  617,  618,  597,  614,  620,  616,
      617,  606,  604,  599,  605,  611,  598,  619,  608,  616,
      621,  618,  623,  619,  620,  601,  602,  603,  622,  626,
      627,  628,  629,  630,  631,  633,  636,  634,  637,  635,
      621,  640,  630,  623,  638,  631,  622,  634,  633,  635,
      641,  638,  642,  646,  629,  650,  647,  648,  637,  657,
      649,  653,  654,  652,  650,  658,  655,  659,  626,  627,

      628,  653,  654,  640,  660,  636,  647,  648,  649,  652,
      662,  661,  641,  666,  642,  655,  662,  665,  660,  667,
      646,  661,  668,  669,  670,  665,  671,  673,  657,  674,
      681,  675,  676,  677,  658,  680,  659,  682,  683,  666,
      684,  676,  668,  675,  677,  674,  680,  686,  685,  669,
      670,  667,  671,  687,  688,  673,  689,  690,  684,  691,
      692,  686,  681,  693,  696,  695,  698,  687,  700,  682,
      683,  685,  697,  701,  688,  695,  702,  706,  699,  691,
      692,  703,  689,  693,  699,  705,  697,  696,  706,  690,
      704,  698,  707,  703,  700,  708,  704,  709,  710,  701,

      711,  705,  702,  715,  712,  714,  716,  718,  717,  725,
      722,  719,  726,  720,  724,  727,  707,  722,  714,  728,
      729,  715,  717,  709,  710,  730,  711,  718,  724,  708,
      712,  719,  716,  720,  732,  734,  733,  735,  736,  737,
      726,  738,  739,  740,  725,  741,  732,  742,  743,  727,
      739,  734,  744,  728,  729,  745,  747,  738,  749,  730,
      733,  750,  751,  735,  736,  737,  752,  754,  740,  755,
      756,  757,  758,  743,  759,  742,  752,  744,  760,  764,
      745,  761,  762,  763,  741,  765,  747,  767,  768,  777,
      772,  769,  749,  754,  773,  750,  751,  770,  755,  771,

      774,  757,  758,  775,  759,  778,  761,  762,  763,  756,
      768,  760,  765,  769,  779,  780,  767,  789,  781,  770,
      772,  771,  782,  777,  773,  790,  791,  783,  784,  792,
      774,  753,  748,  746,  731,  775,  723,  721,  713,  778,
      781,  694,  679,  678,  782,  672,  664,  780,  779,  783,
      784,  789,  663,  656,  651,  645,  644,  792,  643,  790,
      791,  798,  798,  799,  799,  799,  639,  799,  632,  799,
      799,  800,  625,  624,  800,  615,  800,  800,  801,  613,
      612,  801,  802,  802,  802,  802,  803,  610,  609,  803,
      804,  607,  600,  804,  589,  804,  804,  805,  587,  573,

      805,  570,  805,  805,  806,  806,  807,  807,  564,  555,
      807,  808,  808,  546,  538,  808,  809,  809,  809,  809,
      810,  810,  810,  534,  810,  811,  811,  518,  517,  811,
      812,  516,  503,  812,  496,  812,  812,  813,  813,  814,
      492,  491,  814,  484,  814,  814,  815,  815,  466,  465,
      815,  816,  462,  458,  816,  457,  816,  816,  817,  451,
      446,  817,  443,  817,  817,  818,  818,  441,  429,  818,
      819,  819,  427,  422,  819,  820,  820,  821,  821,  410,
      409,  821,  822,  400,  399,  822,  396,  822,  822,  823,
      823,  376,  361,  823,  824,  824,  348,  343,  824,  825,

      331,  825,  825,  826,  826,  328,  326,  826,  827,  323,
      827,  827,  314,  311,  298,  286,  279,  274,  252,  250,
      240,  238,  237,  232,  166,  151,  149,  145,  143,  136,
      130,  106,   92,   62,   61,   60,   44,   42,   17,   16,
       10,    7,    5,    3,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,

      797
    } ;

static grib_yy_state_type grib_yy_last_accepting_state;
static char *grib_yy_last_accepting_cpos;

extern int grib_yy_flex_debug;
int grib_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define grib_yymore() grib_yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *grib_yytext;
#line 1 "gribl.l"
/*
 * (C) Copyright 2005- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
 * virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
 */
#line 13 "gribl.l"
#include "grib_api_internal.h"
#include "grib_yacc.h"
#include <ctype.h>

extern int grib_yylineno;

/* Keep -Wall quiet */


/*

This is needed for implementing "include", otherwise
flex buffer optimization break the includes.

*/

#define YY_INPUT(buf,result,max_size) \
        { \
        int c = getc(grib_yyin); (void)max_size; \
        result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
        }


/*
#ifdef __GNUC__
#ifdef FLEX_SCANNER
void grib_yyunput (int c,char *buf_ptr  );
void _grib_ignore_grib_yyunput_unused_error() { grib_yyunput(0,0); }
#endif
#endif
*/

#ifdef __cplusplus
 #define GET_INPUT grib_yyinput
#else
 #define GET_INPUT input
#endif

#line 1202 "gribl.cc"
#line 1203 "gribl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int grib_yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int grib_yylex_destroy ( void );

int grib_yyget_debug ( void );

void grib_yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE grib_yyget_extra ( void );

void grib_yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *grib_yyget_in ( void );

void grib_yyset_in  ( FILE * _in_str  );

FILE *grib_yyget_out ( void );

void grib_yyset_out  ( FILE * _out_str  );

			grib_yy_size_t grib_yyget_leng ( void );

char *grib_yyget_text ( void );

int grib_yyget_lineno ( void );

void grib_yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int grib_yywrap ( void );
#else
extern int grib_yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    void grib_yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef grib_yytext_ptr
static void grib_yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int grib_yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int grib_yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( grib_yytext, (size_t) grib_yyleng, 1, grib_yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_is_interactive ) \
		{ \
		int c = '*'; \
		grib_yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( grib_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( grib_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (grib_yy_size_t) max_size, grib_yyin)) == 0 && ferror(grib_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(grib_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "grib_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef grib_yyterminate
#define grib_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) grib_yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int grib_yylex (void);

#define YY_DECL int grib_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after grib_yytext and grib_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	grib_yy_state_type grib_yy_current_state;
	char *grib_yy_cp, *grib_yy_bp;
	int grib_yy_act;
    
	if ( !(grib_yy_init) )
		{
		(grib_yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (grib_yy_start) )
			(grib_yy_start) = 1;	/* first start state */

		if ( ! grib_yyin )
			grib_yyin = stdin;

		if ( ! grib_yyout )
			grib_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			grib_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE );
		}

		grib_yy_load_buffer_state(  );
		}

	{
#line 71 "gribl.l"



#line 1424 "gribl.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		grib_yy_cp = (grib_yy_c_buf_p);

		/* Support of grib_yytext. */
		*grib_yy_cp = (grib_yy_hold_char);

		/* grib_yy_bp points to the position in grib_yy_ch_buf of the start of
		 * the current run.
		 */
		grib_yy_bp = grib_yy_cp;

		grib_yy_current_state = (grib_yy_start);
grib_yy_match:
		do
			{
			YY_CHAR grib_yy_c = grib_yy_ec[YY_SC_TO_UI(*grib_yy_cp)] ;
			if ( grib_yy_accept[grib_yy_current_state] )
				{
				(grib_yy_last_accepting_state) = grib_yy_current_state;
				(grib_yy_last_accepting_cpos) = grib_yy_cp;
				}
			while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
				{
				grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
				if ( grib_yy_current_state >= 798 )
					grib_yy_c = grib_yy_meta[grib_yy_c];
				}
			grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
			++grib_yy_cp;
			}
		while ( grib_yy_base[grib_yy_current_state] != 1945 );

grib_yy_find_action:
		grib_yy_act = grib_yy_accept[grib_yy_current_state];
		if ( grib_yy_act == 0 )
			{ /* have to back up */
			grib_yy_cp = (grib_yy_last_accepting_cpos);
			grib_yy_current_state = (grib_yy_last_accepting_state);
			grib_yy_act = grib_yy_accept[grib_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( grib_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*grib_yy_cp = (grib_yy_hold_char);
			grib_yy_cp = (grib_yy_last_accepting_cpos);
			grib_yy_current_state = (grib_yy_last_accepting_state);
			goto grib_yy_find_action;

case 1:
YY_RULE_SETUP
#line 74 "gribl.l"
return EQ       ;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 75 "gribl.l"
return GE       ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 76 "gribl.l"
return GT       ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 77 "gribl.l"
return LE       ;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "gribl.l"
return LT       ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "gribl.l"
return NE       ;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "gribl.l"
return NE       ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "gribl.l"
return BIT      ;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 82 "gribl.l"
return BITOFF   ;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "gribl.l"
return IS   ;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "gribl.l"
return NOT   ;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 86 "gribl.l"
return NOT   ;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "gribl.l"
return AND   ;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "gribl.l"
return AND   ;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "gribl.l"
return OR   ;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 90 "gribl.l"
return OR   ;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "gribl.l"
return NIL   ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "gribl.l"
return DUMMY   ;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 95 "gribl.l"
return SUBSTR   ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 96 "gribl.l"
return CLOSE   ;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 97 "gribl.l"
return LENGTH   ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 98 "gribl.l"
return LOWERCASE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 99 "gribl.l"
return IF       ;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 100 "gribl.l"
return IF_TRANSIENT       ;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 101 "gribl.l"
return ELSE       ;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 102 "gribl.l"
return UNSIGNED ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 103 "gribl.l"
return ASCII    ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 104 "gribl.l"
return BYTE    ;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 105 "gribl.l"
return LABEL    ;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 106 "gribl.l"
return LIST     ;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 107 "gribl.l"
return WHILE     ;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 108 "gribl.l"
return TEMPLATE ;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 109 "gribl.l"
return TEMPLATE_NOFAIL ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 110 "gribl.l"
return TRIGGER ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 111 "gribl.l"
return END      ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 112 "gribl.l"
return IBMFLOAT ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 113 "gribl.l"
return FLOAT ;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 114 "gribl.l"
return SIGNED   ;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 115 "gribl.l"
return CODETABLE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 116 "gribl.l"
return GETENV;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 117 "gribl.l"
return SMART_TABLE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 118 "gribl.l"
return DICTIONARY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 119 "gribl.l"
return CODETABLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 120 "gribl.l"
return FLAG     ;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 121 "gribl.l"
return LOOKUP   ;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 122 "gribl.l"
return GROUP  ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "gribl.l"
return NON_ALPHA   ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "gribl.l"
return META     ;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "gribl.l"
return PADTOEVEN    ;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 126 "gribl.l"
return PADTO    ;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "gribl.l"
return PADTOMULTIPLE    ;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "gribl.l"
return PAD      ;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "gribl.l"
return SECTION_PADDING      ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "gribl.l"
return MESSAGE      ;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 131 "gribl.l"
return MESSAGE_COPY      ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 132 "gribl.l"
return ALIAS    ;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "gribl.l"
return UNALIAS    ;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "gribl.l"
return POS      ;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "gribl.l"
return INTCONST ;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "gribl.l"
return TRANS    ;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "gribl.l"
return STRING_TYPE   ;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "gribl.l"
return LONG_TYPE   ;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 139 "gribl.l"
return DOUBLE_TYPE   ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "gribl.l"
return ITERATOR ;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 141 "gribl.l"
return NEAREST ;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "gribl.l"
return BOX ;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "gribl.l"
return KSEC    ;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "gribl.l"
return FLAGBIT    ;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 145 "gribl.l"
return KSEC1EXPVER    ;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 146 "gribl.l"
return MODIFY    ;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 148 "gribl.l"
return G1_HALF_BYTE    ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "gribl.l"
return G1_MESSAGE_LENGTH    ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "gribl.l"
return G1_SECTION4_LENGTH    ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 152 "gribl.l"
return EXPORT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 153 "gribl.l"
return REMOVE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "gribl.l"
return RENAME;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 155 "gribl.l"
return IS_IN_LIST;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 156 "gribl.l"
return IS_IN_DICT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 157 "gribl.l"
return TO_INTEGER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 158 "gribl.l"
return TO_STRING;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 159 "gribl.l"
return SEX2DEC;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 160 "gribl.l"
return IS_INTEGER;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 161 "gribl.l"
return IS_INTEGER;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 163 "gribl.l"
return SECTION_LENGTH     ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 165 "gribl.l"
return ASSERT    ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 167 "gribl.l"
return READ_ONLY;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 168 "gribl.l"
return NO_COPY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 169 "gribl.l"
return EDITION_SPECIFIC;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 170 "gribl.l"
return DUMP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 171 "gribl.l"
return NO_FAIL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 172 "gribl.l"
return HIDDEN;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 173 "gribl.l"
return CAN_BE_MISSING;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 174 "gribl.l"
return MISSING;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 175 "gribl.l"
return CONSTRAINT;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 176 "gribl.l"
return OVERRIDE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 177 "gribl.l"
return COPY_OK;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 179 "gribl.l"
return UINT8;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 180 "gribl.l"
return INT8;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 182 "gribl.l"
return UINT16;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 183 "gribl.l"
return INT16;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 184 "gribl.l"
return UINT16_LITTLE_ENDIAN;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 185 "gribl.l"
return INT16_LITTLE_ENDIAN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 187 "gribl.l"
return UINT32;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 188 "gribl.l"
return INT32;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 189 "gribl.l"
return UINT32_LITTLE_ENDIAN;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 190 "gribl.l"
return INT32_LITTLE_ENDIAN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 192 "gribl.l"
return UINT64;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 193 "gribl.l"
return INT64;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 194 "gribl.l"
return UINT64_LITTLE_ENDIAN;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 195 "gribl.l"
return INT64_LITTLE_ENDIAN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 197 "gribl.l"
return BLOB;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 199 "gribl.l"
return SET;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 200 "gribl.l"
return SET_NOFAIL;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 201 "gribl.l"
return WHEN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 202 "gribl.l"
return CASE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 203 "gribl.l"
return SWITCH;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 204 "gribl.l"
return DEFAULT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 205 "gribl.l"
return CONCEPT;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 206 "gribl.l"
return CONCEPT_NOFAIL;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 207 "gribl.l"
return HASH_ARRAY;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 208 "gribl.l"
return WRITE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 209 "gribl.l"
return APPEND;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 210 "gribl.l"
return PRINT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 211 "gribl.l"
return SKIP;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 213 "gribl.l"
{
          int c,q;
          while((c = GET_INPUT()) && isspace(c) && c != '\n') ;
          q = c; /* the quote */

          grib_yyleng = 0;
          while((c = GET_INPUT()) && c != q && c != '\n')
                {
                    if(c == '\\') grib_yytext[grib_yyleng++] = GET_INPUT();
                    else grib_yytext[grib_yyleng++] =  c;
                }

                grib_yytext[grib_yyleng++] = 0;

          grib_parser_include(grib_yytext);
         }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "gribl.l"
{
           int c,q = grib_yytext[0];

           grib_yyleng = 0;

           while((c = GET_INPUT()) && c != q )
           {
               if(c == '\\') grib_yytext[grib_yyleng++] = GET_INPUT();
               else {
									 grib_yytext[grib_yyleng++] =  c;
									 if (c =='\n') grib_yylineno++;
							 }
            }

            grib_yytext[grib_yyleng++] = 0;
            grib_yylval.str = strdup(grib_yytext);
            return STRING;
        }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 249 "gribl.l"
{
           int c;
           unsigned long val = 0;

           while((c = GET_INPUT()) && c != '`' && c != '\n')
           {
                val <<= 8;
                val |= c;
           }
           grib_yylval.lval = val;
           return INTEGER;
        }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 263 "gribl.l"
{ grib_yylval.str = strdup(grib_yytext); return IDENT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 264 "gribl.l"
{ grib_yylval.lval = atol((const char *)grib_yytext); return INTEGER; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 265 "gribl.l"
{ grib_yylval.lval = atol((const char *)grib_yytext); return INTEGER; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 266 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 267 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 268 "gribl.l"
{ grib_yylval.dval = atof((const char *)grib_yytext); return FLOAT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 271 "gribl.l"
{
           int c;
           while((c = GET_INPUT()) && (c != '\n')){}

        grib_yylineno++;
        }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 277 "gribl.l"
;
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 278 "gribl.l"
grib_yylineno++;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 282 "gribl.l"
return *grib_yytext;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 284 "gribl.l"
ECHO;
	YY_BREAK
#line 2220 "gribl.cc"
case YY_STATE_EOF(INITIAL):
	grib_yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int grib_yy_amount_of_matched_text = (int) (grib_yy_cp - (grib_yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*grib_yy_cp = (grib_yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed grib_yyin at a new source and called
			 * grib_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(grib_yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_input_file = grib_yyin;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for grib_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since grib_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (grib_yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] )
			{ /* This was really a NUL. */
			grib_yy_state_type grib_yy_next_state;

			(grib_yy_c_buf_p) = (grib_yytext_ptr) + grib_yy_amount_of_matched_text;

			grib_yy_current_state = grib_yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * grib_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			grib_yy_next_state = grib_yy_try_NUL_trans( grib_yy_current_state );

			grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;

			if ( grib_yy_next_state )
				{
				/* Consume the NUL. */
				grib_yy_cp = ++(grib_yy_c_buf_p);
				grib_yy_current_state = grib_yy_next_state;
				goto grib_yy_match;
				}

			else
				{
				grib_yy_cp = (grib_yy_c_buf_p);
				goto grib_yy_find_action;
				}
			}

		else switch ( grib_yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(grib_yy_did_buffer_switch_on_eof) = 0;

				if ( grib_yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * grib_yy_get_next_buffer() to have set up
					 * grib_yytext, we can now set up
					 * grib_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(grib_yy_c_buf_p) = (grib_yytext_ptr) + YY_MORE_ADJ;

					grib_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (grib_yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(grib_yy_c_buf_p) =
					(grib_yytext_ptr) + grib_yy_amount_of_matched_text;

				grib_yy_current_state = grib_yy_get_previous_state(  );

				grib_yy_cp = (grib_yy_c_buf_p);
				grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;
				goto grib_yy_match;

			case EOB_ACT_LAST_MATCH:
				(grib_yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)];

				grib_yy_current_state = grib_yy_get_previous_state(  );

				grib_yy_cp = (grib_yy_c_buf_p);
				grib_yy_bp = (grib_yytext_ptr) + YY_MORE_ADJ;
				goto grib_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of grib_yylex */

/* grib_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int grib_yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf;
	char *source = (grib_yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (grib_yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (grib_yy_c_buf_p) - (grib_yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((grib_yy_c_buf_p) - (grib_yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars) = 0;

	else
		{
			grib_yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int grib_yy_c_buf_p_offset =
				(int) ((grib_yy_c_buf_p) - b->grib_yy_ch_buf);

			if ( b->grib_yy_is_our_buffer )
				{
				grib_yy_size_t new_size = b->grib_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->grib_yy_buf_size += b->grib_yy_buf_size / 8;
				else
					b->grib_yy_buf_size *= 2;

				b->grib_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					grib_yyrealloc( (void *) b->grib_yy_ch_buf,
							 (grib_yy_size_t) (b->grib_yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->grib_yy_ch_buf = NULL;

			if ( ! b->grib_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(grib_yy_c_buf_p) = &b->grib_yy_ch_buf[grib_yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[number_to_move]),
			(grib_yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	if ( (grib_yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			grib_yyrestart( grib_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->grib_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((grib_yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		grib_yy_size_t new_size = (grib_yy_n_chars) + number_to_move + ((grib_yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf = (char *) grib_yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf, (grib_yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size = (int) (new_size - 2);
	}

	(grib_yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(grib_yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[0];

	return ret_val;
}

/* grib_yy_get_previous_state - get the state just before the EOB char was reached */

    static grib_yy_state_type grib_yy_get_previous_state (void)
{
	grib_yy_state_type grib_yy_current_state;
	char *grib_yy_cp;
    
	grib_yy_current_state = (grib_yy_start);

	for ( grib_yy_cp = (grib_yytext_ptr) + YY_MORE_ADJ; grib_yy_cp < (grib_yy_c_buf_p); ++grib_yy_cp )
		{
		YY_CHAR grib_yy_c = (*grib_yy_cp ? grib_yy_ec[YY_SC_TO_UI(*grib_yy_cp)] : 1);
		if ( grib_yy_accept[grib_yy_current_state] )
			{
			(grib_yy_last_accepting_state) = grib_yy_current_state;
			(grib_yy_last_accepting_cpos) = grib_yy_cp;
			}
		while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
			{
			grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
			if ( grib_yy_current_state >= 798 )
				grib_yy_c = grib_yy_meta[grib_yy_c];
			}
		grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
		}

	return grib_yy_current_state;
}

/* grib_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = grib_yy_try_NUL_trans( current_state );
 */
    static grib_yy_state_type grib_yy_try_NUL_trans  (grib_yy_state_type grib_yy_current_state )
{
	int grib_yy_is_jam;
    	char *grib_yy_cp = (grib_yy_c_buf_p);

	YY_CHAR grib_yy_c = 1;
	if ( grib_yy_accept[grib_yy_current_state] )
		{
		(grib_yy_last_accepting_state) = grib_yy_current_state;
		(grib_yy_last_accepting_cpos) = grib_yy_cp;
		}
	while ( grib_yy_chk[grib_yy_base[grib_yy_current_state] + grib_yy_c] != grib_yy_current_state )
		{
		grib_yy_current_state = (int) grib_yy_def[grib_yy_current_state];
		if ( grib_yy_current_state >= 798 )
			grib_yy_c = grib_yy_meta[grib_yy_c];
		}
	grib_yy_current_state = grib_yy_nxt[grib_yy_base[grib_yy_current_state] + grib_yy_c];
	grib_yy_is_jam = (grib_yy_current_state == 797);

		return grib_yy_is_jam ? 0 : grib_yy_current_state;
}

#ifndef YY_NO_UNPUT

    void grib_yyunput (int c, char * grib_yy_bp )
{
	char *grib_yy_cp;
    
    grib_yy_cp = (grib_yy_c_buf_p);

	/* undo effects of setting up grib_yytext */
	*grib_yy_cp = (grib_yy_hold_char);

	if ( grib_yy_cp < YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		grib_yy_size_t number_to_move = (grib_yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf )
			*--dest = *--source;

		grib_yy_cp += (int) (dest - source);
		grib_yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars =
			(grib_yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_size;

		if ( grib_yy_cp < YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--grib_yy_cp = (char) c;

	(grib_yytext_ptr) = grib_yy_bp;
	(grib_yy_hold_char) = *grib_yy_cp;
	(grib_yy_c_buf_p) = grib_yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int grib_yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(grib_yy_c_buf_p) = (grib_yy_hold_char);

	if ( *(grib_yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* grib_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (grib_yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->grib_yy_ch_buf[(grib_yy_n_chars)] )
			/* This was really a NUL. */
			*(grib_yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			grib_yy_size_t offset = (grib_yy_c_buf_p) - (grib_yytext_ptr);
			++(grib_yy_c_buf_p);

			switch ( grib_yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because grib_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					grib_yyrestart( grib_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( grib_yywrap(  ) )
						return 0;

					if ( ! (grib_yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return grib_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(grib_yy_c_buf_p) = (grib_yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (grib_yy_c_buf_p);	/* cast for 8-bit char's */
	*(grib_yy_c_buf_p) = '\0';	/* preserve grib_yytext */
	(grib_yy_hold_char) = *++(grib_yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void grib_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        grib_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            grib_yy_create_buffer( grib_yyin, YY_BUF_SIZE );
	}

	grib_yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	grib_yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void grib_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		grib_yypop_buffer_state();
	 *		grib_yypush_buffer_state(new_buffer);
     */
	grib_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(grib_yy_c_buf_p) = (grib_yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos = (grib_yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	grib_yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (grib_yywrap()) processing, but the only time this flag
	 * is looked at is after grib_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(grib_yy_did_buffer_switch_on_eof) = 1;
}

static void grib_yy_load_buffer_state  (void)
{
    	(grib_yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars;
	(grib_yytext_ptr) = (grib_yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos;
	grib_yyin = YY_CURRENT_BUFFER_LVALUE->grib_yy_input_file;
	(grib_yy_hold_char) = *(grib_yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE grib_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) grib_yyalloc( sizeof( struct grib_yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_create_buffer()" );

	b->grib_yy_buf_size = size;

	/* grib_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->grib_yy_ch_buf = (char *) grib_yyalloc( (grib_yy_size_t) (b->grib_yy_buf_size + 2)  );
	if ( ! b->grib_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_create_buffer()" );

	b->grib_yy_is_our_buffer = 1;

	grib_yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with grib_yy_create_buffer()
 * 
 */
    void grib_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->grib_yy_is_our_buffer )
		grib_yyfree( (void *) b->grib_yy_ch_buf  );

	grib_yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a grib_yyrestart() or at EOF.
 */
    static void grib_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	grib_yy_flush_buffer( b );

	b->grib_yy_input_file = file;
	b->grib_yy_fill_buffer = 1;

    /* If b is the current buffer, then grib_yy_init_buffer was _probably_
     * called from grib_yyrestart() or through grib_yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->grib_yy_bs_lineno = 1;
        b->grib_yy_bs_column = 0;
    }

        b->grib_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void grib_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->grib_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->grib_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->grib_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->grib_yy_buf_pos = &b->grib_yy_ch_buf[0];

	b->grib_yy_at_bol = 1;
	b->grib_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		grib_yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void grib_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	grib_yyensure_buffer_stack();

	/* This block is copied from grib_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(grib_yy_c_buf_p) = (grib_yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_buf_pos = (grib_yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->grib_yy_n_chars = (grib_yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(grib_yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from grib_yy_switch_to_buffer. */
	grib_yy_load_buffer_state(  );
	(grib_yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void grib_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	grib_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((grib_yy_buffer_stack_top) > 0)
		--(grib_yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		grib_yy_load_buffer_state(  );
		(grib_yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void grib_yyensure_buffer_stack (void)
{
	grib_yy_size_t num_to_alloc;
    
	if (!(grib_yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(grib_yy_buffer_stack) = (struct grib_yy_buffer_state**)grib_yyalloc
								(num_to_alloc * sizeof(struct grib_yy_buffer_state*)
								);
		if ( ! (grib_yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yyensure_buffer_stack()" );

		memset((grib_yy_buffer_stack), 0, num_to_alloc * sizeof(struct grib_yy_buffer_state*));

		(grib_yy_buffer_stack_max) = num_to_alloc;
		(grib_yy_buffer_stack_top) = 0;
		return;
	}

	if ((grib_yy_buffer_stack_top) >= ((grib_yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		grib_yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (grib_yy_buffer_stack_max) + grow_size;
		(grib_yy_buffer_stack) = (struct grib_yy_buffer_state**)grib_yyrealloc
								((grib_yy_buffer_stack),
								num_to_alloc * sizeof(struct grib_yy_buffer_state*)
								);
		if ( ! (grib_yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in grib_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((grib_yy_buffer_stack) + (grib_yy_buffer_stack_max), 0, grow_size * sizeof(struct grib_yy_buffer_state*));
		(grib_yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE grib_yy_scan_buffer  (char * base, grib_yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) grib_yyalloc( sizeof( struct grib_yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_scan_buffer()" );

	b->grib_yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->grib_yy_buf_pos = b->grib_yy_ch_buf = base;
	b->grib_yy_is_our_buffer = 0;
	b->grib_yy_input_file = NULL;
	b->grib_yy_n_chars = b->grib_yy_buf_size;
	b->grib_yy_is_interactive = 0;
	b->grib_yy_at_bol = 1;
	b->grib_yy_fill_buffer = 0;
	b->grib_yy_buffer_status = YY_BUFFER_NEW;

	grib_yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to grib_yylex() will
 * scan from a @e copy of @a str.
 * @param grib_yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       grib_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE grib_yy_scan_string (const char * grib_yystr )
{
    
	return grib_yy_scan_bytes( grib_yystr, (int) strlen(grib_yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to grib_yylex() will
 * scan from a @e copy of @a bytes.
 * @param grib_yybytes the byte buffer to scan
 * @param _grib_yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE grib_yy_scan_bytes  (const char * grib_yybytes, grib_yy_size_t  _grib_yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	grib_yy_size_t n;
	grib_yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (grib_yy_size_t) (_grib_yybytes_len + 2);
	buf = (char *) grib_yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in grib_yy_scan_bytes()" );

	for ( i = 0; i < _grib_yybytes_len; ++i )
		buf[i] = grib_yybytes[i];

	buf[_grib_yybytes_len] = buf[_grib_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = grib_yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in grib_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->grib_yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void grib_yynoreturn grib_yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine grib_yyless() so it works in section 3 code. */

#undef grib_yyless
#define grib_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up grib_yytext. */ \
        grib_yy_size_t grib_yyless_macro_arg = (n); \
        YY_LESS_LINENO(grib_yyless_macro_arg);\
		grib_yytext[grib_yyleng] = (grib_yy_hold_char); \
		(grib_yy_c_buf_p) = grib_yytext + grib_yyless_macro_arg; \
		(grib_yy_hold_char) = *(grib_yy_c_buf_p); \
		*(grib_yy_c_buf_p) = '\0'; \
		grib_yyleng = grib_yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int grib_yyget_lineno  (void)
{
    
    return grib_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *grib_yyget_in  (void)
{
        return grib_yyin;
}

/** Get the output stream.
 * 
 */
FILE *grib_yyget_out  (void)
{
        return grib_yyout;
}

/** Get the length of the current token.
 * 
 */
grib_yy_size_t grib_yyget_leng  (void)
{
        return grib_yyleng;
}

/** Get the current token.
 * 
 */

char *grib_yyget_text  (void)
{
        return grib_yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void grib_yyset_lineno (int  _line_number )
{
    
    grib_yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see grib_yy_switch_to_buffer
 */
void grib_yyset_in (FILE *  _in_str )
{
        grib_yyin = _in_str ;
}

void grib_yyset_out (FILE *  _out_str )
{
        grib_yyout = _out_str ;
}

int grib_yyget_debug  (void)
{
        return grib_yy_flex_debug;
}

void grib_yyset_debug (int  _bdebug )
{
        grib_yy_flex_debug = _bdebug ;
}

static int grib_yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from grib_yylex_destroy(), so don't allocate here.
     */

    (grib_yy_buffer_stack) = NULL;
    (grib_yy_buffer_stack_top) = 0;
    (grib_yy_buffer_stack_max) = 0;
    (grib_yy_c_buf_p) = NULL;
    (grib_yy_init) = 0;
    (grib_yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    grib_yyin = stdin;
    grib_yyout = stdout;
#else
    grib_yyin = NULL;
    grib_yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * grib_yylex_init()
     */
    return 0;
}

/* grib_yylex_destroy is for both reentrant and non-reentrant scanners. */
int grib_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		grib_yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		grib_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	grib_yyfree((grib_yy_buffer_stack) );
	(grib_yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * grib_yylex() is called, initialization will occur. */
    grib_yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef grib_yytext_ptr
static void grib_yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int grib_yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *grib_yyalloc (grib_yy_size_t  size )
{
			return malloc(size);
}

void *grib_yyrealloc  (void * ptr, grib_yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void grib_yyfree (void * ptr )
{
			free( (char *) ptr );	/* see grib_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "grib_yytables"

#line 284 "gribl.l"



